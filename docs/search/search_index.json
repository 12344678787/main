{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to this tutorial for application development on SAP Business Technology Platform (SAP BTP). We provide information and examples on how to develop and deploy an application based on SAP Cloud Application Programming Model (CAP) on SAP BTP using different tools and services step by step. It's planned to provide multiple modules that are built upon each other. You can start the tutorial with the first module, or start in between, because the source code for every tutorial module is provided in this repository. Who Is This Tutorial For? The tutorial is suitable for new or experienced developers on SAP BTP. The purpose of this project is to help application developers get a quick start on development, provide best practices, solve common issues, use common services, identify areas that need to be improved, and have an end-to-end scenario for validation. What Topics Are Covered in the Tutorial? The tutorial covers a variety of topics starting from basic onboarding tasks to creating development pipelines. The tasks are bundled in a step-by-step tutorial that features the following topics: Setting up the development environment Creating a service based on CAP Implementing authorization checks Creating a SAP BTP trial account Deployment on SAP BTP, Cloud Foundry or on Kyma environment Stay tuned for new modules. How Can You Work with the Tutorial? The core of this site is the Tutorial page. In the tutorial, you get to know, step by step, the whole development process on SAP BTP. Make sure to do the necessary Installations first before starting the tutorial. After that, you can follow the tutorial through the different modules. Check out the provided Tutorial Overview to get an overview of what module you need to do and what modules are optional. If you can't complete a certain module, there\u2019s always the possibility of cloning a completed version of the module at the start of the next module. You can find the link in the box called Prerequisites . The master branch contains the tutorial that describes how to build the examples and how to deploy it to SAP BTP. All other branches contain the resulting source code of a tutorial module. Requirements The requirements are described in this tutorial . Download and Installation If you want to start from a specific tutorial module, get the name of its branch from the tutorial , download this repository and switch to the desired branch: git clone https://github.com/SAP-samples/cloud-cap-risk-management cd cloud-cap-risk-management checkout <branch> Known Issues You can find the known issues here . How to Obtain Support Check out the documentation for: CAP aka \"capire\" SAP BTP In case you have a question, find a bug, or otherwise need support to use SAP products, use: CAP Community SAP Community SAP BTP Support Components If you face a problem with the example application or the description, feel free to create an issue . Contributing If you have suggestions on how to improve the tutorial, you're welcome to provide your input here . License Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This project is licensed under the Apache Software License, version 2.0 except as noted otherwise in the LICENSE file.","title":"Welcome"},{"location":"#welcome","text":"Welcome to this tutorial for application development on SAP Business Technology Platform (SAP BTP). We provide information and examples on how to develop and deploy an application based on SAP Cloud Application Programming Model (CAP) on SAP BTP using different tools and services step by step. It's planned to provide multiple modules that are built upon each other. You can start the tutorial with the first module, or start in between, because the source code for every tutorial module is provided in this repository.","title":"Welcome"},{"location":"#who-is-this-tutorial-for","text":"The tutorial is suitable for new or experienced developers on SAP BTP. The purpose of this project is to help application developers get a quick start on development, provide best practices, solve common issues, use common services, identify areas that need to be improved, and have an end-to-end scenario for validation.","title":"Who Is This Tutorial For?"},{"location":"#what-topics-are-covered-in-the-tutorial","text":"The tutorial covers a variety of topics starting from basic onboarding tasks to creating development pipelines. The tasks are bundled in a step-by-step tutorial that features the following topics: Setting up the development environment Creating a service based on CAP Implementing authorization checks Creating a SAP BTP trial account Deployment on SAP BTP, Cloud Foundry or on Kyma environment Stay tuned for new modules.","title":"What Topics Are Covered in the Tutorial?"},{"location":"#how-can-you-work-with-the-tutorial","text":"The core of this site is the Tutorial page. In the tutorial, you get to know, step by step, the whole development process on SAP BTP. Make sure to do the necessary Installations first before starting the tutorial. After that, you can follow the tutorial through the different modules. Check out the provided Tutorial Overview to get an overview of what module you need to do and what modules are optional. If you can't complete a certain module, there\u2019s always the possibility of cloning a completed version of the module at the start of the next module. You can find the link in the box called Prerequisites . The master branch contains the tutorial that describes how to build the examples and how to deploy it to SAP BTP. All other branches contain the resulting source code of a tutorial module.","title":"How Can You Work with the Tutorial?"},{"location":"#requirements","text":"The requirements are described in this tutorial .","title":"Requirements"},{"location":"#download-and-installation","text":"If you want to start from a specific tutorial module, get the name of its branch from the tutorial , download this repository and switch to the desired branch: git clone https://github.com/SAP-samples/cloud-cap-risk-management cd cloud-cap-risk-management checkout <branch>","title":"Download and Installation"},{"location":"#known-issues","text":"You can find the known issues here .","title":"Known Issues"},{"location":"#how-to-obtain-support","text":"Check out the documentation for: CAP aka \"capire\" SAP BTP In case you have a question, find a bug, or otherwise need support to use SAP products, use: CAP Community SAP Community SAP BTP Support Components If you face a problem with the example application or the description, feel free to create an issue .","title":"How to Obtain Support"},{"location":"#contributing","text":"If you have suggestions on how to improve the tutorial, you're welcome to provide your input here .","title":"Contributing"},{"location":"#license","text":"Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This project is licensed under the Apache Software License, version 2.0 except as noted otherwise in the LICENSE file.","title":"License"},{"location":"CAP_Business_Logic/","text":"Add Business Logic to Your Application Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application The results of the previous module Create an SAP Fiori Elements-Based Application can be found here . Additional Documentation Official CAP documentation Create a Business Application Using CAP for Node.js In this section, you add some custom code to the CAP service. Depending on the value of the property impact , the custom code changes the value of the property criticality . This property is used in OData annotations to control the color of some of the cells in the table of our work list page. Add Custom Code Copy the file risk-service.js from templates/cap/business-logic/srv to the srv folder of your app. In the browser, reload the page of the SAP Fiori Elements app. It now shows our work list with the columns Priority and Impact with color and an icon, depending on the amount in Impact . Explanation of the Custom Code module . exports = async ( srv ) => { srv . after ( 'READ' , 'Risks' , ( risks ) => { risks . forEach (( risk ) => { if ( risk . impact >= 100000 ) { risk . criticality = 1 ; } else { risk . criticality = 2 ; } }); }); } Because your file is called risk-service.js and, therefore, has the same name as your service definition file risk-service.cds , CAP automatically treats it as a handler file for the service defined in there. CAP exposes several events and you can easily write handlers like the above. In this case, the event after is triggered after a READ was carried out for our Risks entity. In your custom handler, you get all the data (in this case, all the risks) that was read according to the query. You can loop over each of them and, if needed, adjust the data of the response. In this case, you change the value of the criticality when the impact is bigger than 100000. The new values for criticality are then part of the response to the read request. So, this affects the service's response, but how does it translate into a changed UI? For this, you have got to go back to the annotations you created in Create a CAP-Based service where you find your srv/risks-service-ui.cds file. There, you had the two columns prio and impact annotated with an additional Criticality annotation. This annotation points to the criticality property of your service. Criticality with an upper case C is the annotation, while the property name criticality could also be called different opposed to the annotation. As you now set different values in your custom handler for criticality , the FE app translates them into icons and colors, which you can see in the UI. annotate RiskService . Risks with @ ( UI : { ... ... LineItem : [ ... ... { Value : prio , Criticality : criticality }, { Value : impact , Criticality : criticality } ], You can find more about the possible values of the Criticality annotation in section UI Vocabulary . This, however, is just one of the many sections of the OData annotation vocabularies for UI and Common usage. The result of these steps can be found in the business-logic branch of the tutorial.","title":"Add Business Logic to Your Application"},{"location":"CAP_Business_Logic/#add-business-logic-to-your-application","text":"Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application The results of the previous module Create an SAP Fiori Elements-Based Application can be found here . Additional Documentation Official CAP documentation Create a Business Application Using CAP for Node.js In this section, you add some custom code to the CAP service. Depending on the value of the property impact , the custom code changes the value of the property criticality . This property is used in OData annotations to control the color of some of the cells in the table of our work list page.","title":"Add Business Logic to Your Application"},{"location":"CAP_Business_Logic/#add-custom-code","text":"Copy the file risk-service.js from templates/cap/business-logic/srv to the srv folder of your app. In the browser, reload the page of the SAP Fiori Elements app. It now shows our work list with the columns Priority and Impact with color and an icon, depending on the amount in Impact .","title":"Add Custom Code"},{"location":"CAP_Business_Logic/#explanation-of-the-custom-code","text":"module . exports = async ( srv ) => { srv . after ( 'READ' , 'Risks' , ( risks ) => { risks . forEach (( risk ) => { if ( risk . impact >= 100000 ) { risk . criticality = 1 ; } else { risk . criticality = 2 ; } }); }); } Because your file is called risk-service.js and, therefore, has the same name as your service definition file risk-service.cds , CAP automatically treats it as a handler file for the service defined in there. CAP exposes several events and you can easily write handlers like the above. In this case, the event after is triggered after a READ was carried out for our Risks entity. In your custom handler, you get all the data (in this case, all the risks) that was read according to the query. You can loop over each of them and, if needed, adjust the data of the response. In this case, you change the value of the criticality when the impact is bigger than 100000. The new values for criticality are then part of the response to the read request. So, this affects the service's response, but how does it translate into a changed UI? For this, you have got to go back to the annotations you created in Create a CAP-Based service where you find your srv/risks-service-ui.cds file. There, you had the two columns prio and impact annotated with an additional Criticality annotation. This annotation points to the criticality property of your service. Criticality with an upper case C is the annotation, while the property name criticality could also be called different opposed to the annotation. As you now set different values in your custom handler for criticality , the FE app translates them into icons and colors, which you can see in the UI. annotate RiskService . Risks with @ ( UI : { ... ... LineItem : [ ... ... { Value : prio , Criticality : criticality }, { Value : impact , Criticality : criticality } ], You can find more about the possible values of the Criticality annotation in section UI Vocabulary . This, however, is just one of the many sections of the OData annotation vocabularies for UI and Common usage. The result of these steps can be found in the business-logic branch of the tutorial.","title":"Explanation of the Custom Code"},{"location":"CAP_MTA_Deployment/","text":"Deploy Your Multi-Target Application (MTA) Additional Documentation Multi-target Applications in the Cloud Foundry Environment Create the Multi-target Application (MTA) Description Files As a result of this tutorial, you have a running CAP service in the cloud based on SAP HANA. You will deploy the user interface in the tutorial Add the SAP Launchpad Service . The deployment is based on MTA ( Multi-Target Application , sometimes also called MultiApps ) technology. The MTA is a SAP-proprietary way to do deployments consisting of multiple modules that can be implemented in different technologies. Advantages compared to the cf push method a build tool automatically created service instances service keys destinations content deployment (HTML5, workflow, ...) blue-green deployment Build and Deploy Using MTA Prerequisites Install the MTA Build Tool mbt Check if you have already installed the Cloud MTA Build Tool (MBT) : mbt --version If you don't get back a version number, install the MultiApps Archive Builder : npm install -g mbt Install make Tool Linux and macOS are already shipped with make . This is only relevant for Windows users. The make tool is required by the mbt tool. You can download it from the GNU Make site: Go to http://gnuwin32.sourceforge.net/packages/make.htm . Choose the download with the description Complete package, except sources . Run the installer. Enter Edit the System Environment Variables in the Windows search box (Windows icon in the task bar). The System Properties dialog is opened. Choose Environment Variables... . Choose your Path env variable under User Variables for <your_user_name> and choose Edit . Choose Browse and navigate to GNU make (usually C:\\Program Files (x86)\\GnuWin32\\bin ). Click OK to add GNU make to your Path env variable. Restart VS Code to make the change effective. Install the MultiApps Cloud Foundry CLI Plugin The MultiApps plugin is required to deploy an MTA archive. It needs to be available in your Cloud Foundry landscape's Cloud Foundry plugin repository. Therefore, you need to log on to your Cloud Foundry landscape. If you don't know whether you\u2019re logged on to Cloud Foundry or if you're wondering to which Cloud Foundry org and space are you logged on, you can always use cf target in a terminal to find out. If you aren't logged on already, go to your SAP BTP Cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Select your Global Account and then the Subaccount to which you want to deploy your service and application. On the subaccount page, gather all the data to log in to Cloud Foundry (CF): the API Endpoint the Org Name the Space Name For your convenience, these are the API Endpoints for the different landscapes: Trial https://api.cf.eu10.hana.ondemand.com AWS Live EU 10 https://api.cf.eu10.hana.ondemand.com Open up a terminal. Set the Cloud Foundry API endpoint: cf api <API Endpoint of your landscape> Log in to your Cloud Foundry account, using your SAP BTP credentials: cf login Check if the MultiApps plugin is already installed: cf plugins If the MultiApps plugin isn\u2019t installed, install it now: cf install-plugin multiapps If the installation fails, do it manually as described here . Generate MTA Deployment Descriptor ( mta.yaml ) The MTA deployment is described in the MTA Deployment Descriptor, a file called mta.yaml . As the first step, you let the CAP server generate an initial mta.yaml file. Run the following command from the project root folder: cds add mta The file is generated based on your previously created settings in the package.json file. The mta.yaml file consists of different modules (Cloud Foundry apps) and resources (Cloud Foundry services). Modules: cpapp-srv - OData service cpapp-db-deployer - Deploy CAP schema and data (CSV files) to database Resources: The resources are generated from the requires section of cds in the package.json . cpapp-db - SAP HANA DB HDMI container cpapp-uaa - XSUAA service The resources are Cloud Foundry service instances that are automatically created and updated during the MTA deployment. Ensure the Right Service Plan for HDI Container Different service plans are required for trial and productive SAP BTP accounts. Make sure that the right plan is set in the mta.yaml file: Trial By default, the service parameter is set to hana in the mta.yaml file. You have to change it to hanatrial if you're working in the trial landscape: resources : ... - name : cpapp-db # ------------------------------------------------------------ type : com.sap.xs.hdi-container parameters : service : hanatrial service-plan : hdi-shared properties : hdi-service-name : ${service-name} In case you get the error: None of the service offering(s) \"[hanatrial, hanatrial]\" match with existing service offerings or provide service plan \"hdi-shared\" If you get the error Service operation failed: Service \"cpapp-db\" could not be created because none of the service offering(s) \"[hanatrial, hanatrial]\" match with existing service offerings or provide service plan \"hdi-shared\" , then you have to add a service plan to your entitlements. In your subaccount, choose Entitlements on the left. Choose Configure Entitlements \u2192 Add Service Plans . Search for SAP HANA Schemas & HDI Containers Trial entitlement. Add the service plans included in the entitlement. Other resources : ... - name : cpapp-db # ------------------------------------------------------------ type : com.sap.xs.hdi-container parameters : service : hana service-plan : hdi-shared properties : hdi-service-name : ${service-name} Exclude CSV Files from Deployment In one of the first steps creating the CAP application, you have added two CSV files with test data. These files are required to pre-fill local testing with the SQLite memory. Without the files, the database would be empty after each restart. Test files should never be deployed to an SAP HANA database as table data. This can cause the deletion of all files of the affected database table with a change of a data file, even if the data file for the affected table has been removed before. SAP HANA remembers all data files that have ever been deployed to the table and might restore it. Only data files that contain data, which are defined by the application developer and can't be changed by the application should be delivered in this way. Delivering files for tables with customer data already caused data loss in productive scenarios! See section Providing Initial Data in the CAP documentation for more details. To avoid any loss of data, you change the MTA build parameters to remove all the CSV files and the hdbtabledata that is generated by the CAP server out of the CSV files. Add the following line to the mta.yaml file: build-parameters : before-all : - builder : custom commands : - npm install --production - npx -p @sap/cds-dk cds build --production - npx rimraf gen/db/src/gen/data Add Authorization and Trust Management Service (XSUAA) The next step is to add the Authorization and Trust Management service to mta.yaml to allow user login, authorization, and authentication checks. resources : ... - name : cpapp-uaa # ------------------------------------------------------------ type : org.cloudfoundry.managed-service parameters : service : xsuaa service-plan : application path : ./xs-security.json config : xsappname : cpapp-${space} # name + space dependency tenant-mode : dedicated role-collections : - name : 'RiskManager-${space}' description : Manage Risks role-template-references : - $XSAPPNAME.RiskManager - name : 'RiskViewer-${space}' description : View Risks role-template-references : - $XSAPPNAME.RiskViewer The configuration for XSUAA is read from the xs-security.json file that was created in XSUAA Security Configuration . But in the config element, values can be added and overwritten. The value xsappname gets overwritten with a space-dependent value. The name has to be unique within a subaccount. This allows multiple deployments of this tutorial in different spaces of the same subaccount. For example, different people of a team that want to try it out and don't want to create a new subaccount for each team member. For a productive application, the xsappname should be explicitly set to the desired value. Further, you can add role collections using the xs-security.json file. Since role collections need to be unique in a subaccount like the xsappname , you can add it here and use the ${space} variable to make them unique like for the xsappname . Alternatively, role collections can be manually assigned in the SAP BTP cockpit. Additional Documentation Assigning Role Collections Build, Deploy, and Test mtar File Build the MTA module from the project root folder: mbt build -t ./ This creates a mtar file cpapp_1.0.0.mtar in the current folder (option: -t ./ ). Deploy the module to your current Cloud Foundry space: cf deploy cpapp_1.0.0.mtar After successful deployment, check if all the services have been created: cf services You should see the following services in your space: Check if the apps are running: cf apps You can also deploy a single module using -m <module-name> command line parameter. Enter the CAP service URL in your browser using the hostname displayed for cpapp-srv in the previous steps. You see the CAP start page, like this: When you choose the Mitigation or Risk service entity, you will see an error message: The service expects a so called JWT (JSON Web Token) in the HTTP Authorization header that contains the required authentication and authorization information to access the service. In the next tutorial, you will deploy the SAP Fiori UIs, so that you can access your UIs from SAP Fiori Launchpad. The Launchpad will trigger the authentication flow to provide the required token to access the service.","title":"Deploy Your Multi-Target Application (MTA)"},{"location":"CAP_MTA_Deployment/#deploy-your-multi-target-application-mta","text":"Additional Documentation Multi-target Applications in the Cloud Foundry Environment Create the Multi-target Application (MTA) Description Files As a result of this tutorial, you have a running CAP service in the cloud based on SAP HANA. You will deploy the user interface in the tutorial Add the SAP Launchpad Service . The deployment is based on MTA ( Multi-Target Application , sometimes also called MultiApps ) technology. The MTA is a SAP-proprietary way to do deployments consisting of multiple modules that can be implemented in different technologies. Advantages compared to the cf push method a build tool automatically created service instances service keys destinations content deployment (HTML5, workflow, ...) blue-green deployment","title":"Deploy Your Multi-Target Application (MTA)"},{"location":"CAP_MTA_Deployment/#build-and-deploy-using-mta","text":"","title":"Build and Deploy Using MTA"},{"location":"CAP_MTA_Deployment/#prerequisites","text":"","title":"Prerequisites"},{"location":"CAP_MTA_Deployment/#install-the-mta-build-tool-mbt","text":"Check if you have already installed the Cloud MTA Build Tool (MBT) : mbt --version If you don't get back a version number, install the MultiApps Archive Builder : npm install -g mbt","title":"Install the MTA Build Tool mbt"},{"location":"CAP_MTA_Deployment/#install-make-tool","text":"Linux and macOS are already shipped with make . This is only relevant for Windows users. The make tool is required by the mbt tool. You can download it from the GNU Make site: Go to http://gnuwin32.sourceforge.net/packages/make.htm . Choose the download with the description Complete package, except sources . Run the installer. Enter Edit the System Environment Variables in the Windows search box (Windows icon in the task bar). The System Properties dialog is opened. Choose Environment Variables... . Choose your Path env variable under User Variables for <your_user_name> and choose Edit . Choose Browse and navigate to GNU make (usually C:\\Program Files (x86)\\GnuWin32\\bin ). Click OK to add GNU make to your Path env variable. Restart VS Code to make the change effective.","title":"Install make Tool"},{"location":"CAP_MTA_Deployment/#install-the-multiapps-cloud-foundry-cli-plugin","text":"The MultiApps plugin is required to deploy an MTA archive. It needs to be available in your Cloud Foundry landscape's Cloud Foundry plugin repository. Therefore, you need to log on to your Cloud Foundry landscape. If you don't know whether you\u2019re logged on to Cloud Foundry or if you're wondering to which Cloud Foundry org and space are you logged on, you can always use cf target in a terminal to find out. If you aren't logged on already, go to your SAP BTP Cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Select your Global Account and then the Subaccount to which you want to deploy your service and application. On the subaccount page, gather all the data to log in to Cloud Foundry (CF): the API Endpoint the Org Name the Space Name For your convenience, these are the API Endpoints for the different landscapes: Trial https://api.cf.eu10.hana.ondemand.com AWS Live EU 10 https://api.cf.eu10.hana.ondemand.com Open up a terminal. Set the Cloud Foundry API endpoint: cf api <API Endpoint of your landscape> Log in to your Cloud Foundry account, using your SAP BTP credentials: cf login Check if the MultiApps plugin is already installed: cf plugins If the MultiApps plugin isn\u2019t installed, install it now: cf install-plugin multiapps If the installation fails, do it manually as described here .","title":"Install the MultiApps Cloud Foundry CLI Plugin"},{"location":"CAP_MTA_Deployment/#generate-mta-deployment-descriptor-mtayaml","text":"The MTA deployment is described in the MTA Deployment Descriptor, a file called mta.yaml . As the first step, you let the CAP server generate an initial mta.yaml file. Run the following command from the project root folder: cds add mta The file is generated based on your previously created settings in the package.json file. The mta.yaml file consists of different modules (Cloud Foundry apps) and resources (Cloud Foundry services). Modules: cpapp-srv - OData service cpapp-db-deployer - Deploy CAP schema and data (CSV files) to database Resources: The resources are generated from the requires section of cds in the package.json . cpapp-db - SAP HANA DB HDMI container cpapp-uaa - XSUAA service The resources are Cloud Foundry service instances that are automatically created and updated during the MTA deployment.","title":"Generate MTA Deployment Descriptor (mta.yaml)"},{"location":"CAP_MTA_Deployment/#ensure-the-right-service-plan-for-hdi-container","text":"Different service plans are required for trial and productive SAP BTP accounts. Make sure that the right plan is set in the mta.yaml file: Trial By default, the service parameter is set to hana in the mta.yaml file. You have to change it to hanatrial if you're working in the trial landscape: resources : ... - name : cpapp-db # ------------------------------------------------------------ type : com.sap.xs.hdi-container parameters : service : hanatrial service-plan : hdi-shared properties : hdi-service-name : ${service-name} In case you get the error: None of the service offering(s) \"[hanatrial, hanatrial]\" match with existing service offerings or provide service plan \"hdi-shared\" If you get the error Service operation failed: Service \"cpapp-db\" could not be created because none of the service offering(s) \"[hanatrial, hanatrial]\" match with existing service offerings or provide service plan \"hdi-shared\" , then you have to add a service plan to your entitlements. In your subaccount, choose Entitlements on the left. Choose Configure Entitlements \u2192 Add Service Plans . Search for SAP HANA Schemas & HDI Containers Trial entitlement. Add the service plans included in the entitlement. Other resources : ... - name : cpapp-db # ------------------------------------------------------------ type : com.sap.xs.hdi-container parameters : service : hana service-plan : hdi-shared properties : hdi-service-name : ${service-name}","title":"Ensure the Right Service Plan for HDI Container"},{"location":"CAP_MTA_Deployment/#exclude-csv-files-from-deployment","text":"In one of the first steps creating the CAP application, you have added two CSV files with test data. These files are required to pre-fill local testing with the SQLite memory. Without the files, the database would be empty after each restart. Test files should never be deployed to an SAP HANA database as table data. This can cause the deletion of all files of the affected database table with a change of a data file, even if the data file for the affected table has been removed before. SAP HANA remembers all data files that have ever been deployed to the table and might restore it. Only data files that contain data, which are defined by the application developer and can't be changed by the application should be delivered in this way. Delivering files for tables with customer data already caused data loss in productive scenarios! See section Providing Initial Data in the CAP documentation for more details. To avoid any loss of data, you change the MTA build parameters to remove all the CSV files and the hdbtabledata that is generated by the CAP server out of the CSV files. Add the following line to the mta.yaml file: build-parameters : before-all : - builder : custom commands : - npm install --production - npx -p @sap/cds-dk cds build --production - npx rimraf gen/db/src/gen/data","title":"Exclude CSV Files from Deployment"},{"location":"CAP_MTA_Deployment/#add-authorization-and-trust-management-service-xsuaa","text":"The next step is to add the Authorization and Trust Management service to mta.yaml to allow user login, authorization, and authentication checks. resources : ... - name : cpapp-uaa # ------------------------------------------------------------ type : org.cloudfoundry.managed-service parameters : service : xsuaa service-plan : application path : ./xs-security.json config : xsappname : cpapp-${space} # name + space dependency tenant-mode : dedicated role-collections : - name : 'RiskManager-${space}' description : Manage Risks role-template-references : - $XSAPPNAME.RiskManager - name : 'RiskViewer-${space}' description : View Risks role-template-references : - $XSAPPNAME.RiskViewer The configuration for XSUAA is read from the xs-security.json file that was created in XSUAA Security Configuration . But in the config element, values can be added and overwritten. The value xsappname gets overwritten with a space-dependent value. The name has to be unique within a subaccount. This allows multiple deployments of this tutorial in different spaces of the same subaccount. For example, different people of a team that want to try it out and don't want to create a new subaccount for each team member. For a productive application, the xsappname should be explicitly set to the desired value. Further, you can add role collections using the xs-security.json file. Since role collections need to be unique in a subaccount like the xsappname , you can add it here and use the ${space} variable to make them unique like for the xsappname . Alternatively, role collections can be manually assigned in the SAP BTP cockpit. Additional Documentation Assigning Role Collections","title":"Add Authorization and Trust Management Service (XSUAA)"},{"location":"CAP_MTA_Deployment/#build-deploy-and-test-mtar-file","text":"Build the MTA module from the project root folder: mbt build -t ./ This creates a mtar file cpapp_1.0.0.mtar in the current folder (option: -t ./ ). Deploy the module to your current Cloud Foundry space: cf deploy cpapp_1.0.0.mtar After successful deployment, check if all the services have been created: cf services You should see the following services in your space: Check if the apps are running: cf apps You can also deploy a single module using -m <module-name> command line parameter. Enter the CAP service URL in your browser using the hostname displayed for cpapp-srv in the previous steps. You see the CAP start page, like this: When you choose the Mitigation or Risk service entity, you will see an error message: The service expects a so called JWT (JSON Web Token) in the HTTP Authorization header that contains the required authentication and authorization information to access the service. In the next tutorial, you will deploy the SAP Fiori UIs, so that you can access your UIs from SAP Fiori Launchpad. The Launchpad will trigger the authentication flow to provide the required token to access the service.","title":"Build, Deploy, and Test mtar File"},{"location":"CAP_Service/","text":"Create a CAP-Based Service Prerequisites Installation Get Started Additional Documentation Official CAP documentation CAP Getting Started CAP Community In this section, you create a new CAP-based service, which exposes the OData V4 protocol. To do so, you use CAP's tooling cds init and cds watch in a terminal. Create and Initialize the Project Open a terminal. Create a directory <myDirectory> on your computer, where you want to develop the app. If you're working with SAP Business Application Studio, you can create <myDirectory> within your projects folder. Navigate to the previously created directory: cd <myDirectory> Create an initial CAP project by executing the command cds init . It creates the project in a new folder called cpapp : cds init cpapp Navigate to the project folder: cd cpapp Open the project in VS Code: code . The project looks like this in VS Code: In VS Code choose Terminal \u2192 New Terminal from its menu. A new terminal opens in the lower right part of the VS Code screen. In the VS Code terminal, run: npm install In the VS Code terminal, start a CAP server: cds watch In case you get the error: cds : File <npmIstallDirectory>\\cds.ps1 cannot be loaded because running scripts is disabled on this system. If you get the error cds : File <npmIstallDirectory>\\cds.ps1 cannot be loaded because running scripts is disabled on this system. after you run cds watch , you can run the command: Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser This will change the script execution policy for your user to Bypass directly from the VS Code terminal. To learn more about execution policies, see About Execution Policies . The CAP server serves all the CAP sources from your project. It also \"watches\" all the files in your projects and conveniently restarts whenever you save a file. Changes you have made will immediately be served without you having to do anything. The screen now looks like this: The CAP server tells you that there\u2019s no model yet that it can serve. You add one in the next steps. Add Files to the Project Open the Finder on Mac or the Explorer on Windows and navigate to the directory that you\u2019ve created for the tutorial. This is the <MyTutorialDirectory> directory created in section Get Started . It should be a subfolder of your project's parent directory. Open the folder templates and keep it open as you copy a number of files from there. For this part of the tutorial and others, it\u2019s probably best if you place it next to your VS Code instance like this: Alternatively, you can open it as a second folder in your VS Code project: File \u2192 Add Folder to Workspace... . Copy the file schema.cds from templates/cap/create-service/db to the db folder of your app. This is the code: namespace sap . ui . riskmanagement ; using { managed } from '@sap/cds/common' ; entity Risks : managed { key ID : UUID @ ( Core . Computed : true ); title : String ( 100 ); prio : String ( 5 ); descr : String ; miti : Association to Mitigations ; impact : Integer ; criticality : Integer ; } entity Mitigations : managed { key ID : UUID @ ( Core . Computed : true ); description : String ; owner : String ; timeline : String ; risks : Association to many Risks on risks . miti = $self ; } It creates two entities in the namespace sap.ui.riskmanagement : Risks and Mitigations . Each of them has a key called ID and several other properties. A Risk has a Mitigation and, therefore, the property miti has an association to exactly one Mitigation. A Mitigation in turn can be used for many Risks, so it has a \"to many\" association. They key is automatically filled by the CAP server, which is exposed to the user of the service with the annotation @(Core.Computed : true) . Notice how the CAP server reacted to dropping the file. It now tells you that it has a model but there are no service definitions yet and, thus, it still can\u2019t serve anything. Next, you add a service definition. Copy the file risk-service.cds from templates/cap/create-service/srv to the srv folder of your app. The content of the file looks like this: using { sap . ui . riskmanagement as my } from '../db/schema' ; @ path : 'service/risk' service RiskService { entity Risks as projection on my . Risks ; annotate Risks with @ odata . draft . enabled ; entity Mitigations as projection on my . Mitigations ; annotate Mitigations with @ odata . draft . enabled ; } It creates a new service RiskService in the namespace sap.ui.riskmanagement . This service exposes two entities: Risks and Mitigations , which are exposing the entities of the database schema you\u2019ve created in the step before. If you again look at the terminal, you see that the CAP server has noticed the new file and now tells us that it serves something under http://localhost:4004 . Open a browser with http://localhost:4004 and you see: You may have to stop and restart the cds watch command. Choose the $metadata link. You see the OData metadata document of your new service. So, with just the two files for the database schema and the service exposure you added to your project, you have already got a running OData service! You might wonder why the service itself is called risk even though in the file it\u2019s called RiskService . This is a convention in CAP, the service suffix is subtracted from the name. If you now choose the Risks link, you only get this: { @ odata . context : \"$metadata#Risks\" , value : [ ] } So, there\u2019s no data yet. This is because so far, your model doesn\u2019t contain any data. You add some now. Copy the folder data from templates/cap/create-service/db to the db folder of your app. If VS Code asks you whether to copy the folder, confirm. You\u2019ve now added two comma-separated value (CSV) files that contain local data for both the Risks and the Mitigations entities. A quick look into the sap.ui.riskmanagement-Risks.csv (the name consists of your namespace and the name of your database entity from the schema.cds file) file shows data like this: ID;createdAt;createdBy;title;prio;descr;miti_id;impact 20466922-7d57-4e76-b14c-e53fd97dcb11;2021-04-27;max.mustermann@muster.com;CFR non-compliance;Fred Fish;3;Recent restructuring might violate CFR code 71;20466921-7d57-4e76-b14c-e53fd97dcb11;10000 ... The first line contains all the properties from your Risks entity. While the other ones are straight forward, consider the miti_id property. In your entity, you only have a miti property, so where does it come from? miti is an association to Mitigations , as Mitigations could have several key properties, the association on the database needs to point to all of these, therefore the CAP server creates a property <AssociationProperty>_<AssociatedEntityKey> for each key. As always, the CAP server has noticed the change. You may have to stop and restart the cds watch command. Revisit the Risks entity http://localhost:4004/service/risk/Risks in your browser, you now see the data exposed: And that's it: You\u2019ve now got a full blown OData service, which complies to the OData standard and supports the respective queries without having to code anything but the data model and exposing the service itself. The service is completely exposed without any authentication or authorization check. You extend the service later with such checks. The result of these steps can be found in the create-service branch of the tutorial.","title":"Create a CAP-Based Service"},{"location":"CAP_Service/#create-a-cap-based-service","text":"Prerequisites Installation Get Started Additional Documentation Official CAP documentation CAP Getting Started CAP Community In this section, you create a new CAP-based service, which exposes the OData V4 protocol. To do so, you use CAP's tooling cds init and cds watch in a terminal.","title":"Create a CAP-Based Service"},{"location":"CAP_Service/#create-and-initialize-the-project","text":"Open a terminal. Create a directory <myDirectory> on your computer, where you want to develop the app. If you're working with SAP Business Application Studio, you can create <myDirectory> within your projects folder. Navigate to the previously created directory: cd <myDirectory> Create an initial CAP project by executing the command cds init . It creates the project in a new folder called cpapp : cds init cpapp Navigate to the project folder: cd cpapp Open the project in VS Code: code . The project looks like this in VS Code: In VS Code choose Terminal \u2192 New Terminal from its menu. A new terminal opens in the lower right part of the VS Code screen. In the VS Code terminal, run: npm install In the VS Code terminal, start a CAP server: cds watch In case you get the error: cds : File <npmIstallDirectory>\\cds.ps1 cannot be loaded because running scripts is disabled on this system. If you get the error cds : File <npmIstallDirectory>\\cds.ps1 cannot be loaded because running scripts is disabled on this system. after you run cds watch , you can run the command: Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope CurrentUser This will change the script execution policy for your user to Bypass directly from the VS Code terminal. To learn more about execution policies, see About Execution Policies . The CAP server serves all the CAP sources from your project. It also \"watches\" all the files in your projects and conveniently restarts whenever you save a file. Changes you have made will immediately be served without you having to do anything. The screen now looks like this: The CAP server tells you that there\u2019s no model yet that it can serve. You add one in the next steps.","title":"Create and Initialize the Project"},{"location":"CAP_Service/#add-files-to-the-project","text":"Open the Finder on Mac or the Explorer on Windows and navigate to the directory that you\u2019ve created for the tutorial. This is the <MyTutorialDirectory> directory created in section Get Started . It should be a subfolder of your project's parent directory. Open the folder templates and keep it open as you copy a number of files from there. For this part of the tutorial and others, it\u2019s probably best if you place it next to your VS Code instance like this: Alternatively, you can open it as a second folder in your VS Code project: File \u2192 Add Folder to Workspace... . Copy the file schema.cds from templates/cap/create-service/db to the db folder of your app. This is the code: namespace sap . ui . riskmanagement ; using { managed } from '@sap/cds/common' ; entity Risks : managed { key ID : UUID @ ( Core . Computed : true ); title : String ( 100 ); prio : String ( 5 ); descr : String ; miti : Association to Mitigations ; impact : Integer ; criticality : Integer ; } entity Mitigations : managed { key ID : UUID @ ( Core . Computed : true ); description : String ; owner : String ; timeline : String ; risks : Association to many Risks on risks . miti = $self ; } It creates two entities in the namespace sap.ui.riskmanagement : Risks and Mitigations . Each of them has a key called ID and several other properties. A Risk has a Mitigation and, therefore, the property miti has an association to exactly one Mitigation. A Mitigation in turn can be used for many Risks, so it has a \"to many\" association. They key is automatically filled by the CAP server, which is exposed to the user of the service with the annotation @(Core.Computed : true) . Notice how the CAP server reacted to dropping the file. It now tells you that it has a model but there are no service definitions yet and, thus, it still can\u2019t serve anything. Next, you add a service definition. Copy the file risk-service.cds from templates/cap/create-service/srv to the srv folder of your app. The content of the file looks like this: using { sap . ui . riskmanagement as my } from '../db/schema' ; @ path : 'service/risk' service RiskService { entity Risks as projection on my . Risks ; annotate Risks with @ odata . draft . enabled ; entity Mitigations as projection on my . Mitigations ; annotate Mitigations with @ odata . draft . enabled ; } It creates a new service RiskService in the namespace sap.ui.riskmanagement . This service exposes two entities: Risks and Mitigations , which are exposing the entities of the database schema you\u2019ve created in the step before. If you again look at the terminal, you see that the CAP server has noticed the new file and now tells us that it serves something under http://localhost:4004 . Open a browser with http://localhost:4004 and you see: You may have to stop and restart the cds watch command. Choose the $metadata link. You see the OData metadata document of your new service. So, with just the two files for the database schema and the service exposure you added to your project, you have already got a running OData service! You might wonder why the service itself is called risk even though in the file it\u2019s called RiskService . This is a convention in CAP, the service suffix is subtracted from the name. If you now choose the Risks link, you only get this: { @ odata . context : \"$metadata#Risks\" , value : [ ] } So, there\u2019s no data yet. This is because so far, your model doesn\u2019t contain any data. You add some now. Copy the folder data from templates/cap/create-service/db to the db folder of your app. If VS Code asks you whether to copy the folder, confirm. You\u2019ve now added two comma-separated value (CSV) files that contain local data for both the Risks and the Mitigations entities. A quick look into the sap.ui.riskmanagement-Risks.csv (the name consists of your namespace and the name of your database entity from the schema.cds file) file shows data like this: ID;createdAt;createdBy;title;prio;descr;miti_id;impact 20466922-7d57-4e76-b14c-e53fd97dcb11;2021-04-27;max.mustermann@muster.com;CFR non-compliance;Fred Fish;3;Recent restructuring might violate CFR code 71;20466921-7d57-4e76-b14c-e53fd97dcb11;10000 ... The first line contains all the properties from your Risks entity. While the other ones are straight forward, consider the miti_id property. In your entity, you only have a miti property, so where does it come from? miti is an association to Mitigations , as Mitigations could have several key properties, the association on the database needs to point to all of these, therefore the CAP server creates a property <AssociationProperty>_<AssociatedEntityKey> for each key. As always, the CAP server has noticed the change. You may have to stop and restart the cds watch command. Revisit the Risks entity http://localhost:4004/service/risk/Risks in your browser, you now see the data exposed: And that's it: You\u2019ve now got a full blown OData service, which complies to the OData standard and supports the respective queries without having to code anything but the data model and exposing the service itself. The service is completely exposed without any authentication or authorization check. You extend the service later with such checks. The result of these steps can be found in the create-service branch of the tutorial.","title":"Add Files to the Project"},{"location":"CF_Logon/","text":"If you don't know whether you\u2019re logged on to Cloud Foundry or if you're wondering to which Cloud Foundry org and space are you logged on, you can always use cf target in a terminal to find out. If you aren't logged on already, go to your SAP BTP Cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Select your Global Account and then the Subaccount to which you want to deploy your service and application. On the subaccount page, gather all the data to log in to Cloud Foundry (CF): the API Endpoint the Org Name the Space Name For your convenience, these are the API Endpoints for the different landscapes: Trial https://api.cf.eu10.hana.ondemand.com AWS Live EU 10 https://api.cf.eu10.hana.ondemand.com Open up a terminal. Set the Cloud Foundry API endpoint: cf api <API Endpoint of your landscape> Log in to your Cloud Foundry account, using your SAP BTP credentials: cf login","title":"CF Logon"},{"location":"FE/","text":"Create an SAP Fiori Elements-Based Application Prerequisites Get Started Create a CAP-Based Service The results of the previous module Create a CAP-Based Service can be found in the create-service branch of the tutorial. Additional Documentation Developing Apps with SAP Fiori Elements SAP Fiori Elements Community In this section, you create an SAP Fiori Elements (FE) app on top of your previously created CAP service. An FE app is an application that leverages UI5, UI5 controls, and UI5 model view controller (MVC) concepts. In a plain UI5 or a freestyle UI5 app, all the views and controllers are part of your project. In contrast, in an FE app most of the code is outside of the project, managed centrally by the FE team. The code inside your project only references these central components. They take care of creating the UI according to the latest SAP Fiori design guidelines and cover all the controller logic for you out of the box. The UI can be influenced by OData annotations. They determine, for example, which properties of an OData service make up the columns of a table that displays the content of the service. Generate the UI with an SAP Fiori Elements Template In VS Code, invoke the Command Palette ( View \u2192 Command Palette or Cmd + Shift + P for macOS / Ctrl + Shift + P for Windows) and choose Open Template Wizard . Choose SAP Fiori application . Choose Start . Choose application type SAP Fiori elements and floorplan List Report Object Page . Choose Next . In the next dialog, choose Use a Local CAP Project and point to the folder of your current cpapp project. In case you get the error: Node module @sap/cds isn\u2019t found. Please install it and try again. You might get the error Node module @sap/cds is not found. Please install it and try again. after you have chosen your CAP project. This is an issue with the App Generator not finding the corresponding CAP modules, due to different repositories. This should be a temporary issue. For the meantime you can work around it by opening a command line and running the following command: npm i -g @sap/cds-dk --@sap:registry=https://npmjs.org/ See the CAP Troubleshooting guide for more details. Select the RiskService as the OData service and choose Next . Select Risks as the main entity and choose Next . Enter risks as the module name and Risks as the application title. Enter ns as the namespace and Risks as the description for the application. Choose Finish to generate the application. The application is now generated and in a few seconds you can see it in the app folder of your project. It contains a risks and a webapp folder with a Component.js file that is characteristic for an SAPUI5 app. More Details However, the code there's minimal and it basically inherits its logic from the sap/fe/core/AppComponent . The sap/fe/core/AppComponent is the base class for SAP Fiori elements. As previously mentioned, this class is managed centrally by the FE team so you don't need to modify it yourself. Modify the UI with OData Annotations If it's not still running from the previous section, execute cds watch in a VS Code terminal and switch to http://localhost:4004 in your browser. You can now see that the CAP server has discovered an HTML page in your app folder: Choose the link ( /risks/webapp/index.html ) for the HTML page. On the launch page that now comes up, choose the Risks tile. You can now see the application without any data. The table is empty because the application is currently missing UI annotations. You add them in the next step. To add the OData annotations, copy the file risks-service-ui.cds from templates/cap/fiori-elements-app/srv to the srv folder of your app. As in the steps before, the CAP server has noticed the new file and compiled the service again, so now it contains the additional annotations. In the browser, reload the page of the empty FE app. Choose Go . It now shows a work list with some columns and the data from the service. If the work list doesn't show, you might have to clear your cache. You\u2019ve now already finished a full blown service and a UI application on top running locally. Check the Annotation Files Let's have a look at the new risk-service-ui.cds file and the annotations in there. At the beginning we see: using RiskService from './risk-service' ; annotate RiskService . Risks with { title @ title : 'Title' ; prio @ title : 'Priority' ; descr @ title : 'Description' ; miti @ title : 'Mitigation' ; impact @ title : 'Impact' ; } It's referring to the definitions of the earlier cds file that exposes the service and its Risks and Mitigations entities. Then it annotates the Risks entity with a number of texts. These should be in a translatable file normally but for now we keep them here. These texts are used as labels in form fields and column headers by FE. Annotations for value help The following section is needed for the value help of the Mitigation field that is visible when you're editing the object page of the Risks app. annotate RiskService . Mitigations with { ID @ ( UI . Hidden , Common : { Text : description } ); description @ title : 'Description' ; owner @ title : 'Owner' ; timeline @ title : 'Timeline' ; risks @ title : 'Risks' ; } Next up: annotate RiskService . Risks with @ ( UI : { HeaderInfo : { TypeName : 'Risk' , TypeNamePlural : 'Risks' }, SelectionFields : [ prio ], LineItem : [ { Value : title }, { Value : miti_ID }, { Value : prio , Criticality : criticality }, { Value : impact , Criticality : criticality } ], Facets : [ { $Type : 'UI.ReferenceFacet' , Label : 'Main' , Target : '@UI.FieldGroup#Main' } ], FieldGroup # Main : { Data : [ { Value : title }, { Value : miti_ID }, { Value : descr }, { Value : prio , Criticality : criticality }, { Value : impact , Criticality : criticality } ] } }, ) { }; This defines the content of the work list page and the object page that you navigate to when you click on a line in the work list. The SelectionFields section defines which of the properties are exposed as search fields in the header bar above the list. In this case, prio is the only explicit search field. The columns and their order in the work list are derived from the LineItem section. While in most cases the columns are defined by Value: followed by the property name of the entity, in the case of prio and impact there\u2019s also Criticality . For now, you can neglect it but keep it in mind in case you go to the later modules. Next up is the Facets section. In this case, it defines the content of the object page. It contains only a single facet, a ReferenceFacet , of the field group FieldGroup#Main . This field group just shows up as a form. The properties of the Data array within FieldGroup#Main determine the fields in the form: The result of these steps can be found in the fiori-elements-app branch of the tutorial.","title":"Create an SAP Fiori Elements-Based Application"},{"location":"FE/#create-an-sap-fiori-elements-based-application","text":"Prerequisites Get Started Create a CAP-Based Service The results of the previous module Create a CAP-Based Service can be found in the create-service branch of the tutorial. Additional Documentation Developing Apps with SAP Fiori Elements SAP Fiori Elements Community In this section, you create an SAP Fiori Elements (FE) app on top of your previously created CAP service. An FE app is an application that leverages UI5, UI5 controls, and UI5 model view controller (MVC) concepts. In a plain UI5 or a freestyle UI5 app, all the views and controllers are part of your project. In contrast, in an FE app most of the code is outside of the project, managed centrally by the FE team. The code inside your project only references these central components. They take care of creating the UI according to the latest SAP Fiori design guidelines and cover all the controller logic for you out of the box. The UI can be influenced by OData annotations. They determine, for example, which properties of an OData service make up the columns of a table that displays the content of the service.","title":"Create an SAP Fiori Elements-Based Application"},{"location":"FE/#generate-the-ui-with-an-sap-fiori-elements-template","text":"In VS Code, invoke the Command Palette ( View \u2192 Command Palette or Cmd + Shift + P for macOS / Ctrl + Shift + P for Windows) and choose Open Template Wizard . Choose SAP Fiori application . Choose Start . Choose application type SAP Fiori elements and floorplan List Report Object Page . Choose Next . In the next dialog, choose Use a Local CAP Project and point to the folder of your current cpapp project. In case you get the error: Node module @sap/cds isn\u2019t found. Please install it and try again. You might get the error Node module @sap/cds is not found. Please install it and try again. after you have chosen your CAP project. This is an issue with the App Generator not finding the corresponding CAP modules, due to different repositories. This should be a temporary issue. For the meantime you can work around it by opening a command line and running the following command: npm i -g @sap/cds-dk --@sap:registry=https://npmjs.org/ See the CAP Troubleshooting guide for more details. Select the RiskService as the OData service and choose Next . Select Risks as the main entity and choose Next . Enter risks as the module name and Risks as the application title. Enter ns as the namespace and Risks as the description for the application. Choose Finish to generate the application. The application is now generated and in a few seconds you can see it in the app folder of your project. It contains a risks and a webapp folder with a Component.js file that is characteristic for an SAPUI5 app. More Details However, the code there's minimal and it basically inherits its logic from the sap/fe/core/AppComponent . The sap/fe/core/AppComponent is the base class for SAP Fiori elements. As previously mentioned, this class is managed centrally by the FE team so you don't need to modify it yourself.","title":"Generate the UI with an SAP Fiori Elements Template"},{"location":"FE/#modify-the-ui-with-odata-annotations","text":"If it's not still running from the previous section, execute cds watch in a VS Code terminal and switch to http://localhost:4004 in your browser. You can now see that the CAP server has discovered an HTML page in your app folder: Choose the link ( /risks/webapp/index.html ) for the HTML page. On the launch page that now comes up, choose the Risks tile. You can now see the application without any data. The table is empty because the application is currently missing UI annotations. You add them in the next step. To add the OData annotations, copy the file risks-service-ui.cds from templates/cap/fiori-elements-app/srv to the srv folder of your app. As in the steps before, the CAP server has noticed the new file and compiled the service again, so now it contains the additional annotations. In the browser, reload the page of the empty FE app. Choose Go . It now shows a work list with some columns and the data from the service. If the work list doesn't show, you might have to clear your cache. You\u2019ve now already finished a full blown service and a UI application on top running locally.","title":"Modify the UI with OData Annotations"},{"location":"FE/#check-the-annotation-files","text":"Let's have a look at the new risk-service-ui.cds file and the annotations in there. At the beginning we see: using RiskService from './risk-service' ; annotate RiskService . Risks with { title @ title : 'Title' ; prio @ title : 'Priority' ; descr @ title : 'Description' ; miti @ title : 'Mitigation' ; impact @ title : 'Impact' ; } It's referring to the definitions of the earlier cds file that exposes the service and its Risks and Mitigations entities. Then it annotates the Risks entity with a number of texts. These should be in a translatable file normally but for now we keep them here. These texts are used as labels in form fields and column headers by FE. Annotations for value help The following section is needed for the value help of the Mitigation field that is visible when you're editing the object page of the Risks app. annotate RiskService . Mitigations with { ID @ ( UI . Hidden , Common : { Text : description } ); description @ title : 'Description' ; owner @ title : 'Owner' ; timeline @ title : 'Timeline' ; risks @ title : 'Risks' ; } Next up: annotate RiskService . Risks with @ ( UI : { HeaderInfo : { TypeName : 'Risk' , TypeNamePlural : 'Risks' }, SelectionFields : [ prio ], LineItem : [ { Value : title }, { Value : miti_ID }, { Value : prio , Criticality : criticality }, { Value : impact , Criticality : criticality } ], Facets : [ { $Type : 'UI.ReferenceFacet' , Label : 'Main' , Target : '@UI.FieldGroup#Main' } ], FieldGroup # Main : { Data : [ { Value : title }, { Value : miti_ID }, { Value : descr }, { Value : prio , Criticality : criticality }, { Value : impact , Criticality : criticality } ] } }, ) { }; This defines the content of the work list page and the object page that you navigate to when you click on a line in the work list. The SelectionFields section defines which of the properties are exposed as search fields in the header bar above the list. In this case, prio is the only explicit search field. The columns and their order in the work list are derived from the LineItem section. While in most cases the columns are defined by Value: followed by the property name of the entity, in the case of prio and impact there\u2019s also Criticality . For now, you can neglect it but keep it in mind in case you go to the later modules. Next up is the Facets section. In this case, it defines the content of the object page. It contains only a single facet, a ReferenceFacet , of the field group FieldGroup#Main . This field group just shows up as a form. The properties of the Data array within FieldGroup#Main determine the fields in the form: The result of these steps can be found in the fiori-elements-app branch of the tutorial.","title":"Check the Annotation Files"},{"location":"Freestyle_UI5/","text":"Create a Freestyle UI5 Application Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application The results of the previous module Add Business Logic to Your Application can be found here . Additional Documentation Blog Post: SAP Fiori Tools: SAPUI5 Freestyle App In this section, you create a Freestyle UI5 app on top of your CAP service. SAP Fiori Elements Application vs. Freestyle UI5 Application What is the difference to an SAP Fiori elements (FE) based application that you have already built in the Create an SAP Fiori Elements-Based Application section? As mentioned, both the freestyle app and the FE app are based on SAPUI5. An FE app can be thought of like a giant player built with SAPUI5 where most of the code resides outside your own development project in central components. Much of its logic comes out of the box and is controlled by metadata from your OData service. A freestyle UI5 application, on the other hand, lives mainly in your own project - all the views and controllers are in it. It still comes with all the features of SAPUI5 (super rich SAP Fiori compliant set of UI controls , data binding , model view controller , and so on), but if you want to, for example, program a screen where a user can edit data, you\u2019ve got to program it yourself. In FE, this functionality is available out of the box. With the greater amount of work for standard use cases, however, also comes a greater freedom. In a freestyle app, you can do what you need to do using SAPUI5 or even using third party / open-source components. While there are also options in FE to adjust your application outside of the possibilities given you via metadata (annotations) using the so-called \"Flexible Programming Model\", in a freestyle UI5 app, the sky is the limit with respect to freedom and optimization. Fortunately, you have also got a choice of several templates that get your application kick started for freestyle UI5. They copy the initial code into your project and any change necessary for the app can be done manually by you in the code. Creating the Application In the next steps, you build an application using the mitigations part of our CAP-based service. Make sure that you\u2019ve installed the SAPUI5 templates as described in section Installation . Open a terminal in VS Code via Terminal \u2192 New Terminal . Navigate to your project folder. Navigate to the app folder: cd app Create a new mitigations folder for the new app: mkdir mitigations Navigate to the mitigations folder: cd mitigations Create a freestyle UI5 application: yo @sapui5/sapui5-templates A creation wizard starts. Follow the creation wizard and use the following values: - \"Provide the module name\" mitigations - \"Provide the module namespace\" ns - \"Select a template\" SAP Fiori Worklist Application OData V4 - \"Title\" Mitigations - \"Description\" Mitigations - \"Choose if your app should run in SAP Fiori Launchpad or standalone\" Standalone App ( optimized for individual deployment ) - \"Select batch mode corresponding to selected OData Service\" Auto : Requests are grouped in one batch request - \"Service Base URI\" http : //localhost:4004/service/risk - \"Datasource URL\" / service / risk - \"Object Collection\" Mitigations - \"Object Collection ID\" ID - \"Object Title\" ID - \"Object Numeric Attribute\" : < leave empty > - \"Object Unit of Measure\" : < leave empty > Open the newly created file manifest.json in your cpapp/app/mitigations/webapp folder. Add a / to the beginning of the value of the uri parameter: { ... \"sap.app\" : { ... \"dataSources\" : { \"mainService\" : { \"uri\" : \"/service/risk/\" , \"type\" : \"OData\" , \"settings\" : { \"odataVersion\" : \"4.0\" , \"localUri\" : \"localService/metadata.xml\" } } } }, Summary What happened here? (You can skip this and carry on with Starting the Application if you aren't keen to know.) First, you created a new application from the work list template with a detail page based on a V4 OData service (the CAP service is V4). The result is a similar application layout like the one you have already chosen in the Create an SAP Fiori Elements-Based Application section. There are other templates available (a Worklist Application and a Master Detail one, both for V2 services). You chose to be able to run this app standalone, so without necessarily having to have an SAP Fiori launchpad to host it. On a technical level, you chose to send all the OData requests from the app using batches. A batch is a kind of a wrapper for requests. You can wrap multiple requests into one with a batch. Even when there\u2019s only one request, a batch is better for security reasons, as not all the data of the request is exposed in the URL. So, in essence, for performance and security reasons, it's always a good idea to choose batch. Then there\u2019s the section about the service base URI and the data source URL. It prepares your project for the optional use of more SAPUI5 Tooling for development. It ensures that the requests for the OData service from the application (all for our risk service, so starting with /risk ) are mapped to the backend service, which is our CAP service, running under http://localhost:4004/service/risk . Why is a mapping needed? You might ask yourself why you have got to specify this here, when in the Create an SAP Fiori Elements-Based Application section you didn't. The answer is that the SAP Fiori Elements case was streamlined to a CAP service already (you even told the app generator to get the service from a CAP project). Freestyle SAPUI5 templates don\u2019t have the special treatment of CAP yet and instead make no assumption where the OData service comes from, it could be a remote one based on another framework. To make the connection, the above mapping is needed. SAPUI5 has a so-called middleware that proxies to the remote service. You can see this by opening the ui5.yaml file under cpapp/app/mitigations : ... server : customMiddleware : - name : ui5-middleware-simpleproxy mountPath : /risk afterMiddleware : compression configuration : baseUri : http://localhost:4004/service/risk The change in the manifest.yaml is to make sure that the data requests are used with an absolute URL at /risk . The original entry for the URI was risk . This would have triggered SAPUI5 to issue any data request relative to the path of the application itself, but we want the requests to be absolute to risk. Starting the Application Make sure cds watch is still running in the project root folder: cds watch Open the URL http://localhost:4004/ . You now see two new HTML pages. Choose the /mitigations/webapp/index.html entry. As a result, you can see a list but you can only see the IDs of the mitigations both in the list view and on the detail page. This is because the freestyle template only got the information from you that the Object Collection ID is the ID property of the mitigations service. You now need to add additional SAPUI5 controls that are bound to additional properties of the mitigations service. Open the view of the work list cpapp/app/mitigations/webapp/view/Worklist.view.xml and add the following code, removing the ID column and instead adding Description , Owner and Timeline columns: <columns> <Column id= \"DescriptionColumn\" > <Text text= \"Description\" id= \"DescriptionColumnTitle\" /> </Column> <Column id= \"OwnerColumn\" > <Text text= \"Owner\" id= \"OwnerColumnTitle\" /> </Column> <Column id= \"TimelineColumn\" > <Text text= \"Timeline\" id= \"TimelineColumnTitle\" /> </Column> </columns> <items> <ColumnListItem type= \"Navigation\" press= \".onPress\" > <cells> <ObjectIdentifier text= \"{description}\" /> <Text text= \"{owner}\" /> <Text text= \"{timeline}\" /> </cells> </ColumnListItem> </items> Open the view of the object cpapp/app/mitigations/webapp/view/Object.view.xml and also replace ID and add Description , Owner , and Timeline using SAPUI5 controls like ObjectStatus (you can copy the whole code and replace the existing code in the file): <mvc:View controllerName= \"ns.mitigations.controller.Object\" xmlns= \"sap.m\" xmlns:l= \"sap.ui.layout\" xmlns:mvc= \"sap.ui.core.mvc\" xmlns:semantic= \"sap.f.semantic\" > <semantic:SemanticPage id= \"page\" headerPinnable= \"false\" toggleHeaderOnTitleClick= \"false\" busy= \"{objectView>/busy}\" busyIndicatorDelay= \"{objectView>/delay}\" > <semantic:titleHeading> <Title text= \"{description}\" /> </semantic:titleHeading> <semantic:headerContent> <ObjectNumber /> </semantic:headerContent> <semantic:sendEmailAction> <semantic:SendEmailAction id= \"shareEmail\" press= \".onShareEmailPress\" /> </semantic:sendEmailAction> <semantic:content> <l:VerticalLayout> <ObjectStatus title= \"Description\" text= \"{description}\" /> <ObjectStatus title= \"Owner\" text= \"{owner}\" /> <ObjectStatus title= \"Timeline\" text= \"{timeline}\" /> </l:VerticalLayout> </semantic:content> </semantic:SemanticPage> </mvc:View> Refresh the mitigations application in your browser. You can now see the new content in the work list ... ... as well as in the detail object page. (Optional) SAPUI5 Serve While cds watch comes in handy for serving even the SAPUI5 based apps directly in your CAP projects, there\u2019s also an additional alternative, again from the SAPUI5 tools. They also provide a development server that can be used in any pure SAPUI5 project. So, you can use the SAPUI5 development server when there\u2019s no CAP service around and/or the service is provided by a different technology. Here are some advantages of the SAPUI5 development server compared to cds watch , depending on how deep you want to be involved in SAPUI5 freestyle programming. You can run multiple servers at a time ( cds watch can only run once). A live reload (that is, automatic browser refresh on saving) of all the UI changes. Loading local SAPUI5 resources from dependencies. Serve middleware. Proxy for backend service Cache behavior for SAPUI5 resources Theme Build on-the-fly for library development Transpiling middleware If these are of interest to you, you can go on using cds watch and skip the rest of the section. You now add the capability of live reloading to the configuration of the SAPUI5 tools. After enabling it, every time you save a file in your mitigations app, the browser window will automatically reload the new sources and show them. Open the package.json file in your cpapp/app/mitigations folder. Add the following lines to add the live reload module: { ... \"devDependencies\" : { \"@ui5/cli\" : \"^1.14.0\" , \"ui5-middleware-simpleproxy\" : \"^0.2.1\" , \"ui5-middleware-livereload\" : \"^0.1.10\" }, \"ui5\" : { \"dependencies\" : [ \"ui5-middleware-simpleproxy\" , \"ui5-middleware-livereload\" ] } } Open the ui5.yaml file in your cpapp/app/mitigations folder. Add the following lines to configure SAPUI5 tools to use the live reload module: ... server : customMiddleware : - name : ui5-middleware-simpleproxy mountPath : /service/risk afterMiddleware : compression configuration : baseUri : http://localhost:4004/service/risk - name : ui5-middleware-livereload afterMiddleware : compression configuration : debug : true ext : \"xml,json,properties\" port : 35729 path : \"webapp\" Additional documentation In a projects ui5.yaml file, you can define additional server middleware modules that will be executed when the request is received by the server. This configuration exclusively affects the server started in this project. See UI5 Tooling documentation for more details. From your cpapp folder, navigate to your mitigations folder: cd app/mitigations/ Check if a (hidden) file called .npmrc exists: macOS/Linux ls -a Windows Get-ChildItem -Hidden dir Delete the file .npmrc if it exists: macOS/Linux rm .npmrc Windows del .npmrc Install the npm packages: npm install Start the application. Make sure that cds watch is running in another terminal: ui5 serve Open the new URL http://localhost:8080/index.html . You now see the mitigations. The result of these steps can be found in the freestyle-ui5-app branch of the tutorial.","title":"Create a Freestyle UI5 Application"},{"location":"Freestyle_UI5/#create-a-freestyle-ui5-application","text":"Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application The results of the previous module Add Business Logic to Your Application can be found here . Additional Documentation Blog Post: SAP Fiori Tools: SAPUI5 Freestyle App In this section, you create a Freestyle UI5 app on top of your CAP service.","title":"Create a Freestyle UI5 Application"},{"location":"Freestyle_UI5/#sap-fiori-elements-application-vs-freestyle-ui5-application","text":"What is the difference to an SAP Fiori elements (FE) based application that you have already built in the Create an SAP Fiori Elements-Based Application section? As mentioned, both the freestyle app and the FE app are based on SAPUI5. An FE app can be thought of like a giant player built with SAPUI5 where most of the code resides outside your own development project in central components. Much of its logic comes out of the box and is controlled by metadata from your OData service. A freestyle UI5 application, on the other hand, lives mainly in your own project - all the views and controllers are in it. It still comes with all the features of SAPUI5 (super rich SAP Fiori compliant set of UI controls , data binding , model view controller , and so on), but if you want to, for example, program a screen where a user can edit data, you\u2019ve got to program it yourself. In FE, this functionality is available out of the box. With the greater amount of work for standard use cases, however, also comes a greater freedom. In a freestyle app, you can do what you need to do using SAPUI5 or even using third party / open-source components. While there are also options in FE to adjust your application outside of the possibilities given you via metadata (annotations) using the so-called \"Flexible Programming Model\", in a freestyle UI5 app, the sky is the limit with respect to freedom and optimization. Fortunately, you have also got a choice of several templates that get your application kick started for freestyle UI5. They copy the initial code into your project and any change necessary for the app can be done manually by you in the code.","title":"SAP Fiori Elements Application vs. Freestyle UI5 Application"},{"location":"Freestyle_UI5/#creating-the-application","text":"In the next steps, you build an application using the mitigations part of our CAP-based service. Make sure that you\u2019ve installed the SAPUI5 templates as described in section Installation . Open a terminal in VS Code via Terminal \u2192 New Terminal . Navigate to your project folder. Navigate to the app folder: cd app Create a new mitigations folder for the new app: mkdir mitigations Navigate to the mitigations folder: cd mitigations Create a freestyle UI5 application: yo @sapui5/sapui5-templates A creation wizard starts. Follow the creation wizard and use the following values: - \"Provide the module name\" mitigations - \"Provide the module namespace\" ns - \"Select a template\" SAP Fiori Worklist Application OData V4 - \"Title\" Mitigations - \"Description\" Mitigations - \"Choose if your app should run in SAP Fiori Launchpad or standalone\" Standalone App ( optimized for individual deployment ) - \"Select batch mode corresponding to selected OData Service\" Auto : Requests are grouped in one batch request - \"Service Base URI\" http : //localhost:4004/service/risk - \"Datasource URL\" / service / risk - \"Object Collection\" Mitigations - \"Object Collection ID\" ID - \"Object Title\" ID - \"Object Numeric Attribute\" : < leave empty > - \"Object Unit of Measure\" : < leave empty > Open the newly created file manifest.json in your cpapp/app/mitigations/webapp folder. Add a / to the beginning of the value of the uri parameter: { ... \"sap.app\" : { ... \"dataSources\" : { \"mainService\" : { \"uri\" : \"/service/risk/\" , \"type\" : \"OData\" , \"settings\" : { \"odataVersion\" : \"4.0\" , \"localUri\" : \"localService/metadata.xml\" } } } },","title":"Creating the Application"},{"location":"Freestyle_UI5/#summary","text":"What happened here? (You can skip this and carry on with Starting the Application if you aren't keen to know.) First, you created a new application from the work list template with a detail page based on a V4 OData service (the CAP service is V4). The result is a similar application layout like the one you have already chosen in the Create an SAP Fiori Elements-Based Application section. There are other templates available (a Worklist Application and a Master Detail one, both for V2 services). You chose to be able to run this app standalone, so without necessarily having to have an SAP Fiori launchpad to host it. On a technical level, you chose to send all the OData requests from the app using batches. A batch is a kind of a wrapper for requests. You can wrap multiple requests into one with a batch. Even when there\u2019s only one request, a batch is better for security reasons, as not all the data of the request is exposed in the URL. So, in essence, for performance and security reasons, it's always a good idea to choose batch. Then there\u2019s the section about the service base URI and the data source URL. It prepares your project for the optional use of more SAPUI5 Tooling for development. It ensures that the requests for the OData service from the application (all for our risk service, so starting with /risk ) are mapped to the backend service, which is our CAP service, running under http://localhost:4004/service/risk . Why is a mapping needed? You might ask yourself why you have got to specify this here, when in the Create an SAP Fiori Elements-Based Application section you didn't. The answer is that the SAP Fiori Elements case was streamlined to a CAP service already (you even told the app generator to get the service from a CAP project). Freestyle SAPUI5 templates don\u2019t have the special treatment of CAP yet and instead make no assumption where the OData service comes from, it could be a remote one based on another framework. To make the connection, the above mapping is needed. SAPUI5 has a so-called middleware that proxies to the remote service. You can see this by opening the ui5.yaml file under cpapp/app/mitigations : ... server : customMiddleware : - name : ui5-middleware-simpleproxy mountPath : /risk afterMiddleware : compression configuration : baseUri : http://localhost:4004/service/risk The change in the manifest.yaml is to make sure that the data requests are used with an absolute URL at /risk . The original entry for the URI was risk . This would have triggered SAPUI5 to issue any data request relative to the path of the application itself, but we want the requests to be absolute to risk.","title":"Summary"},{"location":"Freestyle_UI5/#starting-the-application","text":"Make sure cds watch is still running in the project root folder: cds watch Open the URL http://localhost:4004/ . You now see two new HTML pages. Choose the /mitigations/webapp/index.html entry. As a result, you can see a list but you can only see the IDs of the mitigations both in the list view and on the detail page. This is because the freestyle template only got the information from you that the Object Collection ID is the ID property of the mitigations service. You now need to add additional SAPUI5 controls that are bound to additional properties of the mitigations service. Open the view of the work list cpapp/app/mitigations/webapp/view/Worklist.view.xml and add the following code, removing the ID column and instead adding Description , Owner and Timeline columns: <columns> <Column id= \"DescriptionColumn\" > <Text text= \"Description\" id= \"DescriptionColumnTitle\" /> </Column> <Column id= \"OwnerColumn\" > <Text text= \"Owner\" id= \"OwnerColumnTitle\" /> </Column> <Column id= \"TimelineColumn\" > <Text text= \"Timeline\" id= \"TimelineColumnTitle\" /> </Column> </columns> <items> <ColumnListItem type= \"Navigation\" press= \".onPress\" > <cells> <ObjectIdentifier text= \"{description}\" /> <Text text= \"{owner}\" /> <Text text= \"{timeline}\" /> </cells> </ColumnListItem> </items> Open the view of the object cpapp/app/mitigations/webapp/view/Object.view.xml and also replace ID and add Description , Owner , and Timeline using SAPUI5 controls like ObjectStatus (you can copy the whole code and replace the existing code in the file): <mvc:View controllerName= \"ns.mitigations.controller.Object\" xmlns= \"sap.m\" xmlns:l= \"sap.ui.layout\" xmlns:mvc= \"sap.ui.core.mvc\" xmlns:semantic= \"sap.f.semantic\" > <semantic:SemanticPage id= \"page\" headerPinnable= \"false\" toggleHeaderOnTitleClick= \"false\" busy= \"{objectView>/busy}\" busyIndicatorDelay= \"{objectView>/delay}\" > <semantic:titleHeading> <Title text= \"{description}\" /> </semantic:titleHeading> <semantic:headerContent> <ObjectNumber /> </semantic:headerContent> <semantic:sendEmailAction> <semantic:SendEmailAction id= \"shareEmail\" press= \".onShareEmailPress\" /> </semantic:sendEmailAction> <semantic:content> <l:VerticalLayout> <ObjectStatus title= \"Description\" text= \"{description}\" /> <ObjectStatus title= \"Owner\" text= \"{owner}\" /> <ObjectStatus title= \"Timeline\" text= \"{timeline}\" /> </l:VerticalLayout> </semantic:content> </semantic:SemanticPage> </mvc:View> Refresh the mitigations application in your browser. You can now see the new content in the work list ... ... as well as in the detail object page.","title":"Starting the Application"},{"location":"Freestyle_UI5/#optional-sapui5-serve","text":"While cds watch comes in handy for serving even the SAPUI5 based apps directly in your CAP projects, there\u2019s also an additional alternative, again from the SAPUI5 tools. They also provide a development server that can be used in any pure SAPUI5 project. So, you can use the SAPUI5 development server when there\u2019s no CAP service around and/or the service is provided by a different technology. Here are some advantages of the SAPUI5 development server compared to cds watch , depending on how deep you want to be involved in SAPUI5 freestyle programming. You can run multiple servers at a time ( cds watch can only run once). A live reload (that is, automatic browser refresh on saving) of all the UI changes. Loading local SAPUI5 resources from dependencies. Serve middleware. Proxy for backend service Cache behavior for SAPUI5 resources Theme Build on-the-fly for library development Transpiling middleware If these are of interest to you, you can go on using cds watch and skip the rest of the section. You now add the capability of live reloading to the configuration of the SAPUI5 tools. After enabling it, every time you save a file in your mitigations app, the browser window will automatically reload the new sources and show them. Open the package.json file in your cpapp/app/mitigations folder. Add the following lines to add the live reload module: { ... \"devDependencies\" : { \"@ui5/cli\" : \"^1.14.0\" , \"ui5-middleware-simpleproxy\" : \"^0.2.1\" , \"ui5-middleware-livereload\" : \"^0.1.10\" }, \"ui5\" : { \"dependencies\" : [ \"ui5-middleware-simpleproxy\" , \"ui5-middleware-livereload\" ] } } Open the ui5.yaml file in your cpapp/app/mitigations folder. Add the following lines to configure SAPUI5 tools to use the live reload module: ... server : customMiddleware : - name : ui5-middleware-simpleproxy mountPath : /service/risk afterMiddleware : compression configuration : baseUri : http://localhost:4004/service/risk - name : ui5-middleware-livereload afterMiddleware : compression configuration : debug : true ext : \"xml,json,properties\" port : 35729 path : \"webapp\" Additional documentation In a projects ui5.yaml file, you can define additional server middleware modules that will be executed when the request is received by the server. This configuration exclusively affects the server started in this project. See UI5 Tooling documentation for more details. From your cpapp folder, navigate to your mitigations folder: cd app/mitigations/ Check if a (hidden) file called .npmrc exists: macOS/Linux ls -a Windows Get-ChildItem -Hidden dir Delete the file .npmrc if it exists: macOS/Linux rm .npmrc Windows del .npmrc Install the npm packages: npm install Start the application. Make sure that cds watch is running in another terminal: ui5 serve Open the new URL http://localhost:8080/index.html . You now see the mitigations. The result of these steps can be found in the freestyle-ui5-app branch of the tutorial.","title":"(Optional) SAPUI5 Serve"},{"location":"HANA_Setup/","text":"Set Up the SAP HANA Cloud Service Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application Implement Roles and Authorization Checks in CAP Prepare SAP BTP and Cloud Foundry Add SAP HANA Client to Project The SAP HANA hdb npm module needs to be added to our package in order to support SAP HANA. npm install hdb --save The CAP application will still use SQLite in-memory database for local testing, while the SAP HANA database should be used \"productively\" in the cloud. Switch to hdbtable Deployment By default, the deployment uses the hdbcds as deployment format. However, this isn\u2019t supported for SAP HANA Cloud and the configuration needs to be changed to use the hdbtable and hdbview format. Add the following snippet at the end of your package.json : { \"name\" : \"cpapp\" , ... \"cds\" : { \"requires\" : { \"db\" : { \"kind\" : \"sql\" } }, \"hana\" : { \"deploy-format\" : \"hdbtable\" } } } See also: Using Databases (CAP) CAP Configuration (CAP) Run cds watch and check that your app still works locally as it used to work before at http://localhost:4004/ . There are three options to continue: Option 1: You already have an SAP HANA Cloud service instance in your Cloud Foundry space \u2192 You're set. Nothing to do. Option 2: You want to use an SAP HANA Cloud service instance from a different Cloud Foundry org or space, but in the same landscape \u2192 continue with Option 2: Use an existing SAP HANA Cloud Service Instance . Option 3: You want to create a new SAP HANA Cloud service instance \u2192 continue with Option 3: Create an SAP HANA Cloud Service Instance . SAP HANA Cloud Documentation Please read the documentation for further information: SAP HANA Cloud Getting Started Guide (SAP Help) SAP HANA Cloud Administrator DBADMIN (SAP Help) Option 2: Use an Existing SAP HANA Cloud Service Instance Go to your SAP BTP cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Choose the Global Account . Navigate to the Subaccount . Choose Cloud Foundry \u2192 Spaces in the left-hand pane. Choose the space where you already have the SAP HANA Cloud service instance. Choose SAP HANA Cloud in the left-hand pane. Choose Manage SAP HANA Cloud in the upper right corner. Sign in with your SAP BTP Cockpit username/email. The SAP HANA Cloud Central cockpit opens. Choose an organization and again choose the space where you have the SAP HANA Cloud service instance. Choose your service instance. Choose Create Mapping . Choose the Org ID and Space ID where you want to deploy the application. Choose Add . Option 3: Create an SAP HANA Cloud Service Instance Additional Documentation How to create your trial SAP HANA Cloud instance Go to your SAP BTP cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Choose your Global Account . Navigate to your Subaccount . Choose Cloud Foundry \u2192 Spaces in the left-hand pane. Choose the Space that you want to deploy to. Choose SAP HANA Cloud in the left-hand pane. Choose Create \u2192 SAP HANA Cloud . Sign in with your SAP BTP Cockpit username/email. The Organization and Space will be selected. Enter the Instance Name : cpapp . Enter a password for DBADMIN in Administrator Password and Confirm Administrator Password . Choose Step 2 . The default settings should be sufficient for the tutorial application. Choose Step 3 . Choose Deny all IP addresses (except Business Technology Platform) . SAP While Deny all IP addresses (except Business Technology Platform) should be chosen for productive use, local access can be helpful for development scenarios. Therefore, you can add the CIDR codes for your SAP offices. See section Public Office Network IP Addresses for more details. Choose Step 4 . Don't create a data lake. It's really useful for storing and analyzing high volumes of infrequently updated data, but we don't need it for this tutorial. Choose Step 5 This step includes advanced data lake settings that are only relevant if you have created a data lake at step 4. You can skip this if you haven't created a data lake. Choose Create Instance . The creation of the database instance can take some minutes to complete. The final result looks like this in SAP BTP cockpit: SAP HANA Cloud instances are automatically stopped overnight for SAP BTP trial. Your SAP HANA Cloud instance will be automatically stopped overnight, according to the server region time zone. That means you need to restart your instance every day, before you start working with your trial.","title":"Set Up the SAP HANA Cloud Service"},{"location":"HANA_Setup/#set-up-the-sap-hana-cloud-service","text":"Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application Implement Roles and Authorization Checks in CAP Prepare SAP BTP and Cloud Foundry","title":"Set Up the SAP HANA Cloud Service"},{"location":"HANA_Setup/#add-sap-hana-client-to-project","text":"The SAP HANA hdb npm module needs to be added to our package in order to support SAP HANA. npm install hdb --save The CAP application will still use SQLite in-memory database for local testing, while the SAP HANA database should be used \"productively\" in the cloud.","title":"Add SAP HANA Client to Project"},{"location":"HANA_Setup/#switch-to-hdbtable-deployment","text":"By default, the deployment uses the hdbcds as deployment format. However, this isn\u2019t supported for SAP HANA Cloud and the configuration needs to be changed to use the hdbtable and hdbview format. Add the following snippet at the end of your package.json : { \"name\" : \"cpapp\" , ... \"cds\" : { \"requires\" : { \"db\" : { \"kind\" : \"sql\" } }, \"hana\" : { \"deploy-format\" : \"hdbtable\" } } } See also: Using Databases (CAP) CAP Configuration (CAP) Run cds watch and check that your app still works locally as it used to work before at http://localhost:4004/ . There are three options to continue: Option 1: You already have an SAP HANA Cloud service instance in your Cloud Foundry space \u2192 You're set. Nothing to do. Option 2: You want to use an SAP HANA Cloud service instance from a different Cloud Foundry org or space, but in the same landscape \u2192 continue with Option 2: Use an existing SAP HANA Cloud Service Instance . Option 3: You want to create a new SAP HANA Cloud service instance \u2192 continue with Option 3: Create an SAP HANA Cloud Service Instance . SAP HANA Cloud Documentation Please read the documentation for further information: SAP HANA Cloud Getting Started Guide (SAP Help) SAP HANA Cloud Administrator DBADMIN (SAP Help)","title":"Switch to hdbtable Deployment"},{"location":"HANA_Setup/#option-2-use-an-existing-sap-hana-cloud-service-instance","text":"Go to your SAP BTP cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Choose the Global Account . Navigate to the Subaccount . Choose Cloud Foundry \u2192 Spaces in the left-hand pane. Choose the space where you already have the SAP HANA Cloud service instance. Choose SAP HANA Cloud in the left-hand pane. Choose Manage SAP HANA Cloud in the upper right corner. Sign in with your SAP BTP Cockpit username/email. The SAP HANA Cloud Central cockpit opens. Choose an organization and again choose the space where you have the SAP HANA Cloud service instance. Choose your service instance. Choose Create Mapping . Choose the Org ID and Space ID where you want to deploy the application. Choose Add .","title":"Option 2: Use an Existing SAP HANA Cloud Service Instance"},{"location":"HANA_Setup/#option-3-create-an-sap-hana-cloud-service-instance","text":"Additional Documentation How to create your trial SAP HANA Cloud instance Go to your SAP BTP cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Choose your Global Account . Navigate to your Subaccount . Choose Cloud Foundry \u2192 Spaces in the left-hand pane. Choose the Space that you want to deploy to. Choose SAP HANA Cloud in the left-hand pane. Choose Create \u2192 SAP HANA Cloud . Sign in with your SAP BTP Cockpit username/email. The Organization and Space will be selected. Enter the Instance Name : cpapp . Enter a password for DBADMIN in Administrator Password and Confirm Administrator Password . Choose Step 2 . The default settings should be sufficient for the tutorial application. Choose Step 3 . Choose Deny all IP addresses (except Business Technology Platform) . SAP While Deny all IP addresses (except Business Technology Platform) should be chosen for productive use, local access can be helpful for development scenarios. Therefore, you can add the CIDR codes for your SAP offices. See section Public Office Network IP Addresses for more details. Choose Step 4 . Don't create a data lake. It's really useful for storing and analyzing high volumes of infrequently updated data, but we don't need it for this tutorial. Choose Step 5 This step includes advanced data lake settings that are only relevant if you have created a data lake at step 4. You can skip this if you haven't created a data lake. Choose Create Instance . The creation of the database instance can take some minutes to complete. The final result looks like this in SAP BTP cockpit: SAP HANA Cloud instances are automatically stopped overnight for SAP BTP trial. Your SAP HANA Cloud instance will be automatically stopped overnight, according to the server region time zone. That means you need to restart your instance every day, before you start working with your trial.","title":"Option 3: Create an SAP HANA Cloud Service Instance"},{"location":"Kyma/","text":"Run a CAP Application on Kyma Additional Documentation Administration and Operations in the Kyma Environment Preface SAP recently released the SAP Business Technology Platform, Kyma runtime , a managed Kubernetes offering with Kyma. Kyma is much about extending existing applications, but you also get a full-blown Kubernetes cluster including Istio service mesh that you can use to build a standalone cloud application. In this tutorial, you deploy an application built with the SAP Cloud Application Programming Model (CAP) to an SAP Business Technology Platform, Kyma runtime cluster. The CAP application has an OData service, SAP Fiori UI and uses SAP HANA as a database. The SAP BTP Application Development example is used as starting point. The tutorial can be also done with any other Kyma installation, but you need an SAP HANA database and an HDI container and you then need to do the part with SAP HANA credentials differently. The CAP part is probably the smallest in the tutorial: Frankly speaking, just package it into a docker container and run it. But the tutorial also describes how to get a small docker registry running. If you're experienced with Kubernetes, you can skip some sections. Since SAP HANA Cloud isn\u2019t yet available for Kyma, you take it from Cloud Foundry. It's a bit tricky to copy the credentials, but at the end it's just copying and pasting values. Scripts are provided to help you here. So, don't get distracted by this. Disclaimer Note, that this tutorial is intended to give an introduction in the topic and not for deploying productive applications. CAP doesn't officially support Kubernetes and Kyma as a platform right now. Preconditions These are preconditions to do this tutorial: SAP BTP Application Development Example You can find the starting point of this tutorial in the cap/freestyle branch: Go to the directory where you want to create the example. Create a folder for your example: For example: mkdir cap-kyma-app Clone the example GitHub repository and checkout the example branch: git clone https://github.com/SAP-samples/cloud-cap-risk-management cd cloud-cap-risk-management git checkout cap/freestyle-ui5-app Copy all files from the example to your folder, except the .git folder: For example: cp -r .gitignore $( ls -1A | grep -v .git ) ../cap-kyma-app Open a new project in your source editor for the folder cap-kyma-app : For Visual Studio Code: cd ../cap-kyma-app code . Find the final code in the kyma/app branch. Local Software The following local software is required: node ( Node.js version 12.x or 14.x is recommended) docker (for example, Docker Desktop for macOS or Windows) A source code editor ( Visual Studio Code is recommended) bash or zsh shell to run the command snippets on MacOS or Linux, or Git Bash for Windows, MinGW, or Cygwin ) kubectl ( Kubernetes Command Line tool ), see this tutorial how to install it helm ( Helm Chart Command Line , not needed if you use an existing docker registry) cf ( Cloud Foundry Command Line Interface (CLI) ) (For Windows users only): You have installed the SQLite tools for Windows. Find the steps how to install it in the Troubleshooting guide in the CAP documentation. If you have a Mac, many of the commands can be installed using Homebrew ( brew install ... ). For Windows, there's a similar offering called Chocolatey. Refer to the binary installers of the components otherwise. Enable Kyma in SAP BTP Subaccount You need an SAP BTP Subaccount with consumption-based model (that is, Cloud Credits). Kyma is currently supported on Azure landscapes only, as of September 2020. Although Kyma is needed at a later point in the tutorial, it\u2019s recommended to start with this step, because the Kyma provisioning can take some time. For this tutorial you have two options: Option 1: Create Your Own SAP BTP Trial Account Option 2: Use an Existing SAP BTP Subaccount Option 1: Create Your Own SAP BTP Trial Account Go to SAP BTP Cockpit . Choose Enter Your Trial Account . If you don't have a user, you need to register for a free. Wait for the completion of the on-boarding. You should land on the Subaccounts page of your Global Account on trial. Choose trial . Go to Kyma Environment . Choose Enable Kyma . Provide a Cluster Name . Choose Create . This takes a while. You can start the tutorial in the meantime. Option 2: Use Your Existing SAP BTP Subaccount If you already have an older trial account, then you might not see the Enable Kyma button. In that case: Go to Entitlements . Choose Configure Entitlements . Choose Add Service Plans . Search for and select Kyma runtime . Check the trial (Environment) checkbox. Choose Add 1 Service Plan . Choose Enable Kyma . Provide a Cluster Name . Choose Create . This takes a while. You can start the tutorial in the meantime. SAP BTP\u2019s XSUAA is used to access the Kyma runtime. Please follow the steps to assign Roles in the Kyma Environment . In some cases, it will still take 5-10 minutes to get access to Kyma Runtime. Enable Cloud Foundry To use the SAP HANA Cloud service, you can either enable Cloud Foundry for the same subaccount or use a different subaccount, for example, an already existing or trial subaccount. Install the Cloud Foundry CLI Later in this tutorial, you need to log on to Cloud Foundry using the command line. Therefore, it's necessary to install the Cloud Foundry CLI. See the Cloud Foundry documentation for detailed steps on how to do that. Run the CAP Application in a Docker Container Locally In the first part of this tutorial, you prepare your application to be run on Kyma. Build a Docker Container Since all applications in Kubernetes as in Kyma are docker containers, you need to create a docker image for the CAP application. For that, you need to define a file Dockerfile that describes, how to build up the image and what to do when the docker image is run. The file starts with the FROM directive that names the base image that you want to use since you don't want to start from scratch. Here, you use a public image that already contains the NodeJS 12.x installation. Additionally install openssl , which is required by the SAP HANA client and carry out npm install . You then declare that the CAP default port 4004 is exposed to the outside and run the CAP server with npm start . Navigate to the root folder of your app: cd cpapp Create a file named Dockerfile and add the following lines to it: FROM node:12-slim WORKDIR /usr/src/app COPY gen/srv . RUN npm install EXPOSE 4004 USER node CMD [ \"npm\" , \"start\" ] 3. Add sqlite3 as project dependency, so you can try out the scenario without an external database service: npm install --save sqlite3 4. Add the following snippet to the package.json file: { \"name\" : \"cpapp\" , ... \"cds\" : { \"requires\" : { \"db\" : { \"kind\" : \"sql\" } } } } This tells CAP to use SQLite in dev and SAP HANA in productive mode. Before you can build the image, run cds build , because the image takes the build results from the gen/srv folder. You can also do this in the docker build, but that would require additional steps that you skip for now. cds build Build the docker image locally: Make sure that the docker daemon is running (for example, Docker Desktop for MacOS or Windows). docker build -t cpapp . This builds the docker image specified in Dockerfile from the current directory ( . argument). The image is tagged with the name cpapp . Without giving a tag a random tag will be added. You should see an output similar like: ... Removing intermediate container 4f451017d70f ---> 948523646f60 Step 5 /6 : EXPOSE 4004 ---> Running in 1a2b7a0ec606 Removing intermediate container 1a2b7a0ec606 ---> be849ff002e1 Step 6 /6 : CMD [ \"npm\" , \"start\" ] ---> Running in cb0b32163709 Removing intermediate container cb0b32163709 ---> 1e0c26b94ac6 Successfully built 1e0c26b94ac6 Successfully tagged cpapp:latest Docker images consist of several \"filesystem layers\". The base image is a layer and your own docker image is a layer on top. Each layer can add or remove files. This is convenient because it saves storage because your custom images contain only the delta of files added or removed. To be more precise an image consists of multiple layers. The docker build will automatically decide when to create a new layer. You can see the different layers in the docker build output, for example: ---> 365313c4290e Run the Docker Container Check the Content of the Docker Container You can run the docker container and look inside its contents: docker run -i -t cpapp /bin/bash This starts a docker container with your image ( -t cpapp ) and starts the bash shell ( /bin/bash ) that happens to be part of your base image in an interactive ( -i ) mode. Look inside the contents using the ls command: node@a5a0b8115eb5:/usr/src/app# ls manifest.yaml node_modules package-lock.json package.json srv Exit the container using exit (Pro-tip: Ctrl+D :-)). Run Your CAP Service Now, it's time to run your CAP service. So, lets do this. Run the container: docker run -t cpapp Without specifying the command, it runs the default command, that is npm start . You can try to access the service at http://localhost:4004 , but it doesn't work. It shows a similar error message like this: This site can\u2019t be reached localhost refused to connect. Although the docker container exposes port 4004 , the \"host\" of the container, that is your PC or Mac, doesn't make it accessible. You need to declare it in the docker command line. Stop the service with Ctrl+C . Run the container again with the publish parameter: docker run -p 4004 :4004 -t cpapp This tells docker to expose the port 4004 of the docker container to the port 4004 of the host. You could also use a different port of the host, but let's keep it simple. Now, you can access the CAP service at http://localhost:4004 . You can click on the Risks ( http://localhost:4004/service/risk/Risks ) or Mitigations * ( http://localhost:4004/service/risk/Risks ) link that returns an empty OData response. Add SAP Fiori UI There's already an SAP Fiori Elements UI for Risks and a SAPUI5 Freestyle UI for Mitigations in the project. You could think of several ways to deploy it to the cloud. For the sake of simplicity, you can use the CAP service's capability to serve static resources from the app folder. After the cds build , the app folder isn\u2019t part of the service. You can copy it in, but you need to remove the *.cds files because they\u2019re already copied from app to srv and duplicating these files confuses CAP. You can automate this in the docker build by modifying the Dockerfile . Add the highlighted lines to the file Dockerfile : FROM node:12-slim WORKDIR /usr/src/app COPY gen/srv . RUN npm install COPY app app/ RUN find app -name '*.cds' | xargs rm -f EXPOSE 4004 USER node CMD [ \"npm\" , \"start\" ] Rebuild the docker image: cds build docker build -t cpapp . Run it locally: docker run -p 4004 :4004 -t cpapp Try it out by navigating to http://localhost:4004/launchpage.html . Deploy to Kyma In this part of the tutorial, you deploy the dockerized CAP application to Kyma. Log In to Kyma (Kubernetes Cluster) The first step is to log in to Kyma using the Kyma Console and configure the local kubectl command to connect to the Kyma Kubernetes cluster. Go to SAP BTP Cockpit . Choose Enter Your Trial Account . Choose your Global Account . Choose your Subaccount . On the Overview page, under Kyma Environment , choose Link to dashboard . The Kyma console should open. The console is a web-based administrative UI for Kyma. If not, see the troubleshooting information. Troubleshooting: Not enough permissions to launch the kyma console If you can not launch the kyma console, please follow the steps to get permissions: Open your subaccount. Navigate to Security --\u203a Role Collections --\u203a Trust Configuration and assign the role collection Kyma_Roles to your user. Navigate back to the subaccount overview and launch the kyma console. Choose the account icon in the upper right corner. Choose Get Kubeconfig from the dropdown menu. A file download should be triggered. If no download is triggered, see the troubleshooting information. Troubleshooting: If no download is triggered It can happen, that no download is triggered. In this case follow these steps: Open your browser's developer tools (press F12 ). Navigate to the Network tab. Choose the Get Kubeconfig button again. Locate the response of the kubeconfig file. Look at the response. Copy the response, you will need it in the next steps. Navigate to your home folder. The config for the default cluster is stored in .kube/config in your home directory. Navigate to the .kube folder. Create a file named cap-kyma-app-config to avoid overwriting the existing configuration. Copy the content of the downloaded kubeconfig.yml into the file cap-kyma-app-config . Set the new config file for the running shell process: export KUBECONFIG = ~/.kube/cap-kyma-app-config Now, you can access your kubernetes cluster. Check if you can access your kubernetes cluster. kubectl get pods The command should run without an error message, but it doesn't output any pods if you have a newly created cluster. If you want to use kubectl in another shell session, then rerun the export statement. The authentication session will expire after some hours. You then need to download the kubeconfig.yml file again and replace the value of the token parameter in your cap-kyma-app-config file with the one from the newly downloaded kubeconfig.yml file. Prepare the Docker Registry Kubernetes needs a docker registry that can be accessed from the cluster's network. This could be any public or private registry. To keep this tutorial self-contained, you use a slightly different approach, which isn\u2019t recommended for productive use: You deploy your own docker registry to the cluster. If you want to use a different docker registry, then you need to adjust the docker push commands and the URLs for the docker images. In the approach with the cluster's own docker registry, a Helm Chart is used to install it on the cluster. Add the stable Helm Chart repository to the helm CLI: helm repo add stable https://charts.helm.sh/stable Install the Helm Chart for a docker registry: helm install docker-registry stable/docker-registry You need to make the docker registry available on the public internet. The details to this step are explained later. Run the following commands: kubectl apply -f - <<EOF apiVersion: gateway.kyma-project.io/v1alpha1 kind: APIRule metadata: labels: app: docker-registry name: docker-registry spec: service: host: docker-registry name: docker-registry port: 5000 gateway: kyma-gateway.kyma-system.svc.cluster.local rules: - path: /.* methods: [\"GET\", \"HEAD\" ] accessStrategies: - handler: noop mutators: [] EOF To be able to push docker images via HTTP, you need to add it as an \"insecure registry\" (not using secure socket communication) to your Docker config. Open your Docker Desktop. Choose Preferences . Choose Docker Engine . Add the following line: { ... \"insecure-registries\" : [ \"0.0.0.0:5000\" ] } Choose Apply and Restart . Wait for the startup to be completed. Push Docker Image Since the docker registry isn\u2019t exposed to the open internet (and you don't want to), you need to establish a tunnel from your localhost to the registry: kubectl port-forward deployment/docker-registry 5000 :5000 & The & causes the process to run in the background. You need to keep it running until you finished pushing docker images. You may need to start it newly in case the \"docker push\" doesn't work anymore. You should see the following output that tells you that the tunneling is established: Forwarding from 127.0.0.1:5000 -> 5000 Forwarding from [::1]:5000 -> 5000 Your docker image needs an additional tag to declare it part of your forwarded docker registry. Otherwise, you can't push it. docker tag cpapp 0 .0.0.0:5000/cpapp Push it, using the new tag: docker push 0 .0.0.0:5000/cpapp The output mixes the docker push output with the kubectl port-forward output. It should finish with a line like: ``` latest: digest: sha256:4054dd60ee4f9889d58aa97295cb3b1430a5c1549e602b6c619d7c4ed7d04ad0 size: 2412 ``` Deploy the CAP Application Now, you can deploy your CAP service to Kubernetes. You use the Deployment resource of Kubernetes to describe the application. It contains a description of the container and manages its creation and takes care that the instance keeps running. Create a directory to store your deployment YAML files: mkdir deployment Create a file deployment/deployment.yaml with the following contents: apiVersion : apps/v1 kind : Deployment metadata : name : cpapp labels : app : cpapp version : v1 spec : replicas : 1 selector : matchLabels : app : cpapp version : v1 template : metadata : labels : app : cpapp version : v1 spec : containers : - name : cpapp image : docker-registry.{{CLUSTER_DOMAIN}}/cpapp imagePullPolicy : Always ports : - containerPort : 4004 The file contains a placeholder {{CLUSER_DOMAIN}} that you need to replace with your cluster's domain. Either in the file or replacing it when applying the file. You can find your cluster's domain, for example, for the URL of the Kyma Console. If your console URL is for example https://console.c-abcd123.kyma.shoot.live.k8s-hana.ondemand.com/ , the cluster's domain is c-abcd123.kyma.shoot.live.k8s-hana.ondemand.com , just without the leading console. Apply the new configuration: kubectl apply -f deployment/deployment.yaml Or you can take it from the current kubectl configuration and replace it on deployment, like this: sed <deployment/deployment.yaml \"s/{{CLUSTER_DOMAIN}}/ $( kubectl config current-context ) /\" | kubectl apply -f - Check the state of the deployment using: kubectl get deployments Initially, it looks like this: ``` NAME READY UP-TO-DATE AVAILABLE AGE cpapp 0/1 1 0 5s ``` If all goes well, it turns to: ``` NAME READY UP-TO-DATE AVAILABLE AGE cpapp 1/1 1 1 14m ``` Since you have not exposed the app to the public internet, you can only access it with a tunnel. So, lets create another tunnel: kubectl port-forward deployment/cpapp 4004 :4004 Open the CAP service in the browser at http://localhost:4004 . Your service is now running through kubernetes. Press Ctrl+C to stop the tunnel. Expose CAP Application to the Public Internet Create a new file deployment/apirule.yaml with following content: apiVersion : v1 kind : Service metadata : name : cpapp labels : app : cpapp service : cpapp spec : ports : - port : 4004 name : http selector : app : cpapp --- apiVersion : gateway.kyma-project.io/v1alpha1 kind : APIRule metadata : labels : app : cpapp name : cpapp spec : service : host : cpapp name : cpapp port : 4004 gateway : kyma-gateway.kyma-system.svc.cluster.local rules : - path : /.* methods : [ \"GET\" , \"PUT\" , \"POST\" , \"HEAD\" , \"PATCH\" , \"DELETE\" ] accessStrategies : - handler : noop mutators : [] Apply with: kubectl apply -f deployment/apirule.yaml Look up your CAP service URL: echo \"https://cpapp. $( kubectl config current-context ) \" The console outputs your CAP service URL, for example https://cpapp.example.kyma.live.k8s-hana.ondemand.com/ . Check if you can access your service via your URL. You can also add entries to the Risks application. Add SAP HANA Cloud Your application runs on Kyma and is accessible from public internet now. Still, it works like the local development version ( cds watch ) without a real database persistence. In this step, you add support for SAP HANA. As already said, you need to provision it from Cloud Foundry and add the credentials manually. To keep the latency between the CAP service and SAP HANA low, it makes sense to provision the SAP HANA Cloud database on the same SAP BTP region as the Kyma cluster. But to try it out you can also use an SAP HANA Cloud instance from your Trial account. Prepare CAP Application for SAP HANA Cloud The hdb module needs to be added to your package.json to enable CAP to talk to an SAP HANA database. Install the hdb module: npm install --save hdb Open the package.json file. Add the following snippet for SAP HANA: { \"name\" : \"cpapp\" , ... \"cds\" : { \"requires\" : { \"db\" : { \"kind\" : \"sql\" } }, \"hana\" : { \"deploy-format\" : \"hdbtable\" } } ... } With requires.db.kind : sql you tell CAP to use SQLite in development and SAP HANA in productive mode. The setting hana.deploy-format : hdbtable is required for SAP HANA Cloud since it supports only the hdbtable and hdbview files for deployment. You now need to tell the CAP service to run in the productive mode. To do that, edit the Dockerfile and add the highlighted statement: FROM node:12-slim ENV NODE_ENV = production WORKDIR /usr/src/app COPY gen/srv . RUN npm install COPY app app/ RUN find app -name '*.cds' | xargs rm -f EXPOSE 4004 USER node CMD [ \"npm\" , \"start\" ] Rebuild the CAP project and the docker image for production: cds build --production docker build -t 0.0.0.0:5000/cpapp . docker push 0.0.0.0:5000/cpapp The command cds build uses the --production argument to build the SAP HANA artifacts. npm and node uses the environment variable NODE_ENV=production . Without that CAP falls back to \"development mode\" settings and tries to use SQLite. Create and Deploy SAP HANA HDI Container You use the cds deploy command to create an HDI container on Cloud Foundry and deploy the database schema to the container. Make sure that you're logged in to a Cloud Foundry account where an SAP HANA Cloud instance and entitlement for the service plan hana hdi-shared is available or you use an SAP BTP Trial account, run: Set the Cloud Foundry API endpoint: cf api <api-endpoint> You can find the API Endpoint URL in the overview page of your subaccount. Log on to your Cloud Foundry account: cf login Run the following line to create an HDI container: cds deploy --to hana:cpapp-kyma-hdi The suffix :cpapp-kyma-hdi tells cds deploy to create an HDI container with name cpapp-kyma-hdi . It also creates a service key with the name cpapp-kyma-hdi-key that you use to access the database in the next section. Then it deploys the database tables and the test content. It should end with something like: Finalizing... Finalizing... ok (0s 96ms) Make succeeded (0 warnings): 14 files deployed (effective 22), 0 files undeployed (effective 0), 0 dependent files redeployed Making... ok (1s 597ms) Enabling table replication for the container schema \"C5DF44CB9C08482D821F5BC3BE344FCF\"... Enabling table replication for the container schema \"C5DF44CB9C08482D821F5BC3BE344FCF\"... ok (0s 63ms) Starting make in the container \"C5DF44CB9C08482D821F5BC3BE344FCF\" with 14 files to deploy, 0 files to undeploy... ok (1s 756ms) Deploying to the container \"C5DF44CB9C08482D821F5BC3BE344FCF\"... ok (2s 211ms) No default-access-role handling needed; global role \"C5DF44CB9C08482D821F5BC3BE344FCF::access_role\" will not be adapted Unlocking the container \"C5DF44CB9C08482D821F5BC3BE344FCF\"... Unlocking the container \"C5DF44CB9C08482D821F5BC3BE344FCF\"... ok (0s 0ms) Deployment to container C5DF44CB9C08482D821F5BC3BE344FCF done [Deployment ID: none]. (4s 499ms) Application can be stopped. If it's missing, then there's probably a problem with the HDI deployer on your operating system. It can be worked around by putting the HDI deployer in a docker container as describe in the following section. Workaround: Use HDI Deployer in Docker Container Create a file Dockerfile.hdi-deploy with the following content: FROM node:12-slim AS build ENV NODE_ENV = production WORKDIR /usr/src/app RUN apt-get update RUN apt-get install -y openssl python make g++ COPY gen/db/package.json . RUN npm install COPY gen/db . CMD [ \"npm\" , \"start\" , \"--\" , \"--exit\" ] Execute the following commands and check if the output gets right this time: docker build -t cpapp-hdi-deployer -f Dockerfile.hdi-deploy . docker run --env VCAP_SERVICES = '{\"hana\":[{\"credentials\": ' \" $( cf service-key cpapp-kyma-hdi cpapp-kyma-hdi-key | sed 1d ) \" ', \"name\": \"hana\",\"label\":\"hana\",\"plan\":\"hdi-shared\",\"tags\":[\"hana\"]}]}' -t cpapp-hdi-deployer Add SAP HANA HDI Container Credentials You need to somehow inject the SAP HANA credentials into the CAP application. On Cloud Foundry that is done using an environment variable called VCAP_SERVICES that takes the credentials for all bound services. Kubernetes takes a slightly different approach, it uses secrets, that can be injected into applications as environment variables. But as individual environment variables for each value. Luckily, CAP supports both. On Kyma the service credentials for SAP HANA would look like this: driver=com.sap.db.jdbc.Driver hdi_password=dsdssdfdfdsfds... hdi_user=DE44345... host=1d468818-87ad-4f9a-b762-a642b9070869.hana.eu10.hanacloud.ondemand.com password=Vt1jo... port=443 schema=DE6922EF2F3449E984E2E794456B7CBE url=jdbc:sap://1d468818-87ad-4f9a-b762-a642b9070869.hana.eu10.hanacloud.ondemand.com:443?encrypt=true&validateCertificate=true&currentschema=DE6922EF2F3449E984E2E794456B7CBE user=DE6922EF2F3449E984E2E794456B7CBE_0BR49NOHL4VW9DC8NVZFXRN3O_RT Since you need to take the SAP HANA credentials from Cloud Foundry, it\u2019s easier to stick to the VCAP_SERVICES approach for now. So, let's have a look at the credentials that have been created by cds deploy : cf service-key cpapp-kyma-hdi cpapp-kyma-hdi-key The output looks like this: Ge tt i n g key `cpapp - kyma - hdi - key` f or service i nstan ce `cpapp - kyma - hdi` as MySel f ... { \"certificate\" : \"-----BEGIN CERTIFICATE-----\\nMIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh\\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\\nd3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD\\nQTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT\\nMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\\nb20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG\\n9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB\\nCSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97\\nnh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt\\n43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P\\nT19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4\\ngdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO\\nBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR\\nTLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw\\nDQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr\\nhMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg\\n06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF\\nPnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls\\nYSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk\\nCAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=\\n-----END CERTIFICATE-----\" , \"driver\" : \"com.sap.db.jdbc.Driver\" , \"hdi_password\" : \"Ee8lLp3O7aIPv51kOQ38vV6lCx3Tvm6WpGL9i7PRgMZlcuJygN9IPLW0GBVofz7GKsU6m3QNbADJvmRtVEp_ceEAo0iFT8Y6QtZojKOrMONeGTNcelnbUJw.uVb-3c.R\" , \"hdi_user\" : \"C5DF44CB9C08482D821F5BC3BE344FCF_7Y4VQVS7NK0VAVT1O6B01Q5XZ_DT\" , \"host\" : \"1d468818-87ad-4f9a-b762-a642b9070869.hana.eu10.hanacloud.ondemand.com\" , \"password\" : \"Jj4eS040K.2Z.88Y73c7MbANyvSCVhv0C7EYl6a71oW_3BmoRH6SN91_BAw3Y4cDbli.j2ebCnho0jCyYTghPnL9x8y59mb8CTNv0LvY2CvehYiw9ky7zVdRZJcOPY1s\" , \"port\" : \"443\" , \"schema\" : \"C5DF44CB9C08482D821F5BC3BE344FCF\" , \"url\" : \"jdbc:sap://1d468818-87ad-4f9a-b762-a642b9070869.hana.eu10.hanacloud.ondemand.com:443?encrypt=true\\u0026validateCertificate=true\\u0026currentschema=C5DF44CB9C08482D821F5BC3BE344FCF\" , \"user\" : \"C5DF44CB9C08482D821F5BC3BE344FCF_7Y4VQVS7NK0VAVT1O6B01Q5XZ_RT\" } Create a Secret for SAP HANA HDI Container Credentials As a first step, you need to upload the SAP HANA HDI container credentials from the Cloud Foundry service key to a Kubernetes secret. You build the file gen/hdi-secret.yaml with the next steps. Create the file gen/hdi-secret.yaml with the following content: apiVersion : v1 kind : Secret metadata : name : cpapp-kyma-hdi-secret type : opaque stringData : VCAP_SERVICES : > { \"hana\": [ { \"binding_name\": null, \"credentials\": {{CREDENTIALS}}, \"instance_name\": \"hana\", \"label\": \"hana\", \"name\": \"hana\", \"plan\": \"hdi-shared\", \"provider\": null, \"syslog_drain_url\": null, \"tags\": [ \"hana\", \"database\", \"relational\" ], \"volume_mounts\": [] } ] } Replace the {{CREDENTIALS}} variable: Option A: Replace {{CREDENTIALS}} with the JSON output of cf service-key cpapp-kyma-hdi cpapp-kyma-hdi-key (without the initial line). Create the secret on Kubernetes: kubectl apply -f gen/hdi-secret.yaml Option B: node -e 'console.log(process.argv[1].replace(\"{{CREDENTIALS}}\", process.argv[2]))' \" $( cat gen/hdi-secret.yaml ) \" \" $( cf service-key cpapp-kyma-hdi cpapp-kyma-hdi-key | sed 1d | sed 's/^/ /' ) \" | kubectl apply -f - Look at your uploaded secret: kubectl describe secret cpapp-kyma-hdi-secret It should be similar to the following output: NAME TYPE DATA AGE Name: cpapp-kyma-hdi-secret Namespace: docker-registry Labels: <none> Annotations: Type: opaque Data ==== VCAP_SERVICES: 2602 bytes Connect the CAP Application to the SAP HANA HDI Container Now, you need to inject the secret's value as environment variables into your CAP application. Add the highlighted lines to your deployment/deployment.yaml file: ... spec : containers : - name : cpapp image : docker-registry.{{CLUSTER_DOMAIN}}/cpapp imagePullPolicy : Always ports : - containerPort : 4004 envFrom : - secretRef : name : cpapp-kyma-hdi-secret This adds all name value pairs in the secret, currently only VCAP_SERVICES , as environment variables to the container of the deployment. Update the Kubernetes cluster with the deployment file: Option A (if you replaced {{CLUSTER_DOMAIN}} in the deployment/deployment.yaml file): kubectl apply -f deployment/deployment.yaml Option B: sed <deployment/deployment.yaml \"s/{{CLUSTER_DOMAIN}}/ $( kubectl config current-context ) /\" | kubectl apply -f - Through the deployment, you see temporarily two pods. The old pod will be deleted after the new was launched. Check the pods: kubectl get pods Output: NAME READY STATUS RESTARTS AGE cpapp-566fcb5f9b-8dfjb 2/2 Running 0 26m cpapp-66b5cb4876-hx5l6 0/2 Init:0/1 0 2s Rerun the command kubectl get pods until there\u2019s only one Running pod for the application. Get the URL of your application: echo \"https://cpapp. $( kubectl config current-context ) \" Open the URL to your application. Now, you can create some entries in the Risks application, which are stored in the SAP HANA database. Summary In the tutorial, you\u2019ve learned how to deploy a CAP application on Kyma. When the SAP HANA Cloud service is available for Kyma (Disclaimer: This isn\u2019t an SAP product commitment), it will be much easier. You can find the final code in the kyma/app branch. Troubleshooting Viewing the Application's Log You can use the following command to view the latest logs of your app: kubectl logs $(kubectl get pods -l app=cpapp -o jsonpath='{.items[0].metadata.name}') cpapp The log-level of the CAP application can be increased, by adding the environment variable DEBUG to the deployment/deployment.yaml file and apply the file again with kubectl : env: - name: DEBUG value: \"y\" Make sure that env has the same indent as envFrom . Execute Commands in the Application's Container With the following command, you can \"ssh\" to your container and start a bash shell: kubectl exec $(kubectl get pods -l app=cpapp -o jsonpath='{.items[0].metadata.name}') -t -i /bin/bash Teardown If want to quickly delete all artifacts created in this tutorial, execute the following commands: cf delete-service-key cpapp-kyma-hdi cpapp-kyma-hdi-key -f cf delete-service cpapp-kyma-hdi -f for i in deployment/*.yaml ; do kubectl delete -f $i done kubectl delete secret cpapp-kyma-hdi-secret helm uninstall docker-registry","title":"Run a CAP Application on Kyma"},{"location":"Kyma/#run-a-cap-application-on-kyma","text":"Additional Documentation Administration and Operations in the Kyma Environment","title":"Run a CAP Application on Kyma"},{"location":"Kyma/#preface","text":"SAP recently released the SAP Business Technology Platform, Kyma runtime , a managed Kubernetes offering with Kyma. Kyma is much about extending existing applications, but you also get a full-blown Kubernetes cluster including Istio service mesh that you can use to build a standalone cloud application. In this tutorial, you deploy an application built with the SAP Cloud Application Programming Model (CAP) to an SAP Business Technology Platform, Kyma runtime cluster. The CAP application has an OData service, SAP Fiori UI and uses SAP HANA as a database. The SAP BTP Application Development example is used as starting point. The tutorial can be also done with any other Kyma installation, but you need an SAP HANA database and an HDI container and you then need to do the part with SAP HANA credentials differently. The CAP part is probably the smallest in the tutorial: Frankly speaking, just package it into a docker container and run it. But the tutorial also describes how to get a small docker registry running. If you're experienced with Kubernetes, you can skip some sections. Since SAP HANA Cloud isn\u2019t yet available for Kyma, you take it from Cloud Foundry. It's a bit tricky to copy the credentials, but at the end it's just copying and pasting values. Scripts are provided to help you here. So, don't get distracted by this.","title":"Preface"},{"location":"Kyma/#disclaimer","text":"Note, that this tutorial is intended to give an introduction in the topic and not for deploying productive applications. CAP doesn't officially support Kubernetes and Kyma as a platform right now.","title":"Disclaimer"},{"location":"Kyma/#preconditions","text":"These are preconditions to do this tutorial:","title":"Preconditions"},{"location":"Kyma/#sap-btp-application-development-example","text":"You can find the starting point of this tutorial in the cap/freestyle branch: Go to the directory where you want to create the example. Create a folder for your example: For example: mkdir cap-kyma-app Clone the example GitHub repository and checkout the example branch: git clone https://github.com/SAP-samples/cloud-cap-risk-management cd cloud-cap-risk-management git checkout cap/freestyle-ui5-app Copy all files from the example to your folder, except the .git folder: For example: cp -r .gitignore $( ls -1A | grep -v .git ) ../cap-kyma-app Open a new project in your source editor for the folder cap-kyma-app : For Visual Studio Code: cd ../cap-kyma-app code . Find the final code in the kyma/app branch.","title":"SAP BTP Application Development Example"},{"location":"Kyma/#local-software","text":"The following local software is required: node ( Node.js version 12.x or 14.x is recommended) docker (for example, Docker Desktop for macOS or Windows) A source code editor ( Visual Studio Code is recommended) bash or zsh shell to run the command snippets on MacOS or Linux, or Git Bash for Windows, MinGW, or Cygwin ) kubectl ( Kubernetes Command Line tool ), see this tutorial how to install it helm ( Helm Chart Command Line , not needed if you use an existing docker registry) cf ( Cloud Foundry Command Line Interface (CLI) ) (For Windows users only): You have installed the SQLite tools for Windows. Find the steps how to install it in the Troubleshooting guide in the CAP documentation. If you have a Mac, many of the commands can be installed using Homebrew ( brew install ... ). For Windows, there's a similar offering called Chocolatey. Refer to the binary installers of the components otherwise.","title":"Local Software"},{"location":"Kyma/#enable-kyma-in-sap-btp-subaccount","text":"You need an SAP BTP Subaccount with consumption-based model (that is, Cloud Credits). Kyma is currently supported on Azure landscapes only, as of September 2020. Although Kyma is needed at a later point in the tutorial, it\u2019s recommended to start with this step, because the Kyma provisioning can take some time. For this tutorial you have two options: Option 1: Create Your Own SAP BTP Trial Account Option 2: Use an Existing SAP BTP Subaccount","title":"Enable Kyma in SAP BTP Subaccount"},{"location":"Kyma/#option-1-create-your-own-sap-btp-trial-account","text":"Go to SAP BTP Cockpit . Choose Enter Your Trial Account . If you don't have a user, you need to register for a free. Wait for the completion of the on-boarding. You should land on the Subaccounts page of your Global Account on trial. Choose trial . Go to Kyma Environment . Choose Enable Kyma . Provide a Cluster Name . Choose Create . This takes a while. You can start the tutorial in the meantime.","title":"Option 1: Create Your Own SAP BTP Trial Account"},{"location":"Kyma/#option-2-use-your-existing-sap-btp-subaccount","text":"If you already have an older trial account, then you might not see the Enable Kyma button. In that case: Go to Entitlements . Choose Configure Entitlements . Choose Add Service Plans . Search for and select Kyma runtime . Check the trial (Environment) checkbox. Choose Add 1 Service Plan . Choose Enable Kyma . Provide a Cluster Name . Choose Create . This takes a while. You can start the tutorial in the meantime. SAP BTP\u2019s XSUAA is used to access the Kyma runtime. Please follow the steps to assign Roles in the Kyma Environment . In some cases, it will still take 5-10 minutes to get access to Kyma Runtime.","title":"Option 2: Use Your Existing SAP BTP Subaccount"},{"location":"Kyma/#enable-cloud-foundry","text":"To use the SAP HANA Cloud service, you can either enable Cloud Foundry for the same subaccount or use a different subaccount, for example, an already existing or trial subaccount.","title":"Enable Cloud Foundry"},{"location":"Kyma/#install-the-cloud-foundry-cli","text":"Later in this tutorial, you need to log on to Cloud Foundry using the command line. Therefore, it's necessary to install the Cloud Foundry CLI. See the Cloud Foundry documentation for detailed steps on how to do that.","title":"Install the Cloud Foundry CLI"},{"location":"Kyma/#run-the-cap-application-in-a-docker-container-locally","text":"In the first part of this tutorial, you prepare your application to be run on Kyma.","title":"Run the CAP Application in a Docker Container Locally"},{"location":"Kyma/#build-a-docker-container","text":"Since all applications in Kubernetes as in Kyma are docker containers, you need to create a docker image for the CAP application. For that, you need to define a file Dockerfile that describes, how to build up the image and what to do when the docker image is run. The file starts with the FROM directive that names the base image that you want to use since you don't want to start from scratch. Here, you use a public image that already contains the NodeJS 12.x installation. Additionally install openssl , which is required by the SAP HANA client and carry out npm install . You then declare that the CAP default port 4004 is exposed to the outside and run the CAP server with npm start . Navigate to the root folder of your app: cd cpapp Create a file named Dockerfile and add the following lines to it: FROM node:12-slim WORKDIR /usr/src/app COPY gen/srv . RUN npm install EXPOSE 4004 USER node CMD [ \"npm\" , \"start\" ] 3. Add sqlite3 as project dependency, so you can try out the scenario without an external database service: npm install --save sqlite3 4. Add the following snippet to the package.json file: { \"name\" : \"cpapp\" , ... \"cds\" : { \"requires\" : { \"db\" : { \"kind\" : \"sql\" } } } } This tells CAP to use SQLite in dev and SAP HANA in productive mode. Before you can build the image, run cds build , because the image takes the build results from the gen/srv folder. You can also do this in the docker build, but that would require additional steps that you skip for now. cds build Build the docker image locally: Make sure that the docker daemon is running (for example, Docker Desktop for MacOS or Windows). docker build -t cpapp . This builds the docker image specified in Dockerfile from the current directory ( . argument). The image is tagged with the name cpapp . Without giving a tag a random tag will be added. You should see an output similar like: ... Removing intermediate container 4f451017d70f ---> 948523646f60 Step 5 /6 : EXPOSE 4004 ---> Running in 1a2b7a0ec606 Removing intermediate container 1a2b7a0ec606 ---> be849ff002e1 Step 6 /6 : CMD [ \"npm\" , \"start\" ] ---> Running in cb0b32163709 Removing intermediate container cb0b32163709 ---> 1e0c26b94ac6 Successfully built 1e0c26b94ac6 Successfully tagged cpapp:latest Docker images consist of several \"filesystem layers\". The base image is a layer and your own docker image is a layer on top. Each layer can add or remove files. This is convenient because it saves storage because your custom images contain only the delta of files added or removed. To be more precise an image consists of multiple layers. The docker build will automatically decide when to create a new layer. You can see the different layers in the docker build output, for example: ---> 365313c4290e","title":"Build a Docker Container"},{"location":"Kyma/#run-the-docker-container","text":"","title":"Run the Docker Container"},{"location":"Kyma/#check-the-content-of-the-docker-container","text":"You can run the docker container and look inside its contents: docker run -i -t cpapp /bin/bash This starts a docker container with your image ( -t cpapp ) and starts the bash shell ( /bin/bash ) that happens to be part of your base image in an interactive ( -i ) mode. Look inside the contents using the ls command: node@a5a0b8115eb5:/usr/src/app# ls manifest.yaml node_modules package-lock.json package.json srv Exit the container using exit (Pro-tip: Ctrl+D :-)).","title":"Check the Content of the Docker Container"},{"location":"Kyma/#run-your-cap-service","text":"Now, it's time to run your CAP service. So, lets do this. Run the container: docker run -t cpapp Without specifying the command, it runs the default command, that is npm start . You can try to access the service at http://localhost:4004 , but it doesn't work. It shows a similar error message like this: This site can\u2019t be reached localhost refused to connect. Although the docker container exposes port 4004 , the \"host\" of the container, that is your PC or Mac, doesn't make it accessible. You need to declare it in the docker command line. Stop the service with Ctrl+C . Run the container again with the publish parameter: docker run -p 4004 :4004 -t cpapp This tells docker to expose the port 4004 of the docker container to the port 4004 of the host. You could also use a different port of the host, but let's keep it simple. Now, you can access the CAP service at http://localhost:4004 . You can click on the Risks ( http://localhost:4004/service/risk/Risks ) or Mitigations * ( http://localhost:4004/service/risk/Risks ) link that returns an empty OData response.","title":"Run Your CAP Service"},{"location":"Kyma/#add-sap-fiori-ui","text":"There's already an SAP Fiori Elements UI for Risks and a SAPUI5 Freestyle UI for Mitigations in the project. You could think of several ways to deploy it to the cloud. For the sake of simplicity, you can use the CAP service's capability to serve static resources from the app folder. After the cds build , the app folder isn\u2019t part of the service. You can copy it in, but you need to remove the *.cds files because they\u2019re already copied from app to srv and duplicating these files confuses CAP. You can automate this in the docker build by modifying the Dockerfile . Add the highlighted lines to the file Dockerfile : FROM node:12-slim WORKDIR /usr/src/app COPY gen/srv . RUN npm install COPY app app/ RUN find app -name '*.cds' | xargs rm -f EXPOSE 4004 USER node CMD [ \"npm\" , \"start\" ] Rebuild the docker image: cds build docker build -t cpapp . Run it locally: docker run -p 4004 :4004 -t cpapp Try it out by navigating to http://localhost:4004/launchpage.html .","title":"Add SAP Fiori UI"},{"location":"Kyma/#deploy-to-kyma","text":"In this part of the tutorial, you deploy the dockerized CAP application to Kyma.","title":"Deploy to Kyma"},{"location":"Kyma/#log-in-to-kyma-kubernetes-cluster","text":"The first step is to log in to Kyma using the Kyma Console and configure the local kubectl command to connect to the Kyma Kubernetes cluster. Go to SAP BTP Cockpit . Choose Enter Your Trial Account . Choose your Global Account . Choose your Subaccount . On the Overview page, under Kyma Environment , choose Link to dashboard . The Kyma console should open. The console is a web-based administrative UI for Kyma. If not, see the troubleshooting information. Troubleshooting: Not enough permissions to launch the kyma console If you can not launch the kyma console, please follow the steps to get permissions: Open your subaccount. Navigate to Security --\u203a Role Collections --\u203a Trust Configuration and assign the role collection Kyma_Roles to your user. Navigate back to the subaccount overview and launch the kyma console. Choose the account icon in the upper right corner. Choose Get Kubeconfig from the dropdown menu. A file download should be triggered. If no download is triggered, see the troubleshooting information. Troubleshooting: If no download is triggered It can happen, that no download is triggered. In this case follow these steps: Open your browser's developer tools (press F12 ). Navigate to the Network tab. Choose the Get Kubeconfig button again. Locate the response of the kubeconfig file. Look at the response. Copy the response, you will need it in the next steps. Navigate to your home folder. The config for the default cluster is stored in .kube/config in your home directory. Navigate to the .kube folder. Create a file named cap-kyma-app-config to avoid overwriting the existing configuration. Copy the content of the downloaded kubeconfig.yml into the file cap-kyma-app-config . Set the new config file for the running shell process: export KUBECONFIG = ~/.kube/cap-kyma-app-config Now, you can access your kubernetes cluster. Check if you can access your kubernetes cluster. kubectl get pods The command should run without an error message, but it doesn't output any pods if you have a newly created cluster. If you want to use kubectl in another shell session, then rerun the export statement. The authentication session will expire after some hours. You then need to download the kubeconfig.yml file again and replace the value of the token parameter in your cap-kyma-app-config file with the one from the newly downloaded kubeconfig.yml file.","title":"Log In to Kyma (Kubernetes Cluster)"},{"location":"Kyma/#prepare-the-docker-registry","text":"Kubernetes needs a docker registry that can be accessed from the cluster's network. This could be any public or private registry. To keep this tutorial self-contained, you use a slightly different approach, which isn\u2019t recommended for productive use: You deploy your own docker registry to the cluster. If you want to use a different docker registry, then you need to adjust the docker push commands and the URLs for the docker images. In the approach with the cluster's own docker registry, a Helm Chart is used to install it on the cluster. Add the stable Helm Chart repository to the helm CLI: helm repo add stable https://charts.helm.sh/stable Install the Helm Chart for a docker registry: helm install docker-registry stable/docker-registry You need to make the docker registry available on the public internet. The details to this step are explained later. Run the following commands: kubectl apply -f - <<EOF apiVersion: gateway.kyma-project.io/v1alpha1 kind: APIRule metadata: labels: app: docker-registry name: docker-registry spec: service: host: docker-registry name: docker-registry port: 5000 gateway: kyma-gateway.kyma-system.svc.cluster.local rules: - path: /.* methods: [\"GET\", \"HEAD\" ] accessStrategies: - handler: noop mutators: [] EOF To be able to push docker images via HTTP, you need to add it as an \"insecure registry\" (not using secure socket communication) to your Docker config. Open your Docker Desktop. Choose Preferences . Choose Docker Engine . Add the following line: { ... \"insecure-registries\" : [ \"0.0.0.0:5000\" ] } Choose Apply and Restart . Wait for the startup to be completed.","title":"Prepare the Docker Registry"},{"location":"Kyma/#push-docker-image","text":"Since the docker registry isn\u2019t exposed to the open internet (and you don't want to), you need to establish a tunnel from your localhost to the registry: kubectl port-forward deployment/docker-registry 5000 :5000 & The & causes the process to run in the background. You need to keep it running until you finished pushing docker images. You may need to start it newly in case the \"docker push\" doesn't work anymore. You should see the following output that tells you that the tunneling is established: Forwarding from 127.0.0.1:5000 -> 5000 Forwarding from [::1]:5000 -> 5000 Your docker image needs an additional tag to declare it part of your forwarded docker registry. Otherwise, you can't push it. docker tag cpapp 0 .0.0.0:5000/cpapp Push it, using the new tag: docker push 0 .0.0.0:5000/cpapp The output mixes the docker push output with the kubectl port-forward output. It should finish with a line like: ``` latest: digest: sha256:4054dd60ee4f9889d58aa97295cb3b1430a5c1549e602b6c619d7c4ed7d04ad0 size: 2412 ```","title":"Push Docker Image"},{"location":"Kyma/#deploy-the-cap-application","text":"Now, you can deploy your CAP service to Kubernetes. You use the Deployment resource of Kubernetes to describe the application. It contains a description of the container and manages its creation and takes care that the instance keeps running. Create a directory to store your deployment YAML files: mkdir deployment Create a file deployment/deployment.yaml with the following contents: apiVersion : apps/v1 kind : Deployment metadata : name : cpapp labels : app : cpapp version : v1 spec : replicas : 1 selector : matchLabels : app : cpapp version : v1 template : metadata : labels : app : cpapp version : v1 spec : containers : - name : cpapp image : docker-registry.{{CLUSTER_DOMAIN}}/cpapp imagePullPolicy : Always ports : - containerPort : 4004 The file contains a placeholder {{CLUSER_DOMAIN}} that you need to replace with your cluster's domain. Either in the file or replacing it when applying the file. You can find your cluster's domain, for example, for the URL of the Kyma Console. If your console URL is for example https://console.c-abcd123.kyma.shoot.live.k8s-hana.ondemand.com/ , the cluster's domain is c-abcd123.kyma.shoot.live.k8s-hana.ondemand.com , just without the leading console. Apply the new configuration: kubectl apply -f deployment/deployment.yaml Or you can take it from the current kubectl configuration and replace it on deployment, like this: sed <deployment/deployment.yaml \"s/{{CLUSTER_DOMAIN}}/ $( kubectl config current-context ) /\" | kubectl apply -f - Check the state of the deployment using: kubectl get deployments Initially, it looks like this: ``` NAME READY UP-TO-DATE AVAILABLE AGE cpapp 0/1 1 0 5s ``` If all goes well, it turns to: ``` NAME READY UP-TO-DATE AVAILABLE AGE cpapp 1/1 1 1 14m ``` Since you have not exposed the app to the public internet, you can only access it with a tunnel. So, lets create another tunnel: kubectl port-forward deployment/cpapp 4004 :4004 Open the CAP service in the browser at http://localhost:4004 . Your service is now running through kubernetes. Press Ctrl+C to stop the tunnel.","title":"Deploy the CAP Application"},{"location":"Kyma/#expose-cap-application-to-the-public-internet","text":"Create a new file deployment/apirule.yaml with following content: apiVersion : v1 kind : Service metadata : name : cpapp labels : app : cpapp service : cpapp spec : ports : - port : 4004 name : http selector : app : cpapp --- apiVersion : gateway.kyma-project.io/v1alpha1 kind : APIRule metadata : labels : app : cpapp name : cpapp spec : service : host : cpapp name : cpapp port : 4004 gateway : kyma-gateway.kyma-system.svc.cluster.local rules : - path : /.* methods : [ \"GET\" , \"PUT\" , \"POST\" , \"HEAD\" , \"PATCH\" , \"DELETE\" ] accessStrategies : - handler : noop mutators : [] Apply with: kubectl apply -f deployment/apirule.yaml Look up your CAP service URL: echo \"https://cpapp. $( kubectl config current-context ) \" The console outputs your CAP service URL, for example https://cpapp.example.kyma.live.k8s-hana.ondemand.com/ . Check if you can access your service via your URL. You can also add entries to the Risks application.","title":"Expose CAP Application to the Public Internet"},{"location":"Kyma/#add-sap-hana-cloud","text":"Your application runs on Kyma and is accessible from public internet now. Still, it works like the local development version ( cds watch ) without a real database persistence. In this step, you add support for SAP HANA. As already said, you need to provision it from Cloud Foundry and add the credentials manually. To keep the latency between the CAP service and SAP HANA low, it makes sense to provision the SAP HANA Cloud database on the same SAP BTP region as the Kyma cluster. But to try it out you can also use an SAP HANA Cloud instance from your Trial account.","title":"Add SAP HANA Cloud"},{"location":"Kyma/#prepare-cap-application-for-sap-hana-cloud","text":"The hdb module needs to be added to your package.json to enable CAP to talk to an SAP HANA database. Install the hdb module: npm install --save hdb Open the package.json file. Add the following snippet for SAP HANA: { \"name\" : \"cpapp\" , ... \"cds\" : { \"requires\" : { \"db\" : { \"kind\" : \"sql\" } }, \"hana\" : { \"deploy-format\" : \"hdbtable\" } } ... } With requires.db.kind : sql you tell CAP to use SQLite in development and SAP HANA in productive mode. The setting hana.deploy-format : hdbtable is required for SAP HANA Cloud since it supports only the hdbtable and hdbview files for deployment. You now need to tell the CAP service to run in the productive mode. To do that, edit the Dockerfile and add the highlighted statement: FROM node:12-slim ENV NODE_ENV = production WORKDIR /usr/src/app COPY gen/srv . RUN npm install COPY app app/ RUN find app -name '*.cds' | xargs rm -f EXPOSE 4004 USER node CMD [ \"npm\" , \"start\" ] Rebuild the CAP project and the docker image for production: cds build --production docker build -t 0.0.0.0:5000/cpapp . docker push 0.0.0.0:5000/cpapp The command cds build uses the --production argument to build the SAP HANA artifacts. npm and node uses the environment variable NODE_ENV=production . Without that CAP falls back to \"development mode\" settings and tries to use SQLite.","title":"Prepare CAP Application for SAP HANA Cloud"},{"location":"Kyma/#create-and-deploy-sap-hana-hdi-container","text":"You use the cds deploy command to create an HDI container on Cloud Foundry and deploy the database schema to the container. Make sure that you're logged in to a Cloud Foundry account where an SAP HANA Cloud instance and entitlement for the service plan hana hdi-shared is available or you use an SAP BTP Trial account, run: Set the Cloud Foundry API endpoint: cf api <api-endpoint> You can find the API Endpoint URL in the overview page of your subaccount. Log on to your Cloud Foundry account: cf login Run the following line to create an HDI container: cds deploy --to hana:cpapp-kyma-hdi The suffix :cpapp-kyma-hdi tells cds deploy to create an HDI container with name cpapp-kyma-hdi . It also creates a service key with the name cpapp-kyma-hdi-key that you use to access the database in the next section. Then it deploys the database tables and the test content. It should end with something like: Finalizing... Finalizing... ok (0s 96ms) Make succeeded (0 warnings): 14 files deployed (effective 22), 0 files undeployed (effective 0), 0 dependent files redeployed Making... ok (1s 597ms) Enabling table replication for the container schema \"C5DF44CB9C08482D821F5BC3BE344FCF\"... Enabling table replication for the container schema \"C5DF44CB9C08482D821F5BC3BE344FCF\"... ok (0s 63ms) Starting make in the container \"C5DF44CB9C08482D821F5BC3BE344FCF\" with 14 files to deploy, 0 files to undeploy... ok (1s 756ms) Deploying to the container \"C5DF44CB9C08482D821F5BC3BE344FCF\"... ok (2s 211ms) No default-access-role handling needed; global role \"C5DF44CB9C08482D821F5BC3BE344FCF::access_role\" will not be adapted Unlocking the container \"C5DF44CB9C08482D821F5BC3BE344FCF\"... Unlocking the container \"C5DF44CB9C08482D821F5BC3BE344FCF\"... ok (0s 0ms) Deployment to container C5DF44CB9C08482D821F5BC3BE344FCF done [Deployment ID: none]. (4s 499ms) Application can be stopped. If it's missing, then there's probably a problem with the HDI deployer on your operating system. It can be worked around by putting the HDI deployer in a docker container as describe in the following section.","title":"Create and Deploy SAP HANA HDI Container"},{"location":"Kyma/#workaround-use-hdi-deployer-in-docker-container","text":"Create a file Dockerfile.hdi-deploy with the following content: FROM node:12-slim AS build ENV NODE_ENV = production WORKDIR /usr/src/app RUN apt-get update RUN apt-get install -y openssl python make g++ COPY gen/db/package.json . RUN npm install COPY gen/db . CMD [ \"npm\" , \"start\" , \"--\" , \"--exit\" ] Execute the following commands and check if the output gets right this time: docker build -t cpapp-hdi-deployer -f Dockerfile.hdi-deploy . docker run --env VCAP_SERVICES = '{\"hana\":[{\"credentials\": ' \" $( cf service-key cpapp-kyma-hdi cpapp-kyma-hdi-key | sed 1d ) \" ', \"name\": \"hana\",\"label\":\"hana\",\"plan\":\"hdi-shared\",\"tags\":[\"hana\"]}]}' -t cpapp-hdi-deployer","title":"Workaround: Use HDI Deployer in Docker Container"},{"location":"Kyma/#add-sap-hana-hdi-container-credentials","text":"You need to somehow inject the SAP HANA credentials into the CAP application. On Cloud Foundry that is done using an environment variable called VCAP_SERVICES that takes the credentials for all bound services. Kubernetes takes a slightly different approach, it uses secrets, that can be injected into applications as environment variables. But as individual environment variables for each value. Luckily, CAP supports both. On Kyma the service credentials for SAP HANA would look like this: driver=com.sap.db.jdbc.Driver hdi_password=dsdssdfdfdsfds... hdi_user=DE44345... host=1d468818-87ad-4f9a-b762-a642b9070869.hana.eu10.hanacloud.ondemand.com password=Vt1jo... port=443 schema=DE6922EF2F3449E984E2E794456B7CBE url=jdbc:sap://1d468818-87ad-4f9a-b762-a642b9070869.hana.eu10.hanacloud.ondemand.com:443?encrypt=true&validateCertificate=true&currentschema=DE6922EF2F3449E984E2E794456B7CBE user=DE6922EF2F3449E984E2E794456B7CBE_0BR49NOHL4VW9DC8NVZFXRN3O_RT Since you need to take the SAP HANA credentials from Cloud Foundry, it\u2019s easier to stick to the VCAP_SERVICES approach for now. So, let's have a look at the credentials that have been created by cds deploy : cf service-key cpapp-kyma-hdi cpapp-kyma-hdi-key The output looks like this: Ge tt i n g key `cpapp - kyma - hdi - key` f or service i nstan ce `cpapp - kyma - hdi` as MySel f ... { \"certificate\" : \"-----BEGIN CERTIFICATE-----\\nMIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh\\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\\nd3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD\\nQTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT\\nMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\\nb20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG\\n9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB\\nCSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97\\nnh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt\\n43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P\\nT19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4\\ngdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO\\nBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR\\nTLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw\\nDQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr\\nhMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg\\n06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF\\nPnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls\\nYSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk\\nCAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=\\n-----END CERTIFICATE-----\" , \"driver\" : \"com.sap.db.jdbc.Driver\" , \"hdi_password\" : \"Ee8lLp3O7aIPv51kOQ38vV6lCx3Tvm6WpGL9i7PRgMZlcuJygN9IPLW0GBVofz7GKsU6m3QNbADJvmRtVEp_ceEAo0iFT8Y6QtZojKOrMONeGTNcelnbUJw.uVb-3c.R\" , \"hdi_user\" : \"C5DF44CB9C08482D821F5BC3BE344FCF_7Y4VQVS7NK0VAVT1O6B01Q5XZ_DT\" , \"host\" : \"1d468818-87ad-4f9a-b762-a642b9070869.hana.eu10.hanacloud.ondemand.com\" , \"password\" : \"Jj4eS040K.2Z.88Y73c7MbANyvSCVhv0C7EYl6a71oW_3BmoRH6SN91_BAw3Y4cDbli.j2ebCnho0jCyYTghPnL9x8y59mb8CTNv0LvY2CvehYiw9ky7zVdRZJcOPY1s\" , \"port\" : \"443\" , \"schema\" : \"C5DF44CB9C08482D821F5BC3BE344FCF\" , \"url\" : \"jdbc:sap://1d468818-87ad-4f9a-b762-a642b9070869.hana.eu10.hanacloud.ondemand.com:443?encrypt=true\\u0026validateCertificate=true\\u0026currentschema=C5DF44CB9C08482D821F5BC3BE344FCF\" , \"user\" : \"C5DF44CB9C08482D821F5BC3BE344FCF_7Y4VQVS7NK0VAVT1O6B01Q5XZ_RT\" }","title":"Add SAP HANA HDI Container Credentials"},{"location":"Kyma/#create-a-secret-for-sap-hana-hdi-container-credentials","text":"As a first step, you need to upload the SAP HANA HDI container credentials from the Cloud Foundry service key to a Kubernetes secret. You build the file gen/hdi-secret.yaml with the next steps. Create the file gen/hdi-secret.yaml with the following content: apiVersion : v1 kind : Secret metadata : name : cpapp-kyma-hdi-secret type : opaque stringData : VCAP_SERVICES : > { \"hana\": [ { \"binding_name\": null, \"credentials\": {{CREDENTIALS}}, \"instance_name\": \"hana\", \"label\": \"hana\", \"name\": \"hana\", \"plan\": \"hdi-shared\", \"provider\": null, \"syslog_drain_url\": null, \"tags\": [ \"hana\", \"database\", \"relational\" ], \"volume_mounts\": [] } ] } Replace the {{CREDENTIALS}} variable: Option A: Replace {{CREDENTIALS}} with the JSON output of cf service-key cpapp-kyma-hdi cpapp-kyma-hdi-key (without the initial line). Create the secret on Kubernetes: kubectl apply -f gen/hdi-secret.yaml Option B: node -e 'console.log(process.argv[1].replace(\"{{CREDENTIALS}}\", process.argv[2]))' \" $( cat gen/hdi-secret.yaml ) \" \" $( cf service-key cpapp-kyma-hdi cpapp-kyma-hdi-key | sed 1d | sed 's/^/ /' ) \" | kubectl apply -f - Look at your uploaded secret: kubectl describe secret cpapp-kyma-hdi-secret It should be similar to the following output: NAME TYPE DATA AGE Name: cpapp-kyma-hdi-secret Namespace: docker-registry Labels: <none> Annotations: Type: opaque Data ==== VCAP_SERVICES: 2602 bytes","title":"Create a Secret for SAP HANA HDI Container Credentials"},{"location":"Kyma/#connect-the-cap-application-to-the-sap-hana-hdi-container","text":"Now, you need to inject the secret's value as environment variables into your CAP application. Add the highlighted lines to your deployment/deployment.yaml file: ... spec : containers : - name : cpapp image : docker-registry.{{CLUSTER_DOMAIN}}/cpapp imagePullPolicy : Always ports : - containerPort : 4004 envFrom : - secretRef : name : cpapp-kyma-hdi-secret This adds all name value pairs in the secret, currently only VCAP_SERVICES , as environment variables to the container of the deployment. Update the Kubernetes cluster with the deployment file: Option A (if you replaced {{CLUSTER_DOMAIN}} in the deployment/deployment.yaml file): kubectl apply -f deployment/deployment.yaml Option B: sed <deployment/deployment.yaml \"s/{{CLUSTER_DOMAIN}}/ $( kubectl config current-context ) /\" | kubectl apply -f - Through the deployment, you see temporarily two pods. The old pod will be deleted after the new was launched. Check the pods: kubectl get pods Output: NAME READY STATUS RESTARTS AGE cpapp-566fcb5f9b-8dfjb 2/2 Running 0 26m cpapp-66b5cb4876-hx5l6 0/2 Init:0/1 0 2s Rerun the command kubectl get pods until there\u2019s only one Running pod for the application. Get the URL of your application: echo \"https://cpapp. $( kubectl config current-context ) \" Open the URL to your application. Now, you can create some entries in the Risks application, which are stored in the SAP HANA database.","title":"Connect the CAP Application to the SAP HANA HDI Container"},{"location":"Kyma/#summary","text":"In the tutorial, you\u2019ve learned how to deploy a CAP application on Kyma. When the SAP HANA Cloud service is available for Kyma (Disclaimer: This isn\u2019t an SAP product commitment), it will be much easier. You can find the final code in the kyma/app branch.","title":"Summary"},{"location":"Kyma/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Kyma/#viewing-the-applications-log","text":"You can use the following command to view the latest logs of your app: kubectl logs $(kubectl get pods -l app=cpapp -o jsonpath='{.items[0].metadata.name}') cpapp The log-level of the CAP application can be increased, by adding the environment variable DEBUG to the deployment/deployment.yaml file and apply the file again with kubectl : env: - name: DEBUG value: \"y\" Make sure that env has the same indent as envFrom .","title":"Viewing the Application's Log"},{"location":"Kyma/#execute-commands-in-the-applications-container","text":"With the following command, you can \"ssh\" to your container and start a bash shell: kubectl exec $(kubectl get pods -l app=cpapp -o jsonpath='{.items[0].metadata.name}') -t -i /bin/bash","title":"Execute Commands in the Application's Container"},{"location":"Kyma/#teardown","text":"If want to quickly delete all artifacts created in this tutorial, execute the following commands: cf delete-service-key cpapp-kyma-hdi cpapp-kyma-hdi-key -f cf delete-service cpapp-kyma-hdi -f for i in deployment/*.yaml ; do kubectl delete -f $i done kubectl delete secret cpapp-kyma-hdi-secret helm uninstall docker-registry","title":"Teardown"},{"location":"Launchpad_Service/","text":"Add the SAP Launchpad Service In this tutorial, you will use the SAP Launchpad service to access your CAP service and its UI. Additionally, the SAP Launchpad service provides features like personalization, role-based visibility, theming, and more. You can add multiple applications to one launchpad, including subscribed ones and applications from SAP S/4HANA or SAP BTP. Prerequisites Your subaccount has quota for the services SAP Launchpad service and SAP HTML5 Applications Repository service as described in Prepare SAP BTP and Cloud Foundry . Additional Documentation What is SAP Launchpad service? Further tutorials, for example Deliver Your First SAP Launchpad Site (with integrated apps) Overview You will do the following steps in this tutorial: Prepare the SAP Fiori applications (SAP Fiori Elements and SAPUI5 Freestyle) for usage with SAP Launchpad service. Add services to your MTA deployment. Add destinations for CAP Service and SAP Fiori UI access to your MTA deployment, so that they can be accessed from SAP Launchpad service. Add the deployment of the SAP Fiori applications to your MTA deployment using SAP Fiori command line tools. Add UI build files to .gitignore . Re-build and re-deploy the .mtar file. Subscribe to SAP Launchpad service. Create your SAP Launchpad site. Test your SAP Launchpad site. Prepare SAP Fiori Applications Add Navigation Targets In this step, you add the navigation targets Risks-display and Mitigations-display to the application manifest ( manifest.json ) file. Navigation targets are required to navigate between applications, but also to start the applications from SAP Launchpad service. Add Navigation Target for Risks UI Open the file app/risks/webapp/manifest.json . Add the external navigation target to the sap.app JSON object. You can add it right behind the sourceTemplate object: { ... \"sap.app\" : { \"id\" : \"ns.risks\" , ... \"sourceTemplate\" : { ... }, \"crossNavigation\" : { \"inbounds\" : { \"Risks-display\" : { \"signature\" : { \"parameters\" : {}, \"additionalParameters\" : \"allowed\" }, \"semanticObject\" : \"Risks\" , \"action\" : \"display\" } } } } } Add Navigation Target for Mitigations UI Do the same with the mitigations manifest file app/mitigations/webapp/manifest.json , but with the semanticObject name Mitigations : { ... \"sap.app\" : { \"id\" : \"ns.mitigations\" , ... \"dataSources\" : { ... }, \"crossNavigation\" : { \"inbounds\" : { \"Mitigations-display\" : { \"signature\" : { \"parameters\" : {}, \"additionalParameters\" : \"allowed\" }, \"semanticObject\" : \"Mitigations\" , \"action\" : \"display\" } } } } } Add SAP Cloud Service Add your SAP Cloud service at the end of app/risks/webapp/manifest.json and app/mitigations/webapp/manifest.json files: { \"_version\" : \"\" , ... \"sap.fiori\" : { ... }, \"sap.cloud\" : { \"public\" : true , \"service\" : \"cpapp.service\" } } The name of your SAP Cloud service ( cpapp in this case) should be unique within an SAP BTP region. It is used to identify the resources that belong to one UI in the SAP Launchpad service. Add Services Add the SAP Destination Service Add the following lines to the resources section of the mta.yaml file: resources : ... - name : cpapp-destination type : org.cloudfoundry.managed-service parameters : service : destination service-plan : lite config : HTML5Runtime_enabled : true The SAP Destination service stores URLs and credentials (so called \"destinations\") to access applications and services. The service configuration option HTML5Runtime_enabled: true is required to make the destinations available to the SAP Launchpad service. Add the SAP HTML5 Application Repository Service for SAP BTP Add the following lines to the resources section of the mta.yaml file: resources : ... - name : cpapp-html5-repo-host type : org.cloudfoundry.managed-service parameters : service : html5-apps-repo service-plan : app-host The SAP HTML5 Application Repository service stores static UI files. In the deployment, the SAP Fiori UI applications are uploaded to this service and the SAP Launchpad service serves the UIs from there. Add Destinations You add three destinations for the SAP Destination service that are used by the SAP Launchpad service: cpapp-app-srv - The destination to the CAP service. It is required by your UIs running in SAP Launchpad service to access your service. cpapp-html5-repo-host - The destination to your SAP HTML5 Application Repository service instance. It allows the SAP Launchpad service to access your UI applications. cpapp-uaa - The destination to your XSUAA service instance. The SAP Launchpad service needs it to convert OAuth tokens for use with your CAP service. Add the following lines to the mta.yaml file: modules : ... - name : cpapp-destinations type : com.sap.application.content requires : - name : cpapp-uaa parameters : service-key : name : cpapp-uaa-key - name : cpapp-html5-repo-host parameters : service-key : name : cpapp-html5-repo-host-key - name : srv-api - name : cpapp-destination parameters : content-target : true parameters : content : instance : destinations : - Authentication : OAuth2UserTokenExchange Name : cpapp-app-srv TokenServiceInstanceName : cpapp-uaa TokenServiceKeyName : cpapp-uaa-key URL : '~{srv-api/srv-url}' sap.cloud.service : cpapp.service - Name : cpapp-html5-repo-host ServiceInstanceName : cpapp-html5-repo-host ServiceKeyName : cpapp-html5-repo-host-key sap.cloud.service : cpapp.service - Authentication : OAuth2UserTokenExchange Name : cpapp-uaa ServiceInstanceName : cpapp-uaa ServiceKeyName : cpapp-uaa-key sap.cloud.service : cpapp.service existing_destinations_policy : update build-parameters : no-source : true What happens now? The cpapp-app-srv destination uses the URL exported from the cpapp-srv module. Besides exporting the CAP service's URL as srv-url property, the XSUAA service instance that is required for authentication and authorization checks is added here. modules : ... provides : - name : srv-api # required by consumers of CAP services (for example, approuter) properties : srv-url : ${default-url} # -------------------- SIDECAR MODULE ------------------------ Add the Deployment of the SAP Fiori Applications Install SAP UI5 Tooling, SAP Fiori Application Generator, and MTA Install SAP UI5 tooling package, SAP Fiori application generator package, and mta package as global modules: npm install -g @sap/ux-ui5-tooling npm install -g @sap/generator-fiori npm i -g mta Delete the file app/mitigations/.yo-rc.json , because this makes the SAP Fiori application generator fail. rm app/mitigations/.yo-rc.json Remove Broken Dependency from Risks Application Remove the following two lines from app/risks/package.json , because they produce build issues and are not needed: \"devDependencies\" : { ... \"@sap/ux-ui5-tooling\" : \"1\" , \"@sap/ux-specification\" : \"latest\" , } Make sure the last entry in \"devDependencies\" doesn't end with a comma ( , ) character. Add SAP Fiori Element Risks Application Switch to app/risks directory: cd app/risks Add deployment config: fiori add deploy-config cf It will ask for the destination name. Enter cpapp-app-srv . Add UI5 Freestyle Mitigations Application Repeat the procedure with the app/mitigations folder: cd ../../app/mitigations fiori add deploy-config cf Enter cpapp-app-srv for the destination name again. Check the Results in the mta.yaml The newly added modules nsrisks and nsmitigations do the build of the SAP Fiori application. Each build result is a ZIP file that contains optimized UI resources and a ZIP file manifest-bundle.zip with the manifest.json and the i18n files. The latter is required by the SAP Launchpad service. Risks Application Module nsrisks modules : ... - name : nsrisks type : html5 path : app/risks build-parameters : build-result : dist builder : custom commands : - npm install - npm run build:cf supported-platforms : [] Mitigations Application Module nsmitigations modules : ... - name : nsmitigations type : html5 path : app/mitigations build-parameters : build-result : dist builder : custom commands : - npm install - npm run build:cf supported-platforms : [] HTML5 Application Deployer The module cpapp-app-content deploys the ZIP files from the nsrisks.zip and nsmitigations.zip to the SAP HTML5 Application Repository service, where it can be accessed by the SAP Launchpad service using the previously added destinations. modules : ... - name : cpapp-app-content type : com.sap.application.content path : . requires : - name : cpapp-html5-repo-host parameters : content-target : true build-parameters : build-result : resources requires : - artifacts : - nsrisks.zip name : nsrisks target-path : resources/ - artifacts : - nsmitigations.zip name : nsmitigations target-path : resources/ Add UI Build Files to .gitignore The SAP Fiori build files do not need to be stored in Git. You can add it to your .gitignore file: # SAP Fiori build files dist/ resources/ app/*/package-lock.json Can't see .gitignore ? .gitignore files are excluded by default from the filetypes shown in the VS code workspace. In VS code, go to File \u2192 Preferences \u2192 Settings , search for fileexclude , and delete the setting for .gitignore files under the Workspace tab. Re-Build and Re-Deploy the .mtar File Build your project with the MTA Build Tool (MBT): mbt build -t ./ Make sure you're in the root folder of your project Deploy your project to SAP BTP: cf deploy cpapp_1.0.0.mtar MBT build options How to build an MTA archive from the project sources Go to SAP BTP cockpit to check the deployed content. Subscribe to SAP Launchpad Service Log on to your Global Account and navigate to the Subaccount where you have deployed your service and application. Choose Services \u2192 Service Marketplace on the left. Search for the Launchpad Service tile and choose Create . Keep the default settings for Service and Plan and choose Create . You have now subscribed to the SAP Launchpad service. Create Your SAP Launchpad Site Choose Services \u2192 Instances and Subscriptions on the left. Locate the Launchpad Service under Subscriptions and choose Go to Application . In case you get the error: Sorry, we couldn't find the site . If you get the error Sorry, we couldn't find the site. Please contact your site administrator for assistance. while opening the application, you have to assign your user to the Launchpad_Admin role collection. Choose Security \u2192 Trust Configuration on the left. Choose your identity provider from the list. Enter your e-mail address and choose Show Assignments . Choose Assign Role Collection and assign the Launchpad Admin role collection to your user. See section Initial Setup in the SAP Launchpad service's documentation for more details. Choose Provider Manager on the left and refresh the HTML5 Apps entry there. Content providers aren't reloaded automatically when you push an app, so it's important to manually refresh. Choose Content Manager \u2192 Content Explorer and open the content provider HTML5 Apps . Add the Risks and Mitigations to My Content . Choose Content Manager \u2192 My Content . In the item list, choose the item Everyone . Everyone is a role that has to be assigned to the Risks and Mitigations apps so all users can access them. Choose Edit and assign the Risks and Mitigations apps to the role. Choose New \u2192 Group . Type in Risk Management as the title of the group and assign the Risks and Mitigations apps to it. This way, you're telling the SAP Launchpad service to display the Risks and Mitigations apps in a group called Risk Management . Choose Site Directory \u2192 Create Site . Type in Risk Management Site for the site name and choose Create . The new site gets the Everyone role by default, so you don't have to assign it explicitly. The default site properties are sufficient for the purposes of this tutorial. Test Your SAP Launchpad Site Choose Go to site . You can see the Risk Management group that includes the Mitigations and Risks apps. Open the Risks app. You have launched your Risks app through the SAP Launchpad service. If you choose Go , you'll get an error because you haven't assigned a role collection to your user yet. We'll do it in the next step.","title":"Add the SAP Launchpad Service"},{"location":"Launchpad_Service/#add-the-sap-launchpad-service","text":"In this tutorial, you will use the SAP Launchpad service to access your CAP service and its UI. Additionally, the SAP Launchpad service provides features like personalization, role-based visibility, theming, and more. You can add multiple applications to one launchpad, including subscribed ones and applications from SAP S/4HANA or SAP BTP. Prerequisites Your subaccount has quota for the services SAP Launchpad service and SAP HTML5 Applications Repository service as described in Prepare SAP BTP and Cloud Foundry . Additional Documentation What is SAP Launchpad service? Further tutorials, for example Deliver Your First SAP Launchpad Site (with integrated apps)","title":"Add the SAP Launchpad Service"},{"location":"Launchpad_Service/#overview","text":"You will do the following steps in this tutorial: Prepare the SAP Fiori applications (SAP Fiori Elements and SAPUI5 Freestyle) for usage with SAP Launchpad service. Add services to your MTA deployment. Add destinations for CAP Service and SAP Fiori UI access to your MTA deployment, so that they can be accessed from SAP Launchpad service. Add the deployment of the SAP Fiori applications to your MTA deployment using SAP Fiori command line tools. Add UI build files to .gitignore . Re-build and re-deploy the .mtar file. Subscribe to SAP Launchpad service. Create your SAP Launchpad site. Test your SAP Launchpad site.","title":"Overview"},{"location":"Launchpad_Service/#prepare-sap-fiori-applications","text":"","title":"Prepare SAP Fiori Applications"},{"location":"Launchpad_Service/#add-navigation-targets","text":"In this step, you add the navigation targets Risks-display and Mitigations-display to the application manifest ( manifest.json ) file. Navigation targets are required to navigate between applications, but also to start the applications from SAP Launchpad service.","title":"Add Navigation Targets"},{"location":"Launchpad_Service/#add-navigation-target-for-risks-ui","text":"Open the file app/risks/webapp/manifest.json . Add the external navigation target to the sap.app JSON object. You can add it right behind the sourceTemplate object: { ... \"sap.app\" : { \"id\" : \"ns.risks\" , ... \"sourceTemplate\" : { ... }, \"crossNavigation\" : { \"inbounds\" : { \"Risks-display\" : { \"signature\" : { \"parameters\" : {}, \"additionalParameters\" : \"allowed\" }, \"semanticObject\" : \"Risks\" , \"action\" : \"display\" } } } } }","title":"Add Navigation Target for Risks UI"},{"location":"Launchpad_Service/#add-navigation-target-for-mitigations-ui","text":"Do the same with the mitigations manifest file app/mitigations/webapp/manifest.json , but with the semanticObject name Mitigations : { ... \"sap.app\" : { \"id\" : \"ns.mitigations\" , ... \"dataSources\" : { ... }, \"crossNavigation\" : { \"inbounds\" : { \"Mitigations-display\" : { \"signature\" : { \"parameters\" : {}, \"additionalParameters\" : \"allowed\" }, \"semanticObject\" : \"Mitigations\" , \"action\" : \"display\" } } } } }","title":"Add Navigation Target for Mitigations UI"},{"location":"Launchpad_Service/#add-sap-cloud-service","text":"Add your SAP Cloud service at the end of app/risks/webapp/manifest.json and app/mitigations/webapp/manifest.json files: { \"_version\" : \"\" , ... \"sap.fiori\" : { ... }, \"sap.cloud\" : { \"public\" : true , \"service\" : \"cpapp.service\" } } The name of your SAP Cloud service ( cpapp in this case) should be unique within an SAP BTP region. It is used to identify the resources that belong to one UI in the SAP Launchpad service.","title":"Add SAP Cloud Service"},{"location":"Launchpad_Service/#add-services","text":"","title":"Add Services"},{"location":"Launchpad_Service/#add-the-sap-destination-service","text":"Add the following lines to the resources section of the mta.yaml file: resources : ... - name : cpapp-destination type : org.cloudfoundry.managed-service parameters : service : destination service-plan : lite config : HTML5Runtime_enabled : true The SAP Destination service stores URLs and credentials (so called \"destinations\") to access applications and services. The service configuration option HTML5Runtime_enabled: true is required to make the destinations available to the SAP Launchpad service.","title":"Add the SAP Destination Service"},{"location":"Launchpad_Service/#add-the-sap-html5-application-repository-service-for-sap-btp","text":"Add the following lines to the resources section of the mta.yaml file: resources : ... - name : cpapp-html5-repo-host type : org.cloudfoundry.managed-service parameters : service : html5-apps-repo service-plan : app-host The SAP HTML5 Application Repository service stores static UI files. In the deployment, the SAP Fiori UI applications are uploaded to this service and the SAP Launchpad service serves the UIs from there.","title":"Add the SAP HTML5 Application Repository Service for SAP BTP"},{"location":"Launchpad_Service/#add-destinations","text":"You add three destinations for the SAP Destination service that are used by the SAP Launchpad service: cpapp-app-srv - The destination to the CAP service. It is required by your UIs running in SAP Launchpad service to access your service. cpapp-html5-repo-host - The destination to your SAP HTML5 Application Repository service instance. It allows the SAP Launchpad service to access your UI applications. cpapp-uaa - The destination to your XSUAA service instance. The SAP Launchpad service needs it to convert OAuth tokens for use with your CAP service. Add the following lines to the mta.yaml file: modules : ... - name : cpapp-destinations type : com.sap.application.content requires : - name : cpapp-uaa parameters : service-key : name : cpapp-uaa-key - name : cpapp-html5-repo-host parameters : service-key : name : cpapp-html5-repo-host-key - name : srv-api - name : cpapp-destination parameters : content-target : true parameters : content : instance : destinations : - Authentication : OAuth2UserTokenExchange Name : cpapp-app-srv TokenServiceInstanceName : cpapp-uaa TokenServiceKeyName : cpapp-uaa-key URL : '~{srv-api/srv-url}' sap.cloud.service : cpapp.service - Name : cpapp-html5-repo-host ServiceInstanceName : cpapp-html5-repo-host ServiceKeyName : cpapp-html5-repo-host-key sap.cloud.service : cpapp.service - Authentication : OAuth2UserTokenExchange Name : cpapp-uaa ServiceInstanceName : cpapp-uaa ServiceKeyName : cpapp-uaa-key sap.cloud.service : cpapp.service existing_destinations_policy : update build-parameters : no-source : true What happens now? The cpapp-app-srv destination uses the URL exported from the cpapp-srv module. Besides exporting the CAP service's URL as srv-url property, the XSUAA service instance that is required for authentication and authorization checks is added here. modules : ... provides : - name : srv-api # required by consumers of CAP services (for example, approuter) properties : srv-url : ${default-url} # -------------------- SIDECAR MODULE ------------------------","title":"Add Destinations"},{"location":"Launchpad_Service/#add-the-deployment-of-the-sap-fiori-applications","text":"","title":"Add the Deployment of the SAP Fiori Applications"},{"location":"Launchpad_Service/#install-sap-ui5-tooling-sap-fiori-application-generator-and-mta","text":"Install SAP UI5 tooling package, SAP Fiori application generator package, and mta package as global modules: npm install -g @sap/ux-ui5-tooling npm install -g @sap/generator-fiori npm i -g mta Delete the file app/mitigations/.yo-rc.json , because this makes the SAP Fiori application generator fail. rm app/mitigations/.yo-rc.json","title":"Install SAP UI5 Tooling, SAP Fiori Application Generator, and MTA"},{"location":"Launchpad_Service/#remove-broken-dependency-from-risks-application","text":"Remove the following two lines from app/risks/package.json , because they produce build issues and are not needed: \"devDependencies\" : { ... \"@sap/ux-ui5-tooling\" : \"1\" , \"@sap/ux-specification\" : \"latest\" , } Make sure the last entry in \"devDependencies\" doesn't end with a comma ( , ) character.","title":"Remove Broken Dependency from Risks Application"},{"location":"Launchpad_Service/#add-sap-fiori-element-risks-application","text":"Switch to app/risks directory: cd app/risks Add deployment config: fiori add deploy-config cf It will ask for the destination name. Enter cpapp-app-srv .","title":"Add SAP Fiori Element Risks Application"},{"location":"Launchpad_Service/#add-ui5-freestyle-mitigations-application","text":"Repeat the procedure with the app/mitigations folder: cd ../../app/mitigations fiori add deploy-config cf Enter cpapp-app-srv for the destination name again.","title":"Add UI5 Freestyle Mitigations Application"},{"location":"Launchpad_Service/#check-the-results-in-the-mtayaml","text":"The newly added modules nsrisks and nsmitigations do the build of the SAP Fiori application. Each build result is a ZIP file that contains optimized UI resources and a ZIP file manifest-bundle.zip with the manifest.json and the i18n files. The latter is required by the SAP Launchpad service.","title":"Check the Results in the mta.yaml"},{"location":"Launchpad_Service/#risks-application-module-nsrisks","text":"modules : ... - name : nsrisks type : html5 path : app/risks build-parameters : build-result : dist builder : custom commands : - npm install - npm run build:cf supported-platforms : []","title":"Risks Application Module nsrisks"},{"location":"Launchpad_Service/#mitigations-application-module-nsmitigations","text":"modules : ... - name : nsmitigations type : html5 path : app/mitigations build-parameters : build-result : dist builder : custom commands : - npm install - npm run build:cf supported-platforms : []","title":"Mitigations Application Module nsmitigations"},{"location":"Launchpad_Service/#html5-application-deployer","text":"The module cpapp-app-content deploys the ZIP files from the nsrisks.zip and nsmitigations.zip to the SAP HTML5 Application Repository service, where it can be accessed by the SAP Launchpad service using the previously added destinations. modules : ... - name : cpapp-app-content type : com.sap.application.content path : . requires : - name : cpapp-html5-repo-host parameters : content-target : true build-parameters : build-result : resources requires : - artifacts : - nsrisks.zip name : nsrisks target-path : resources/ - artifacts : - nsmitigations.zip name : nsmitigations target-path : resources/","title":"HTML5 Application Deployer"},{"location":"Launchpad_Service/#add-ui-build-files-to-gitignore","text":"The SAP Fiori build files do not need to be stored in Git. You can add it to your .gitignore file: # SAP Fiori build files dist/ resources/ app/*/package-lock.json Can't see .gitignore ? .gitignore files are excluded by default from the filetypes shown in the VS code workspace. In VS code, go to File \u2192 Preferences \u2192 Settings , search for fileexclude , and delete the setting for .gitignore files under the Workspace tab.","title":"Add UI Build Files to .gitignore"},{"location":"Launchpad_Service/#re-build-and-re-deploy-the-mtar-file","text":"Build your project with the MTA Build Tool (MBT): mbt build -t ./ Make sure you're in the root folder of your project Deploy your project to SAP BTP: cf deploy cpapp_1.0.0.mtar MBT build options How to build an MTA archive from the project sources Go to SAP BTP cockpit to check the deployed content.","title":"Re-Build and Re-Deploy the .mtar File"},{"location":"Launchpad_Service/#subscribe-to-sap-launchpad-service","text":"Log on to your Global Account and navigate to the Subaccount where you have deployed your service and application. Choose Services \u2192 Service Marketplace on the left. Search for the Launchpad Service tile and choose Create . Keep the default settings for Service and Plan and choose Create . You have now subscribed to the SAP Launchpad service.","title":"Subscribe to SAP Launchpad Service"},{"location":"Launchpad_Service/#create-your-sap-launchpad-site","text":"Choose Services \u2192 Instances and Subscriptions on the left. Locate the Launchpad Service under Subscriptions and choose Go to Application . In case you get the error: Sorry, we couldn't find the site . If you get the error Sorry, we couldn't find the site. Please contact your site administrator for assistance. while opening the application, you have to assign your user to the Launchpad_Admin role collection. Choose Security \u2192 Trust Configuration on the left. Choose your identity provider from the list. Enter your e-mail address and choose Show Assignments . Choose Assign Role Collection and assign the Launchpad Admin role collection to your user. See section Initial Setup in the SAP Launchpad service's documentation for more details. Choose Provider Manager on the left and refresh the HTML5 Apps entry there. Content providers aren't reloaded automatically when you push an app, so it's important to manually refresh. Choose Content Manager \u2192 Content Explorer and open the content provider HTML5 Apps . Add the Risks and Mitigations to My Content . Choose Content Manager \u2192 My Content . In the item list, choose the item Everyone . Everyone is a role that has to be assigned to the Risks and Mitigations apps so all users can access them. Choose Edit and assign the Risks and Mitigations apps to the role. Choose New \u2192 Group . Type in Risk Management as the title of the group and assign the Risks and Mitigations apps to it. This way, you're telling the SAP Launchpad service to display the Risks and Mitigations apps in a group called Risk Management . Choose Site Directory \u2192 Create Site . Type in Risk Management Site for the site name and choose Create . The new site gets the Everyone role by default, so you don't have to assign it explicitly. The default site properties are sufficient for the purposes of this tutorial.","title":"Create Your SAP Launchpad Site"},{"location":"Launchpad_Service/#test-your-sap-launchpad-site","text":"Choose Go to site . You can see the Risk Management group that includes the Mitigations and Risks apps. Open the Risks app. You have launched your Risks app through the SAP Launchpad service. If you choose Go , you'll get an error because you haven't assigned a role collection to your user yet. We'll do it in the next step.","title":"Test Your SAP Launchpad Site"},{"location":"Launchpage/","text":"Add More Than One Application to the Launch Page Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application Create a Freestyle UI5 Application The results of the previous module Create a Freestyle UI5 Application can be found here . Our risk application has been generated by the SAP Fiori Tools Generator in a way that it sits within a local launch page. This page looks like a real SAP Fiori Launchpad (FLP), but is just a local copy of the otherwise centrally managed FLP. It comes with a limited version of the functionality of the original FLP. There's no option to add or remove apps via a configuration, user roles aren't at all taken into account, and end-user personalization is also not included. If you want these and other FLP functionalities included, you have got to set them up for your project. Find out how to do this in section Add the SAP BTP Launchpad Service . You stick with the launch page for this section though. In the current implementation, the launch page is sitting inside the application. You can find the launch page within your project at app/risks/webapp/index.html . If you now create a second application using the FE generator within your project, it will be generated in the same way, again with its own separated launch page. Instead, you want to use one launch page for all the applications. The UI5 freestyle mitigations application that you created in the Create a Freestyle UI5 Application section doesn't have its own launch page. You can also add that app to the launch page FE risks app. You just need to move the launch page from its original location in the FE risks app and adjust it so it still works in the new location. In your file explorer, navigate to app/risks/webapp . Move the file index.html two folders up to the app folder. As you have now moved up the file two folders, this needs to be reflected in the URL that points to the app in the launch page. In the next steps, you change the URL and also give the path to the application a more fitting name. Open the file index.html in an editor and change the following lines: < script > window [ \"sap-ushell-config\" ] = { defaultRenderer : \"fiori2\" , applications : { \"risks-app\" : { title : \"Risks\" , description : \"Risks\" , additionalInformation : \"SAPUI5.Component=ns.risks\" , applicationType : \"URL\" , url : \"./risks/webapp\" , navigationMode : \"embedded\" }, \"mitigations-app\" : { title : \"Mitigations\" , description : \"Mitigations\" , additionalInformation : \"SAPUI5.Component=ns.mitigations\" , applicationType : \"URL\" , url : \"./mitigations/webapp\" , navigationMode : \"embedded\" } } }; < /script> Rename the file from index.html to launchpage.html . Changing the name of index.html We are changing the name of index.html because cds watch by default looks for an index.html file in the app folder. If cds watch finds such a file, it replaces the default page that also contains the links to the services with the one in the folder. While this makes sense in many cases, for development purposes we stick to the index page of CDS and give a different name to our index file. With cds watch running, open the app in your browser on http://localhost:4004/launchpage.html#Shell-home . You now see the mitigations app next to the risks app on the launch page. The result of these steps can be found in the freestyle-ui5-app branch of the tutorial.","title":"Add More Than One Application to the Launch Page"},{"location":"Launchpage/#add-more-than-one-application-to-the-launch-page","text":"Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application Create a Freestyle UI5 Application The results of the previous module Create a Freestyle UI5 Application can be found here . Our risk application has been generated by the SAP Fiori Tools Generator in a way that it sits within a local launch page. This page looks like a real SAP Fiori Launchpad (FLP), but is just a local copy of the otherwise centrally managed FLP. It comes with a limited version of the functionality of the original FLP. There's no option to add or remove apps via a configuration, user roles aren't at all taken into account, and end-user personalization is also not included. If you want these and other FLP functionalities included, you have got to set them up for your project. Find out how to do this in section Add the SAP BTP Launchpad Service . You stick with the launch page for this section though. In the current implementation, the launch page is sitting inside the application. You can find the launch page within your project at app/risks/webapp/index.html . If you now create a second application using the FE generator within your project, it will be generated in the same way, again with its own separated launch page. Instead, you want to use one launch page for all the applications. The UI5 freestyle mitigations application that you created in the Create a Freestyle UI5 Application section doesn't have its own launch page. You can also add that app to the launch page FE risks app. You just need to move the launch page from its original location in the FE risks app and adjust it so it still works in the new location. In your file explorer, navigate to app/risks/webapp . Move the file index.html two folders up to the app folder. As you have now moved up the file two folders, this needs to be reflected in the URL that points to the app in the launch page. In the next steps, you change the URL and also give the path to the application a more fitting name. Open the file index.html in an editor and change the following lines: < script > window [ \"sap-ushell-config\" ] = { defaultRenderer : \"fiori2\" , applications : { \"risks-app\" : { title : \"Risks\" , description : \"Risks\" , additionalInformation : \"SAPUI5.Component=ns.risks\" , applicationType : \"URL\" , url : \"./risks/webapp\" , navigationMode : \"embedded\" }, \"mitigations-app\" : { title : \"Mitigations\" , description : \"Mitigations\" , additionalInformation : \"SAPUI5.Component=ns.mitigations\" , applicationType : \"URL\" , url : \"./mitigations/webapp\" , navigationMode : \"embedded\" } } }; < /script> Rename the file from index.html to launchpage.html . Changing the name of index.html We are changing the name of index.html because cds watch by default looks for an index.html file in the app folder. If cds watch finds such a file, it replaces the default page that also contains the links to the services with the one in the folder. While this makes sense in many cases, for development purposes we stick to the index page of CDS and give a different name to our index file. With cds watch running, open the app in your browser on http://localhost:4004/launchpage.html#Shell-home . You now see the mitigations app next to the risks app on the launch page. The result of these steps can be found in the freestyle-ui5-app branch of the tutorial.","title":"Add More Than One Application to the Launch Page"},{"location":"Logging/","text":"Add the Application Logging Service Additional Documentation Application Logging for the Cloud Foundry Environment Access Logs Access Logs from Terminal Display recent logs: cf logs --recent <appname> Follow logs live: cf logs <appname> (Choose Ctrl + C to quit.) Access Logs from SAP BTP Cockpit Go to your subaccount in SAP BTP cockpit . Choose Cloud Foundry \u2192 Spaces . Choose your space. Choose on the application whose logs you want to access. Choose Logs . Only the recent logs are displayed. Analyze Logs Using Kibana Go to your subaccount in SAP BTP cockpit . Choose Cloud Foundry \u2192 Spaces . Choose your space. Choose on the application whose logs you want to access. Choose Logs . Choose Open Kibana Dashboard . Kibana shows all logs Although the Open Kibana Dashboard link is placed on the logs view of a particular application, it will give you access to the logs of all spaces where you have the required permission. Logging Service Logs are only kept for a short period and won't be visible in Kibana without the Logging Service. By binding the Logging Service to your application, logs will be kept for longer and will be available for further analysis via Kibana. It's suggested to enable the Logging Service for all applications, so that error analysis will be possible even some hours after the incident. In our experience, the development plan wasn't sufficient for test scenarios. Probably, its ok for personal development spaces. However, this tutorial uses the standard plan to be on the safe side. Add an instance for the logging service to the resources section of your mta.yaml : Trial ... resources : ... - name : cpapp-logs type : org.cloudfoundry.managed-service parameters : service : application-logs service-plan : lite AWS Canary or Live ... resources : ... - name : cpapp-logs type : org.cloudfoundry.managed-service parameters : service : application-logs service-plan : standard Bind the logging service instance to all modules of the mta.yaml : _schema-version : '3.1' ... modules : ... - name : cpapp-srv ... requires : ... - name : cpapp-logs _schema-version : '3.1' ... modules : ... - name : cpapp-db-deployer ... requires : ... - name : cpapp-logs Test It Build the MTAR file and deploy it to your Cloud Foundry space: mbt build -t ./ cf deploy cpapp_1.0.0.mtar Open Kibana after successful deployment. Your org should now be visible in the Kibana dashboard: Choose the ( + ) icon to filter for it. The filter is added to the filter bar on the top of the screen and gets applied on the dashboard. You should see your newly applied applications: You can also browse all logs using the Discover button (compass icon) on the left navigation bar. The available fields are displayed on the left side of the screen. You can add fields to the message display or quickly filter for any of the top values. The time filter is on the right top of the screen. Don't forget to press the Refresh button.","title":"Add the Application Logging Service"},{"location":"Logging/#add-the-application-logging-service","text":"Additional Documentation Application Logging for the Cloud Foundry Environment","title":"Add the Application Logging Service"},{"location":"Logging/#access-logs","text":"","title":"Access Logs"},{"location":"Logging/#access-logs-from-terminal","text":"Display recent logs: cf logs --recent <appname> Follow logs live: cf logs <appname> (Choose Ctrl + C to quit.)","title":"Access Logs from Terminal"},{"location":"Logging/#access-logs-from-sap-btp-cockpit","text":"Go to your subaccount in SAP BTP cockpit . Choose Cloud Foundry \u2192 Spaces . Choose your space. Choose on the application whose logs you want to access. Choose Logs . Only the recent logs are displayed.","title":"Access Logs from SAP BTP Cockpit"},{"location":"Logging/#analyze-logs-using-kibana","text":"Go to your subaccount in SAP BTP cockpit . Choose Cloud Foundry \u2192 Spaces . Choose your space. Choose on the application whose logs you want to access. Choose Logs . Choose Open Kibana Dashboard . Kibana shows all logs Although the Open Kibana Dashboard link is placed on the logs view of a particular application, it will give you access to the logs of all spaces where you have the required permission.","title":"Analyze Logs Using Kibana"},{"location":"Logging/#logging-service","text":"Logs are only kept for a short period and won't be visible in Kibana without the Logging Service. By binding the Logging Service to your application, logs will be kept for longer and will be available for further analysis via Kibana. It's suggested to enable the Logging Service for all applications, so that error analysis will be possible even some hours after the incident. In our experience, the development plan wasn't sufficient for test scenarios. Probably, its ok for personal development spaces. However, this tutorial uses the standard plan to be on the safe side. Add an instance for the logging service to the resources section of your mta.yaml : Trial ... resources : ... - name : cpapp-logs type : org.cloudfoundry.managed-service parameters : service : application-logs service-plan : lite AWS Canary or Live ... resources : ... - name : cpapp-logs type : org.cloudfoundry.managed-service parameters : service : application-logs service-plan : standard Bind the logging service instance to all modules of the mta.yaml : _schema-version : '3.1' ... modules : ... - name : cpapp-srv ... requires : ... - name : cpapp-logs _schema-version : '3.1' ... modules : ... - name : cpapp-db-deployer ... requires : ... - name : cpapp-logs","title":"Logging Service"},{"location":"Logging/#test-it","text":"Build the MTAR file and deploy it to your Cloud Foundry space: mbt build -t ./ cf deploy cpapp_1.0.0.mtar Open Kibana after successful deployment. Your org should now be visible in the Kibana dashboard: Choose the ( + ) icon to filter for it. The filter is added to the filter bar on the top of the screen and gets applied on the dashboard. You should see your newly applied applications: You can also browse all logs using the Discover button (compass icon) on the left navigation bar. The available fields are displayed on the left side of the screen. You can add fields to the message display or quickly filter for any of the top values. The time filter is on the right top of the screen. Don't forget to press the Refresh button.","title":"Test It"},{"location":"Prepare_SAP_CP_and_CF/","text":"Prepare SAP BTP and Cloud Foundry Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application Implement Roles and Authorization Checks in CAP You have an SAP BTP global account, a subaccount, and a Cloud Foundry space with the required entitlements to deploy the application. Additional Documentation Official SAP BTP Documentation Getting Started in the Cloud Foundry Environment Overview You need an SAP BTP account to deploy the services and applications. In general, you have a choice of the following options: Trial If you just want to try out things and don\u2019t want to use any of the parts of this tutorial productively, this is probably the best option for you. The usage is free of cost and many of the services that you need are created for you. For example, an SAP HANA instance is already created for you when you set up the trial account. So, there's the least work to do when you want to concentrate on developing the actual application. This comes with some drawbacks, however. Trial accounts have a limited usage time. After a while, you have to refresh the subscription and redo all the work. Also, there are a number of things that you can\u2019t do as opposed to a full account. Live There are multiple live landscapes in different data centers around the globe. The live landscapes are intended for live customer usage, but also development projects by customers and partners. Option 1: Create a Trial Account You can register for a trial account and access it here . A global account, a subaccount, a Cloud Foundry org, and space with some entitlements that are sufficient to do this tutorial are set up for you. If you use an existing trial account then service entitlements may be missing. New service offerings are not added to existing trial accounts automatically. In case you face a problem when creating a service instance or an application is missing for subscription later in the tutorial, please do the following: Go to your trial subaccount. Choose Entitlements . Choose Configure Entitlements . Choose Add Service Plans . Search for the missing Service Plans and add it with Add Service Plans . Choose Save . Continue with Log On to Cloud Foundry at the end of this page. Option 2: Create Live Account Required Service Entitlements If you choose to create an account on Live, you have to select a number of services that you need to subscribe to, for example, an SAP HANA database. For each service, there are so-called entitlements , which are basically the service plans and the number of units that you want from each service, when you create an account you need to provide these also. The following services with their service plans and entitlements are required for the different modules of the tutorial and will be needed to create the global account and subaccount. Service Plan Amount Unit Tutorial Application Runtime MEMORY 4 GB MTA Deployment Application Logging standard 1 instances MTA Deployment SAP HANA Schemas & HDI Containers hdi-shared 1 instances MTA Deployment SAP HANA Cloud hana 1 instances SAP HANA Cloud Setup Launchpad Service standard 1 active users Launchpad Service * - The services mentioned below are Utility Services, no entitlement needed Service Plan Amount Unit Tutorial Launchpad Service standard 1 active users Launchpad Service Authorization & Trust Management application 1 * instances MTA Deployment * - The following mentioned applications are available as Subscriptions, no entitlement needed Application Plan Amount Unit Tutorial SAP Business Application Studio standard 1 ? numerous At least the services for the tutorials SAP HANA Cloud Setup and MTA Deployment need to be entitled. Create a Global Account As the result of these steps there will be a Cloud Foundry space with required entitlement to deploy the service. This requires the creation of an SAP BTP global account, subaccount, space, and the assignment of the required entitlements. Go to the SAP BTP Control Center : Live Live - Public Cloud - Control Center Choose the ( + ) button in the upper right corner. Enter Account Info: Enter a global account name. Enter a description. (Optional) If you have a Service Inventory ID , then choose the radio button Yes under the section \"Service Provider Account\" and enter it. Choose Next . Enter Business Info: Enter the cost center number. Read & check the disclaimer. Choose Next . Assign Services: Select the services from the table Set Entitlements above. Choose Next . Set Entitlements: Set the entitlements from the Service Entitlements table for the desired tutorial modules. Choose the Add button for each of them. Choose Create Account . Create Subaccount Go to the Control Center: Live Live - Public Cloud - Control Center Select your global account in the dropdown menu. Choose Open in Cockpit . Choose Subaccounts in the left navigation pane. Choose the New Subaccount button. Fill New Subaccount dialog: Enter a Display Name (suggestion: use short name for your project and add the prefix for the landscape, for example: <project name>-cf-eu10 ). Don\u2019t select the checkbox Neo ! Enter a subdomain (only valid HTTP domain characters are allowed). Choose Create . Wait for the completion of the subaccount creation. Choose the tile with your new subaccount. Configure Cloud Foundry in Your Subaccount This creates a Cloud Foundry (CF) Org in your subaccount. There\u2019s always one Cloud Foundry org per subaccount. Later on, when you log on to Cloud Foundry, it asks you which Cloud Foundry org you want to log on to. For any development in you subaccount, you need to choose this org for your subaccount. Choose Enable Cloud Foundry . Enter a Cloud Foundry Org Name and choose OK (suggestion: use SAP_ as prefix, for example: SAP_<project name> ). (Optional) In the left navigation pane under the section Cloud Foundry , choose Org Members and add users for your new account. Your own user should already be there. You can add other users if needed and assign a role to them. On the left-hand pane under Security , choose Administrators and add the required security administrators. Again, your user should be pre-filled. You can add other users if needed. Assign Entitlements In this section, you assign a portion of the entitlements that you\u2019ve bought for your global account to the individual subaccounts. In this, you have only one subaccount. If you have 3 subaccounts, for example, and have bought 100 units of the HTML5 service, you could assign 50 units to the first subaccount, 20 to the second, and the remaining 30 to the third subaccount. In your subaccount, choose Entitlements in the left-hand pane. Choose Configure Entitlements . Choose Add Service Plans . Go through the Entitlements according to the Service Entitlements table and add the required plans for each of them. Choose the + or - symbol to change the quota for the services according to the Service Entitlements table. Choose Save . Create a Cloud Foundry Space Next to Cloud Foundry orgs there are also Spaces . Each Cloud Foundry org can have 0 to n spaces, you create just one here. Open the subaccount page in the SAP BTP cockpit. Choose Spaces in the left pane under the section Cloud Foundry . Choose Create Space . Enter a space name (suggestion: If different sub projects exist in the org: <sub project name>-<stage name> , otherwise: <stage name> ; where stage name is the release stage, for example: dev , val , prod ) Choose Create . User Assignment in the Cloud Foundry Space Open the space page in the SAP BTP cockpit (you can just choose the tile for the space that was created). Choose Members in the left navigation pane. (Optional) Choose Add Members to add all required users, again your own user should already be part of the list. (Optional) Add a DL of your CFDeployment technical user as Space Manager if you have one. Log on to Cloud Foundry from the Command Line Prepare for the next steps by logging on to Cloud Foundry and targeting your space in the account. If you don't know whether you\u2019re logged on to Cloud Foundry or if you're wondering to which Cloud Foundry org and space are you logged on, you can always use cf target in a terminal to find out. If you aren't logged on already, go to your SAP BTP Cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Select your Global Account and then the Subaccount to which you want to deploy your service and application. On the subaccount page, gather all the data to log in to Cloud Foundry (CF): the API Endpoint the Org Name the Space Name For your convenience, these are the API Endpoints for the different landscapes: Trial https://api.cf.eu10.hana.ondemand.com AWS Live EU 10 https://api.cf.eu10.hana.ondemand.com Open up a terminal. Set the Cloud Foundry API endpoint: cf api <API Endpoint of your landscape> Log in to your Cloud Foundry account, using your SAP BTP credentials: cf login Log on to Cloud Foundry in SAP Business Application Studio Choose the icon for Cloud Foundry: Targets on the left navigation bar to select the Cloud Foundry: Targets panel. Choose Create new target Cloud Foundry on the Cloud Foundry: Targets panel. Enter a name for the target, for example cpapp , in the popup and confirm with Enter . Choose cpapp \u2192 Services \u2192 Login Required on the Cloud Foundry: Targets panel. Enter the Cloud Foundry endpoint in the popup and confirm with Enter . For your convenience, these are the API Endpoints for the different landscapes: Trial https://api.cf.eu10.hana.ondemand.com AWS Live EU 10 https://api.cf.eu10.hana.ondemand.com Enter your SAP BTP registered E-Mail address and confirm with Enter . Enter your password and confirm with Enter . Select the Cloud Foundry organization and confirm with Enter . Select the Cloud Foundry space and confirm with Enter .","title":"Prepare SAP BTP and Cloud Foundry"},{"location":"Prepare_SAP_CP_and_CF/#prepare-sap-btp-and-cloud-foundry","text":"Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application Implement Roles and Authorization Checks in CAP You have an SAP BTP global account, a subaccount, and a Cloud Foundry space with the required entitlements to deploy the application. Additional Documentation Official SAP BTP Documentation Getting Started in the Cloud Foundry Environment","title":"Prepare SAP BTP and Cloud Foundry"},{"location":"Prepare_SAP_CP_and_CF/#overview","text":"You need an SAP BTP account to deploy the services and applications. In general, you have a choice of the following options: Trial If you just want to try out things and don\u2019t want to use any of the parts of this tutorial productively, this is probably the best option for you. The usage is free of cost and many of the services that you need are created for you. For example, an SAP HANA instance is already created for you when you set up the trial account. So, there's the least work to do when you want to concentrate on developing the actual application. This comes with some drawbacks, however. Trial accounts have a limited usage time. After a while, you have to refresh the subscription and redo all the work. Also, there are a number of things that you can\u2019t do as opposed to a full account. Live There are multiple live landscapes in different data centers around the globe. The live landscapes are intended for live customer usage, but also development projects by customers and partners.","title":"Overview"},{"location":"Prepare_SAP_CP_and_CF/#option-1-create-a-trial-account","text":"You can register for a trial account and access it here . A global account, a subaccount, a Cloud Foundry org, and space with some entitlements that are sufficient to do this tutorial are set up for you. If you use an existing trial account then service entitlements may be missing. New service offerings are not added to existing trial accounts automatically. In case you face a problem when creating a service instance or an application is missing for subscription later in the tutorial, please do the following: Go to your trial subaccount. Choose Entitlements . Choose Configure Entitlements . Choose Add Service Plans . Search for the missing Service Plans and add it with Add Service Plans . Choose Save . Continue with Log On to Cloud Foundry at the end of this page.","title":"Option 1: Create a Trial Account"},{"location":"Prepare_SAP_CP_and_CF/#option-2-create-live-account","text":"","title":"Option 2: Create Live Account"},{"location":"Prepare_SAP_CP_and_CF/#required-service-entitlements","text":"If you choose to create an account on Live, you have to select a number of services that you need to subscribe to, for example, an SAP HANA database. For each service, there are so-called entitlements , which are basically the service plans and the number of units that you want from each service, when you create an account you need to provide these also. The following services with their service plans and entitlements are required for the different modules of the tutorial and will be needed to create the global account and subaccount. Service Plan Amount Unit Tutorial Application Runtime MEMORY 4 GB MTA Deployment Application Logging standard 1 instances MTA Deployment SAP HANA Schemas & HDI Containers hdi-shared 1 instances MTA Deployment SAP HANA Cloud hana 1 instances SAP HANA Cloud Setup Launchpad Service standard 1 active users Launchpad Service * - The services mentioned below are Utility Services, no entitlement needed Service Plan Amount Unit Tutorial Launchpad Service standard 1 active users Launchpad Service Authorization & Trust Management application 1 * instances MTA Deployment * - The following mentioned applications are available as Subscriptions, no entitlement needed Application Plan Amount Unit Tutorial SAP Business Application Studio standard 1 ? numerous At least the services for the tutorials SAP HANA Cloud Setup and MTA Deployment need to be entitled.","title":"Required Service Entitlements"},{"location":"Prepare_SAP_CP_and_CF/#create-a-global-account","text":"As the result of these steps there will be a Cloud Foundry space with required entitlement to deploy the service. This requires the creation of an SAP BTP global account, subaccount, space, and the assignment of the required entitlements. Go to the SAP BTP Control Center : Live Live - Public Cloud - Control Center Choose the ( + ) button in the upper right corner. Enter Account Info: Enter a global account name. Enter a description. (Optional) If you have a Service Inventory ID , then choose the radio button Yes under the section \"Service Provider Account\" and enter it. Choose Next . Enter Business Info: Enter the cost center number. Read & check the disclaimer. Choose Next . Assign Services: Select the services from the table Set Entitlements above. Choose Next . Set Entitlements: Set the entitlements from the Service Entitlements table for the desired tutorial modules. Choose the Add button for each of them. Choose Create Account .","title":"Create a Global Account"},{"location":"Prepare_SAP_CP_and_CF/#create-subaccount","text":"Go to the Control Center: Live Live - Public Cloud - Control Center Select your global account in the dropdown menu. Choose Open in Cockpit . Choose Subaccounts in the left navigation pane. Choose the New Subaccount button. Fill New Subaccount dialog: Enter a Display Name (suggestion: use short name for your project and add the prefix for the landscape, for example: <project name>-cf-eu10 ). Don\u2019t select the checkbox Neo ! Enter a subdomain (only valid HTTP domain characters are allowed). Choose Create . Wait for the completion of the subaccount creation. Choose the tile with your new subaccount.","title":"Create Subaccount"},{"location":"Prepare_SAP_CP_and_CF/#configure-cloud-foundry-in-your-subaccount","text":"This creates a Cloud Foundry (CF) Org in your subaccount. There\u2019s always one Cloud Foundry org per subaccount. Later on, when you log on to Cloud Foundry, it asks you which Cloud Foundry org you want to log on to. For any development in you subaccount, you need to choose this org for your subaccount. Choose Enable Cloud Foundry . Enter a Cloud Foundry Org Name and choose OK (suggestion: use SAP_ as prefix, for example: SAP_<project name> ). (Optional) In the left navigation pane under the section Cloud Foundry , choose Org Members and add users for your new account. Your own user should already be there. You can add other users if needed and assign a role to them. On the left-hand pane under Security , choose Administrators and add the required security administrators. Again, your user should be pre-filled. You can add other users if needed.","title":"Configure Cloud Foundry in Your Subaccount"},{"location":"Prepare_SAP_CP_and_CF/#assign-entitlements","text":"In this section, you assign a portion of the entitlements that you\u2019ve bought for your global account to the individual subaccounts. In this, you have only one subaccount. If you have 3 subaccounts, for example, and have bought 100 units of the HTML5 service, you could assign 50 units to the first subaccount, 20 to the second, and the remaining 30 to the third subaccount. In your subaccount, choose Entitlements in the left-hand pane. Choose Configure Entitlements . Choose Add Service Plans . Go through the Entitlements according to the Service Entitlements table and add the required plans for each of them. Choose the + or - symbol to change the quota for the services according to the Service Entitlements table. Choose Save .","title":"Assign Entitlements"},{"location":"Prepare_SAP_CP_and_CF/#create-a-cloud-foundry-space","text":"Next to Cloud Foundry orgs there are also Spaces . Each Cloud Foundry org can have 0 to n spaces, you create just one here. Open the subaccount page in the SAP BTP cockpit. Choose Spaces in the left pane under the section Cloud Foundry . Choose Create Space . Enter a space name (suggestion: If different sub projects exist in the org: <sub project name>-<stage name> , otherwise: <stage name> ; where stage name is the release stage, for example: dev , val , prod ) Choose Create .","title":"Create a Cloud Foundry Space"},{"location":"Prepare_SAP_CP_and_CF/#user-assignment-in-the-cloud-foundry-space","text":"Open the space page in the SAP BTP cockpit (you can just choose the tile for the space that was created). Choose Members in the left navigation pane. (Optional) Choose Add Members to add all required users, again your own user should already be part of the list. (Optional) Add a DL of your CFDeployment technical user as Space Manager if you have one.","title":"User Assignment in the Cloud Foundry Space"},{"location":"Prepare_SAP_CP_and_CF/#log-on-to-cloud-foundry-from-the-command-line","text":"Prepare for the next steps by logging on to Cloud Foundry and targeting your space in the account. If you don't know whether you\u2019re logged on to Cloud Foundry or if you're wondering to which Cloud Foundry org and space are you logged on, you can always use cf target in a terminal to find out. If you aren't logged on already, go to your SAP BTP Cockpit by using one of the following links, depending on the landscape you want to deploy to: Trial https://cockpit.hanatrial.ondemand.com/ AWS Live EU 10 https://account.hana.ondemand.com/ Select your Global Account and then the Subaccount to which you want to deploy your service and application. On the subaccount page, gather all the data to log in to Cloud Foundry (CF): the API Endpoint the Org Name the Space Name For your convenience, these are the API Endpoints for the different landscapes: Trial https://api.cf.eu10.hana.ondemand.com AWS Live EU 10 https://api.cf.eu10.hana.ondemand.com Open up a terminal. Set the Cloud Foundry API endpoint: cf api <API Endpoint of your landscape> Log in to your Cloud Foundry account, using your SAP BTP credentials: cf login","title":"Log on to Cloud Foundry from the Command Line"},{"location":"Prepare_SAP_CP_and_CF/#log-on-to-cloud-foundry-in-sap-business-application-studio","text":"Choose the icon for Cloud Foundry: Targets on the left navigation bar to select the Cloud Foundry: Targets panel. Choose Create new target Cloud Foundry on the Cloud Foundry: Targets panel. Enter a name for the target, for example cpapp , in the popup and confirm with Enter . Choose cpapp \u2192 Services \u2192 Login Required on the Cloud Foundry: Targets panel. Enter the Cloud Foundry endpoint in the popup and confirm with Enter . For your convenience, these are the API Endpoints for the different landscapes: Trial https://api.cf.eu10.hana.ondemand.com AWS Live EU 10 https://api.cf.eu10.hana.ondemand.com Enter your SAP BTP registered E-Mail address and confirm with Enter . Enter your password and confirm with Enter . Select the Cloud Foundry organization and confirm with Enter . Select the Cloud Foundry space and confirm with Enter .","title":"Log on to Cloud Foundry in SAP Business Application Studio"},{"location":"Prepare_XSUAA/","text":"Prepare User Authentication and Authorization (XSUAA) Setup Prerequisites Implement Roles and Authorization Checks In CAP Additional Documentation Maintenance of Application Security Application Security Descriptor Configuration Syntax Enable Authentication Support The enable authentication support in CAP for SAP BTP, the xssec and xsenv modules need to be installed. In your project folder carry out: npm i --save @sap/xssec @sap/xsenv Add UAA Service We need to tell CAP that XSUAA is used. For this open the package.json folder in your cpapp project and add the following lines: { \"name\" : \"cpapp\" , ... \"cds\" : { \"requires\" : { \"db\" : { \"kind\" : \"sql\" }, \"uaa\" : { \"kind\" : \"xsuaa\" , \"credentials\" : {} } } } } Roles and Scopes In the context of Cloud Foundry, a single authorization is called scope. For example, there could be a scope \"Read\" and a scope \"Write\". The scope allows a user to read or write a certain business object. Scopes can't be assigned to users directly. They're packaged into roles. For example, there could a role \"Editor\" consisting of the \"Read\" and \"Write\" scopes, while the role \"Viewer\" consists only of the \"Read\" scope. However, CAP recommends using roles only, and creating one-to-one mappings between roles and scopes. We defined two roles in the CAP guide Authorization . XSUAA Security Configuration Create the file xs-security.json by executing: cds compile srv --to xsuaa >xs-security.json The file contains the configuration of the XSUAA (XS User Authentication and Authorization service). The CAP server takes the authorization parts @(restrict ... ) from our service definition form ( Adding CAP Role Restrictions to Entities ) and creates scopes and role templates from it. For example, it found the roles RiskViewer and RiskManager in the srv/risk-service.cds file: entity Risks @ ( restrict : [ { grant : [ 'READ' ], to : [ 'RiskViewer' ] }, { grant : [ '*' ], to : [ 'RiskManager' ] } ]) as projection on my . Risks ; And created scopes and roles for both in the xs-security.json file: { \"xsappname\" : \"cpapp\" , ... \"scopes\" : [ { \"name\" : \"$XSAPPNAME.RiskViewer\" , \"description\" : \"Risk Viewer\" }, { \"name\" : \"$XSAPPNAME.RiskManager\" , \"description\" : \"Risk Manager\" } ], \"role-templates\" : [ { \"name\" : \"RiskViewer\" , \"description\" : \"Risk Viewer\" , \"scope-references\" : [ \"$XSAPPNAME.RiskViewer\" ], \"attribute-references\" : [] }, { \"name\" : \"RiskManager\" , \"description\" : \"Risk Manager\" , \"scope-references\" : [ \"$XSAPPNAME.RiskManager\" ], \"attribute-references\" : [] } ] }","title":"Prepare User Authentication and Authorization (XSUAA) Setup"},{"location":"Prepare_XSUAA/#prepare-user-authentication-and-authorization-xsuaa-setup","text":"Prerequisites Implement Roles and Authorization Checks In CAP Additional Documentation Maintenance of Application Security Application Security Descriptor Configuration Syntax","title":"Prepare User Authentication and Authorization (XSUAA) Setup"},{"location":"Prepare_XSUAA/#enable-authentication-support","text":"The enable authentication support in CAP for SAP BTP, the xssec and xsenv modules need to be installed. In your project folder carry out: npm i --save @sap/xssec @sap/xsenv","title":"Enable Authentication Support"},{"location":"Prepare_XSUAA/#add-uaa-service","text":"We need to tell CAP that XSUAA is used. For this open the package.json folder in your cpapp project and add the following lines: { \"name\" : \"cpapp\" , ... \"cds\" : { \"requires\" : { \"db\" : { \"kind\" : \"sql\" }, \"uaa\" : { \"kind\" : \"xsuaa\" , \"credentials\" : {} } } } }","title":"Add UAA Service"},{"location":"Prepare_XSUAA/#roles-and-scopes","text":"In the context of Cloud Foundry, a single authorization is called scope. For example, there could be a scope \"Read\" and a scope \"Write\". The scope allows a user to read or write a certain business object. Scopes can't be assigned to users directly. They're packaged into roles. For example, there could a role \"Editor\" consisting of the \"Read\" and \"Write\" scopes, while the role \"Viewer\" consists only of the \"Read\" scope. However, CAP recommends using roles only, and creating one-to-one mappings between roles and scopes. We defined two roles in the CAP guide Authorization .","title":"Roles and Scopes"},{"location":"Prepare_XSUAA/#xsuaa-security-configuration","text":"Create the file xs-security.json by executing: cds compile srv --to xsuaa >xs-security.json The file contains the configuration of the XSUAA (XS User Authentication and Authorization service). The CAP server takes the authorization parts @(restrict ... ) from our service definition form ( Adding CAP Role Restrictions to Entities ) and creates scopes and role templates from it. For example, it found the roles RiskViewer and RiskManager in the srv/risk-service.cds file: entity Risks @ ( restrict : [ { grant : [ 'READ' ], to : [ 'RiskViewer' ] }, { grant : [ '*' ], to : [ 'RiskManager' ] } ]) as projection on my . Risks ; And created scopes and roles for both in the xs-security.json file: { \"xsappname\" : \"cpapp\" , ... \"scopes\" : [ { \"name\" : \"$XSAPPNAME.RiskViewer\" , \"description\" : \"Risk Viewer\" }, { \"name\" : \"$XSAPPNAME.RiskManager\" , \"description\" : \"Risk Manager\" } ], \"role-templates\" : [ { \"name\" : \"RiskViewer\" , \"description\" : \"Risk Viewer\" , \"scope-references\" : [ \"$XSAPPNAME.RiskViewer\" ], \"attribute-references\" : [] }, { \"name\" : \"RiskManager\" , \"description\" : \"Risk Manager\" , \"scope-references\" : [ \"$XSAPPNAME.RiskManager\" ], \"attribute-references\" : [] } ] }","title":"XSUAA Security Configuration"},{"location":"Roles_CAP/","text":"Implement Roles and Authorization Checks In CAP Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application Additional Documentation Authentication for CAP Node.js SDK Enable Authentication Support To enable authentication support in CAP, the passport module needs to be installed. Passport is Express-compatible authentication middleware for Node.js. Navigate to your project folder. Install the passport module. npm install --save passport The --save part makes sure it\u2019s also added as a dependency to your project's package.json . Adding Cap Role Restrictions to Entities Open the file srv/risk-service.cds . Add the following restrictions block ( @(...) ) to your Risks and Mitigations entities. using { sap.ui.riskmanagement as my } from '../db/schema'; @path: 'service/risk' service RiskService { entity Risks @(restrict : [ { grant : [ 'READ' ], to : [ 'RiskViewer' ] }, { grant : [ '*' ], to : [ 'RiskManager' ] } ]) as projection on my.Risks; annotate Risks with @odata.draft.enabled; entity Mitigations @(restrict : [ { grant : [ 'READ' ], to : [ 'RiskViewer' ] }, { grant : [ '*' ], to : [ 'RiskManager' ] } ]) as projection on my.Mitigations; annotate Mitigations with @odata.draft.enabled; } With this change, a user with the role RiskViewer can view risks and mitigations, and a user with role RiskManager can view and change risks and mitigations. Add Users for Local Testing Since the authorization checks have been added to the CAP model, they apply not only when deployed to the cloud but also for local testing. Therefore, we need a way to log in to the application locally. CAP offers a possibility to add local users for testing as part of the cds configuration. In this tutorial, we use the .cdsrc.json file to add the users. Copy the file templates/cap/roles/.cdsrc.json to your project directory cpapp . If you're asked to replace an existing file with the same name, confirm. You have to make hidden files visible in your operating system in order to see the file. The file defines two users risk.viewer@tester.sap.com and risk.manager@tester.sap.com . Let's look at the risk.manager@tester.sap.com example: { \"[development]\" : { \"auth\" : { \"passport\" : { \"strategy\" : \"mock\" , \"users\" : { \"risk.viewer@tester.sap.com\" : \"...\" , \"risk.manager@tester.sap.com\" : { \"password\" : \"initial\" , \"ID\" : \"risk.manager@tester.sap.com\" , \"userAttributes\" : { \"email\" : \"risk.manager@tester.sap.com\" }, \"roles\" : [ \"RiskManager\" ] } } } } } } The user is defined by their ID , which happens to be the email address here, but it could also be a user ID. The user has an email , a password parameter, and a roles parameter. Keep in mind that the CAP roles and the Cloud Foundry roles and scopes are not the same thing. Access the Risks Application with a User and a Password When accessing the Risks service in the browser, you get a basic auth popup now, asking for your user and password. You can use the two users to log in and see that it works. With cds watch running, go to http://localhost:4004/launchpage.html . Choose Risks and choose Go . Enter Username : risk.manager@tester.sap.com . Enter Password : initial . You can now access the Risks application. Unfortunately, there\u2019s no logout functionality. You can clear your browser's cache or simply close all browser windows to get rid of the basic auth login data in the browser. For Chrome restart the browser (complete shutdown and restart) by entering chrome: // restart in the address line.","title":"Implement Roles and Authorization Checks In CAP"},{"location":"Roles_CAP/#implement-roles-and-authorization-checks-in-cap","text":"Prerequisites Get Started Create a CAP-Based Service Create an SAP Fiori Elements-Based Application Add Business Logic to Your Application Additional Documentation Authentication for CAP Node.js SDK","title":"Implement Roles and Authorization Checks In CAP"},{"location":"Roles_CAP/#enable-authentication-support","text":"To enable authentication support in CAP, the passport module needs to be installed. Passport is Express-compatible authentication middleware for Node.js. Navigate to your project folder. Install the passport module. npm install --save passport The --save part makes sure it\u2019s also added as a dependency to your project's package.json .","title":"Enable Authentication Support"},{"location":"Roles_CAP/#adding-cap-role-restrictions-to-entities","text":"Open the file srv/risk-service.cds . Add the following restrictions block ( @(...) ) to your Risks and Mitigations entities. using { sap.ui.riskmanagement as my } from '../db/schema'; @path: 'service/risk' service RiskService { entity Risks @(restrict : [ { grant : [ 'READ' ], to : [ 'RiskViewer' ] }, { grant : [ '*' ], to : [ 'RiskManager' ] } ]) as projection on my.Risks; annotate Risks with @odata.draft.enabled; entity Mitigations @(restrict : [ { grant : [ 'READ' ], to : [ 'RiskViewer' ] }, { grant : [ '*' ], to : [ 'RiskManager' ] } ]) as projection on my.Mitigations; annotate Mitigations with @odata.draft.enabled; } With this change, a user with the role RiskViewer can view risks and mitigations, and a user with role RiskManager can view and change risks and mitigations.","title":"Adding Cap Role Restrictions to Entities"},{"location":"Roles_CAP/#add-users-for-local-testing","text":"Since the authorization checks have been added to the CAP model, they apply not only when deployed to the cloud but also for local testing. Therefore, we need a way to log in to the application locally. CAP offers a possibility to add local users for testing as part of the cds configuration. In this tutorial, we use the .cdsrc.json file to add the users. Copy the file templates/cap/roles/.cdsrc.json to your project directory cpapp . If you're asked to replace an existing file with the same name, confirm. You have to make hidden files visible in your operating system in order to see the file. The file defines two users risk.viewer@tester.sap.com and risk.manager@tester.sap.com . Let's look at the risk.manager@tester.sap.com example: { \"[development]\" : { \"auth\" : { \"passport\" : { \"strategy\" : \"mock\" , \"users\" : { \"risk.viewer@tester.sap.com\" : \"...\" , \"risk.manager@tester.sap.com\" : { \"password\" : \"initial\" , \"ID\" : \"risk.manager@tester.sap.com\" , \"userAttributes\" : { \"email\" : \"risk.manager@tester.sap.com\" }, \"roles\" : [ \"RiskManager\" ] } } } } } } The user is defined by their ID , which happens to be the email address here, but it could also be a user ID. The user has an email , a password parameter, and a roles parameter. Keep in mind that the CAP roles and the Cloud Foundry roles and scopes are not the same thing.","title":"Add Users for Local Testing"},{"location":"Roles_CAP/#access-the-risks-application-with-a-user-and-a-password","text":"When accessing the Risks service in the browser, you get a basic auth popup now, asking for your user and password. You can use the two users to log in and see that it works. With cds watch running, go to http://localhost:4004/launchpage.html . Choose Risks and choose Go . Enter Username : risk.manager@tester.sap.com . Enter Password : initial . You can now access the Risks application. Unfortunately, there\u2019s no logout functionality. You can clear your browser's cache or simply close all browser windows to get rid of the basic auth login data in the browser. For Chrome restart the browser (complete shutdown and restart) by entering chrome: // restart in the address line.","title":"Access the Risks Application with a User and a Password"},{"location":"SAP_CP_Role_Assignment/","text":"Assign a Role Collection to a User Documentation Security Administration: Managing Authentication and Authorization (SAP Help) To be able to access the application, your user needs to be assigned to a role collection that provides the requires scopes. Open the SAP BTP Cockpit . Go to the Subaccount where you have deployed your service and application. Choose Security \u2192 Trust Configuration on the left. Choose Default identity provider . Enter the E-Mail Address of your user. Choose Show Assignments . Choose Assign Role Collection . Select RiskManager-<your space> in dropdown Role Collection . Choose Assign Role Collection . The name of the role collection includes the name of your space The role collections are created automatically using the xs-security.json file. Hence, the name of the role collection includes the name of your space where you have deployed your service and application. For example, if the space name is dev , then the name of the role collection wil be RiskManager-dev . The role collection RiskManager-<your space> appears now in the list of your user's role collections. Test It Go to the application and choose the tile Risks . You should be able to see and change the data in the Risks application. If not, probably you have signed in before adding the role collection to your user. Sign out and sign in again to get the added roles in your login ticket. Additional Info: Create a Role Collection Manually Instead of creating the role collection automatically using the xs-security.json , it's also possible to create a role collection manually. For example: Open the SAP BTP Cockpit . Go to the Subaccount . Choose Security \u2192 Role Collections on the left. Choose the + (new role collection) button. Enter Name RiskManager . Choose Create . The new role collection appears now in the list, but it doesn't contain any roles. To add a role: Choose the RiskManager role collection. Choose Edit . Open the value help for Role Name . Select cpapp-...!... in Application Identifier dropdown. The App Identifier is the XSAPPID of your application. It consists of the XSAPPNAME that's been used to create the xsuaa service followed by an exclamation mark ( ! ) and a landscape-wide unique ID. Select RiskManager in list of roles. Choose Add . Choose Save .","title":"Assign a Role Collection to a User"},{"location":"SAP_CP_Role_Assignment/#assign-a-role-collection-to-a-user","text":"Documentation Security Administration: Managing Authentication and Authorization (SAP Help) To be able to access the application, your user needs to be assigned to a role collection that provides the requires scopes. Open the SAP BTP Cockpit . Go to the Subaccount where you have deployed your service and application. Choose Security \u2192 Trust Configuration on the left. Choose Default identity provider . Enter the E-Mail Address of your user. Choose Show Assignments . Choose Assign Role Collection . Select RiskManager-<your space> in dropdown Role Collection . Choose Assign Role Collection . The name of the role collection includes the name of your space The role collections are created automatically using the xs-security.json file. Hence, the name of the role collection includes the name of your space where you have deployed your service and application. For example, if the space name is dev , then the name of the role collection wil be RiskManager-dev . The role collection RiskManager-<your space> appears now in the list of your user's role collections.","title":"Assign a Role Collection to a User"},{"location":"SAP_CP_Role_Assignment/#test-it","text":"Go to the application and choose the tile Risks . You should be able to see and change the data in the Risks application. If not, probably you have signed in before adding the role collection to your user. Sign out and sign in again to get the added roles in your login ticket.","title":"Test It"},{"location":"SAP_CP_Role_Assignment/#additional-info-create-a-role-collection-manually","text":"Instead of creating the role collection automatically using the xs-security.json , it's also possible to create a role collection manually. For example: Open the SAP BTP Cockpit . Go to the Subaccount . Choose Security \u2192 Role Collections on the left. Choose the + (new role collection) button. Enter Name RiskManager . Choose Create . The new role collection appears now in the list, but it doesn't contain any roles. To add a role: Choose the RiskManager role collection. Choose Edit . Open the value help for Role Name . Select cpapp-...!... in Application Identifier dropdown. The App Identifier is the XSAPPID of your application. It consists of the XSAPPNAME that's been used to create the xsuaa service followed by an exclamation mark ( ! ) and a landscape-wide unique ID. Select RiskManager in list of roles. Choose Add . Choose Save .","title":"Additional Info: Create a Role Collection Manually"},{"location":"Sources/","text":"Get Started Installation See all the required installation steps for the tutorial in section Installation . Develop the App Every section is like a module. You can choose which of the sections you want to do. If a section has prerequisites in other sections, they're listed at the beginning. Thus, you can skip a number of sections or stop the tutorial at any point and still have a running service or app, just with fewer features. If you want to go through the tutorial fast, you can just do the tasks in the lists and skip the rest of the text. Create a GitHub Repository for Your Project (Optional) You can create a GitHub repository to persist your development. The following instructions are for local development. For SAP Business Application Studio, read how to Connect to Your Git Source Control System . Create a new GitHub repository. Go to GitHub and create a new GitHub repository. Copy the repository's URL. Go to the directory where you want to create your project: For example: mkdir cpapp Clone your new repository: git clone <git-repository-url> (Replace <git-repository-url> with your GitHub repository's URL.) Import GitHub Repository in SAP Business Application Studio The following instructions are only relevant, if you want to work with SAP Business Application Studio. In your GitHub account go to Settings \u2192 Developer settings \u2192 Personal access token : For example: https://github.com/settings/tokens Generate a new Personal access token . Start your Dev Space of SAP Business Application Studio. Choose Clone from Git on the Welcome page. Paste the GitHub repository URL in the box and choose Enter . Use your GitHub user name and Personal Access Token as user and password . Download the Tutorial Downloading the tutorial gives you easy access to template files that are required for some tutorial modules. Create a directory <MyTutorialDirectory> where you want to download the tutorial. If you're working with SAP Business Application Studio, you can create <MyTutorialDirectory> within your projects folder. Navigate to the previously created directory: cd <MyTutorialDirectory> Clone the tutorial: git clone https://github.tools.sap/CPES/CPAppDevelopment-dev.git (Optional) Clone the Example Repository to Start from an Example If you don't want to start from scratch, but from a specific example of the tutorial, you can clone the example repository and copy the required files in your project. Alternatively, you can fork the project and work on the fork. Clone the Example Repository Change to the parent directory of <MyTutorialDirectory> in a terminal. If you're working with SAP Business Application Studio, this would be your projects folder. Clone the example GitHub repository in a subfolder: git clone https://github.com/SAP-samples/cloud-cap-risk-management cloud-cap-risk-management Copy the Files to Start from an Example Check out the example's branch: cd cloud-cap-risk-management git checkout <branch> (Replace <branch> with the name of the branch of the example that you want to start with.) Copy all files from the example to a local folder <project-dir> , except the .git folder. cp -r .gitignore $( ls -1A | grep -v .git ) ../<project-dir> (Replace <project-dir> with the name of the folder where you want to develop the app.) Check out the master directory to get access to the template files: git checkout master cd ../<project-dir>","title":"Get Started"},{"location":"Sources/#get-started","text":"","title":"Get Started"},{"location":"Sources/#installation","text":"See all the required installation steps for the tutorial in section Installation .","title":"Installation"},{"location":"Sources/#develop-the-app","text":"Every section is like a module. You can choose which of the sections you want to do. If a section has prerequisites in other sections, they're listed at the beginning. Thus, you can skip a number of sections or stop the tutorial at any point and still have a running service or app, just with fewer features. If you want to go through the tutorial fast, you can just do the tasks in the lists and skip the rest of the text.","title":"Develop the App"},{"location":"Sources/#create-a-github-repository-for-your-project","text":"(Optional) You can create a GitHub repository to persist your development. The following instructions are for local development. For SAP Business Application Studio, read how to Connect to Your Git Source Control System . Create a new GitHub repository. Go to GitHub and create a new GitHub repository. Copy the repository's URL. Go to the directory where you want to create your project: For example: mkdir cpapp Clone your new repository: git clone <git-repository-url> (Replace <git-repository-url> with your GitHub repository's URL.)","title":"Create a GitHub Repository for Your Project"},{"location":"Sources/#import-github-repository-in-sap-business-application-studio","text":"The following instructions are only relevant, if you want to work with SAP Business Application Studio. In your GitHub account go to Settings \u2192 Developer settings \u2192 Personal access token : For example: https://github.com/settings/tokens Generate a new Personal access token . Start your Dev Space of SAP Business Application Studio. Choose Clone from Git on the Welcome page. Paste the GitHub repository URL in the box and choose Enter . Use your GitHub user name and Personal Access Token as user and password .","title":"Import GitHub Repository in SAP Business Application Studio"},{"location":"Sources/#download-the-tutorial","text":"Downloading the tutorial gives you easy access to template files that are required for some tutorial modules. Create a directory <MyTutorialDirectory> where you want to download the tutorial. If you're working with SAP Business Application Studio, you can create <MyTutorialDirectory> within your projects folder. Navigate to the previously created directory: cd <MyTutorialDirectory> Clone the tutorial: git clone https://github.tools.sap/CPES/CPAppDevelopment-dev.git","title":"Download the Tutorial"},{"location":"Sources/#optional-clone-the-example-repository-to-start-from-an-example","text":"If you don't want to start from scratch, but from a specific example of the tutorial, you can clone the example repository and copy the required files in your project. Alternatively, you can fork the project and work on the fork.","title":"(Optional) Clone the Example Repository to Start from an Example"},{"location":"Sources/#clone-the-example-repository","text":"Change to the parent directory of <MyTutorialDirectory> in a terminal. If you're working with SAP Business Application Studio, this would be your projects folder. Clone the example GitHub repository in a subfolder: git clone https://github.com/SAP-samples/cloud-cap-risk-management cloud-cap-risk-management","title":"Clone the Example Repository"},{"location":"Sources/#copy-the-files-to-start-from-an-example","text":"Check out the example's branch: cd cloud-cap-risk-management git checkout <branch> (Replace <branch> with the name of the branch of the example that you want to start with.) Copy all files from the example to a local folder <project-dir> , except the .git folder. cp -r .gitignore $( ls -1A | grep -v .git ) ../<project-dir> (Replace <project-dir> with the name of the folder where you want to develop the app.) Check out the master directory to get access to the template files: git checkout master cd ../<project-dir>","title":"Copy the Files to Start from an Example"},{"location":"Tutorial_Overview/","text":"Tutorial Overview The diagram shows the order and dependency of the different modules of this tutorial. Most modules are based on each other and you need to work through them in the given sequence. Click on the boxes to go directly to the first step of the module. graph TD 1[Create a CAP Service and SAP Fiori UI] --> 2[Deploy Your CAP Service<br/> on SAP BTP, Cloud Foundry environment] click 1 \"../CAP_Service\" 2[Deploy Your CAP Service<br/> on SAP BTP, Cloud Foundry environment] click 2 \"../Prepare_SAP_CP_and_CF\" 1[Create a CAP Service and SAP Fiori UI] --> 3[Run Your CAP Application <br/>on SAP BTP, Kyma runtime] click 3 \"../Kyma\" %% -- Formatting -- class 1,2,3,4 SAPcolors; classDef SAPcolors fill:#008FD3,stroke:#008FD3, color:#fff, stroke-width:4px; classDef SAPcolorsOptional fill:#CCC,stroke:#000, color:#000, stroke-width:2px, stroke-dasharray: 5 5;","title":"Tutorial Overview"},{"location":"Tutorial_Overview/#tutorial-overview","text":"The diagram shows the order and dependency of the different modules of this tutorial. Most modules are based on each other and you need to work through them in the given sequence. Click on the boxes to go directly to the first step of the module. graph TD 1[Create a CAP Service and SAP Fiori UI] --> 2[Deploy Your CAP Service<br/> on SAP BTP, Cloud Foundry environment] click 1 \"../CAP_Service\" 2[Deploy Your CAP Service<br/> on SAP BTP, Cloud Foundry environment] click 2 \"../Prepare_SAP_CP_and_CF\" 1[Create a CAP Service and SAP Fiori UI] --> 3[Run Your CAP Application <br/>on SAP BTP, Kyma runtime] click 3 \"../Kyma\" %% -- Formatting -- class 1,2,3,4 SAPcolors; classDef SAPcolors fill:#008FD3,stroke:#008FD3, color:#fff, stroke-width:4px; classDef SAPcolorsOptional fill:#CCC,stroke:#000, color:#000, stroke-width:2px, stroke-dasharray: 5 5;","title":"Tutorial Overview"},{"location":"Undeploy_CF/","text":"Undeploy Your Cloud Foundry Application To undeploy (delete) an mtar , you don't need to delete the apps and the services individually. The deploy service on Cloud Foundry keeps track on the deployed mtar and its resources. You can either undeploy the applications or undeploy the applications and their service instances. Undeploying the applications and their service instances will also delete the data stored in these instances (for example, database content). Delete applications cf undeploy cpapp Delete applications and service instances Deletes all data stored in the application. cf undeploy cpapp --delete-service-keys --delete-services","title":"Undeploy Your Cloud Foundry Application"},{"location":"Undeploy_CF/#undeploy-your-cloud-foundry-application","text":"To undeploy (delete) an mtar , you don't need to delete the apps and the services individually. The deploy service on Cloud Foundry keeps track on the deployed mtar and its resources. You can either undeploy the applications or undeploy the applications and their service instances. Undeploying the applications and their service instances will also delete the data stored in these instances (for example, database content). Delete applications cf undeploy cpapp Delete applications and service instances Deletes all data stored in the application. cf undeploy cpapp --delete-service-keys --delete-services","title":"Undeploy Your Cloud Foundry Application"},{"location":"installation/","text":"Installation Here's an overview of the tools and software required to get started with this tutorial. This section contains all the installations that you would have to do when starting from scratch. It\u2019s likely that you have some of the software already installed, so you can just skip those parts. Editors For this tutorial, you have two options: Option 1: Using Visual Studio Code (VS Code) Option 2: Using SAP Business Application Studio (SAP BAS) \u2192 You benefit from not having to install additional extensions, but you need an SAP BTP account. This tutorial is using VS Code as an editor and if you want to exactly go along with the tutorial, use VS Code . Option 1: Using Visual Studio Code (VS Code) Command Line Interpreters This tutorial contains a number of command line snippets that need to be pasted into a terminal. All snippets listed for macOS/Linux or without platform information can be executed in the bash or zsh , which are the default shells for these platforms. The Windows snippets are for the Windows Command Line and not for the PowerShell. Windows users are suggested to use the Git BASH instead, which is part of the Git for Windows installation and contains the basic UNIX command line tools. In the Git BASH , use the macOS/Linux snippets of the tutorial. VS Code supports the use of the Git BASH for the integrated terminal as well. Install Git Git is the version control system that you need to download the files of this tutorial but also to develop anything in collaboration with others really. Check whether you already have git installed by opening a terminal and type: git version You should get an output like: git version 2.x.x If not, go to Git downloads , pick the installer appropriate for your operating system and install it. Install Node.js Node.js is the JavaScript runtime the CAP backend part of the application runs on and that is needed for some of the tools involved to develop the application. In case you don't know whether you have Node.js installed and whether it has the right version (>=12), open a terminal and type: node -v You should get an output like: v14.x.x If not, go to Node.js download page, pick the installer appropriate for your operating system, and install it. Install SQLite (Windows Only) You need to install SQLite tools for Windows. Find the steps how to install it in the CAP documentation in section How Do I Install SQLite . Install Command-Line Tools for Xcode (macOS Only) Some node modules need binary modules ( node-gyp ). Mac users need to install the Xcode tools to be able to run them. There are two options to install them: Using the command line: xcode-select --install Downloading Xcode (a login with your Apple ID and password is required). Search for Command Line Tools for Xcode . Install the UI5 Command Line Interface A Node.js version 12 or higher is required to install the SAP UI5 CLI. See UI5 CLI for more details. Check in a terminal whether you already have the UI5 CLI installed: ui5 --version If you don't get a version number, install the UI5 CLI: npm install --global @ui5/cli Verify that the installation was successful by running the version command again: ui5 --version Install the Cloud Foundry Command Line Interface (CF CLI) This is needed if you want to use the services and applications that you create in this tutorial on SAP BTP. In this case, you need the CF CLI to deploy the services and apps to the platform. If you don't intend to deploy the service and apps to SAP BTP, you can skip this installation. See section Installing the cf CLI in the Cloud Foundry Documentation for more details. macOS Check whether the package manager brew is installed on your machine: brew --version If there\u2019s an output of a version of brew , you got brew and it's best if you install the CF CLI: brew install cloudfoundry/tap/cf-cli (If you don't have brew , you might want to consider installing brew , because it lets you install many software packages easily even outside the context of this tutorial). If you don't have brew , you have to download a binary installer as described here . In either case, after the installation, check whether you get the output of a version indicating the installation succeeded: cf --version Follow this tutorial to configure your API endpoint. Windows Download a binary installer as described here . Follow this tutorial to configure your API endpoint. Linux Follow the steps described here . Follow this tutorial to configure your API endpoint. Install VS Code It\u2019s used to edit the code of the application project and it comes with a couple of so-called extensions from SAP (CAP and SAP Fiori Tools) that are also used here. In case you don't have it, go to the Visual Studio Code homepage and install the version appropriate for your operating system. If you work on macOS, you\u2019ve to additionally do the following as described here . To start it like any other application and to start it from the terminal, follow these steps: Move VS Code from your Download folder to the Applications folder. Use cmd + shift + P keys to open the command palette. Type Install 'code' command in PATH and choose Enter . Add CAP Tooling CAP provides you with all the tools to create your data model with entities and your services. It helps you tremendously to get these services running locally during development with an incredible speed. It also creates the connection to both local databases and databases in the cloud (SAP HANA). It comes with different tooling that is used in this tutorial. You can see the details in the CAP documentation . In short: Install CDS development kit globally in a terminal: npm i -g @sap/cds-dk This process takes some minutes installing the cds command that you'll use in the next steps. On macOS/Linux, you need to follow the steps as described here . If there\u2019s an older @sap/cds package already installed on your machine, you have to remove it first. You\u2019ll be instructed to do so. If you run into problems, see the Troubleshooting guide in the CAP documentation for more details. To verify that the installation was successful, run cds without arguments. This lists the available cds commands. For example, use cds version to check the version that you\u2019ve installed. To know what is the latest version, see the Release Notes for CAP. Check what versions of the CDS libraries have been installed: cds v Install VS Code Extensions Install the SAP Language Support extensions for VS Code: Open VS Code. Choose the Extensions icon in the left pane. Type SAP CDS in the search field and choose SAP Language Support from the search results. Choose Install . Restart VS Code after the installation. Now, the extension is installed in VS Code. If the extension is already installed and enabled in VS Code, it is updated automatically. The VS Code extension comes with a welcome page, which shows latest release notes of CAP. It starts automatically whenever an update arrives for the extension. Later, you can open the page through the command CDS: Show CAP Release Notes . Learn more about the features of the extension in this short demo and see the features and commands in the CAP documentation. Install SAP Fiori Tools Extension Pack SAP Fiori Tools are a number of extensions for VS Code. They mainly support you in developing SAP Fiori Elements apps. In this tutorial, we use the so-called SAP Fiori application generator to create an SAP Fiori Elements app, you need this for section Create an SAP Fiori elements-based Application of this tutorial. Additional Documentation SAP Fiori Tools (For macOS only) You need to install the code command in PATH. Open the Command Palette ( \u21e7\u2318P ) and type shell command to find the Shell Command: Install 'code' command in PATH . Restart the terminal for the new $PATH value to take effect. Install the SAP Fiori tools - Extension Pack including six extensions for VS Code. Open VS Code. Choose the Extensions icon in the left pane. Type SAP Fiori tools in the search field and choose SAP Fiori tools - Extension Pack from the search results. Choose Install . Restart VS Code after the installation. After a restart of VS Code, you can check for the tools by invoking View \u2192 Extensions and then scrolling through the list of Enabled extensions. They all start with SAP Fiori tools . If the extension is already installed and enabled in VS Code, it's updated automatically. Install SAPUI5 Freestyle App Templates Using Yeoman SAPUI5 comes with templates that kick start your development for SAPUI5 freestyle app development. You need these if you want to carry out the Create a Freestyle UI5 application section. SAPUI5 templates are based on Yeoman , a tool for scaffolding web apps. You need to install it first. Check in a terminal whether you already have Yeoman installed: yo --version If you don't get a version number, install Yeoman: npm install -g yo Now, you can go ahead and install the SAPUI5 templates : npm install -g yo @sapui5/generator-sapui5-templates Test whether everything works: yo --generators If the @sapui5/sapui5-templates generator is listed in the terminal, you're ready to go. Option 2: Using SAP Business Application Studio As mentioned in the section Editors , using SAP BAS is optional and the tutorial uses VS Code as an editor. SAP Business Application Studio (SAP BAS) is the successor of the SAP Web IDE. Like the SAP Web IDE, it\u2019s mostly an online IDE but a local version is also available. Many of the so-called extensions (separate, optional software packages that add a certain functionality to the IDE) that are available for Microsoft's Visual Code are also available for SAP BAS and vice versa. If you decide to use SAP BAS, your benefits are: You don't have to install or update any of the packages below yourself. The all come with your BAS instance. In some cases, you have additional productivity features that are available only in SAP BAS but not VS Code. However, if you go for SAP BAS, you first have to get access to SAP BTP, it can only be used with a user there. At a later stage of the tutorial, this is required anyway, however, you can easily perform the steps to create a CAP service with its own persistency and access to a remote SAP S/4HANA system, as well as an SAP Fiori Elements and a SAPUI5 application on top of the service without any access the SAP BTP and only develop these parts locally. If you\u2019re looking for a deployment to SCO (obviously), using the SAP Fiori launchpad, develop a multi tenant app as well as using workflow, you need SAP BTP access later anyway. Set Up Business Application Studio in an SAP BTP Trial Account If you don't have an SAP BTP account already, see here for the choices and how to set it up. Afterwards you either have a Trial account or a Canary or Live account. If you're using a Canary or Live account, you need to create an Entitlement for SAP BAS as well. Trial Go to SAP BTP Cockpit Trial . Choose Enter Your Trial Account . Choose the subaccount trial . Canary/Live Go to SAP BTP Cockpit and choose the Global Account that you\u2019ve created. Choose your subaccount. For all account types: In your subaccount, choose Service Marketplace in the left-hand navigation. Search for SAP Business Application Studio . Choose Create . Choose as Plan trial or standard depending on your landscape. Choose Create . Navigate back to your subaccount overview with the breadcrumbs. On the left-hand pane, expand Security and then choose Trust Configuration . Choose Default identity provider (Trial) or SAP ID Service (Canary/Live) in the list that comes up. Enter your E-Mail address with which you\u2019re registered for SAP BTP. Choose Assign Role Collection and then add the following role collections one by one, by choosing Assign Role Collection . Business_Application_Studio_Administrator Business_Application_Studio_Developer Business_Application_Studio_Extension_Deployer Navigate back to your subaccount overview with the breadcrumbs. On the left-hand pane, choose Instances and Subscriptions . Choose Go to Application in the Subscriptions category for SAP Business Application Studio application or choose the icon. Log in with your SAP BTP account user and password. Save the URL in your favorite link list, you'll need this URL again. On the Dev Spaces selection UI, choose Create Dev Space and enter cpapp as the Dev Space name. Choose SAP Cloud Business Application as the application kind. Choose Workflow Management as additional SAP Extensions you want to install. Choose Create Dev Space . Wait until the Dev Space has been created. This can take some time. Open the Dev Space in SAP BAS Open the Dev Space by choosing its name. In the opened editor, choose Open Workspace . Select the projects folder in the Open Workspace dialog. Choose Open . SAP BAS will refresh and select the projects folder as the workspace root.","title":"Installation"},{"location":"installation/#installation","text":"Here's an overview of the tools and software required to get started with this tutorial. This section contains all the installations that you would have to do when starting from scratch. It\u2019s likely that you have some of the software already installed, so you can just skip those parts.","title":"Installation"},{"location":"installation/#editors","text":"For this tutorial, you have two options: Option 1: Using Visual Studio Code (VS Code) Option 2: Using SAP Business Application Studio (SAP BAS) \u2192 You benefit from not having to install additional extensions, but you need an SAP BTP account. This tutorial is using VS Code as an editor and if you want to exactly go along with the tutorial, use VS Code .","title":"Editors "},{"location":"installation/#option-1-using-visual-studio-code-vs-code","text":"","title":"Option 1: Using Visual Studio Code (VS Code)"},{"location":"installation/#command-line-interpreters","text":"This tutorial contains a number of command line snippets that need to be pasted into a terminal. All snippets listed for macOS/Linux or without platform information can be executed in the bash or zsh , which are the default shells for these platforms. The Windows snippets are for the Windows Command Line and not for the PowerShell. Windows users are suggested to use the Git BASH instead, which is part of the Git for Windows installation and contains the basic UNIX command line tools. In the Git BASH , use the macOS/Linux snippets of the tutorial. VS Code supports the use of the Git BASH for the integrated terminal as well.","title":"Command Line Interpreters"},{"location":"installation/#install-git","text":"Git is the version control system that you need to download the files of this tutorial but also to develop anything in collaboration with others really. Check whether you already have git installed by opening a terminal and type: git version You should get an output like: git version 2.x.x If not, go to Git downloads , pick the installer appropriate for your operating system and install it.","title":"Install Git"},{"location":"installation/#install-nodejs","text":"Node.js is the JavaScript runtime the CAP backend part of the application runs on and that is needed for some of the tools involved to develop the application. In case you don't know whether you have Node.js installed and whether it has the right version (>=12), open a terminal and type: node -v You should get an output like: v14.x.x If not, go to Node.js download page, pick the installer appropriate for your operating system, and install it.","title":"Install Node.js"},{"location":"installation/#install-sqlite-windows-only","text":"You need to install SQLite tools for Windows. Find the steps how to install it in the CAP documentation in section How Do I Install SQLite .","title":"Install SQLite (Windows Only)"},{"location":"installation/#install-command-line-tools-for-xcode-macos-only","text":"Some node modules need binary modules ( node-gyp ). Mac users need to install the Xcode tools to be able to run them. There are two options to install them: Using the command line: xcode-select --install Downloading Xcode (a login with your Apple ID and password is required). Search for Command Line Tools for Xcode .","title":"Install Command-Line Tools for Xcode (macOS Only)"},{"location":"installation/#install-the-ui5-command-line-interface","text":"A Node.js version 12 or higher is required to install the SAP UI5 CLI. See UI5 CLI for more details. Check in a terminal whether you already have the UI5 CLI installed: ui5 --version If you don't get a version number, install the UI5 CLI: npm install --global @ui5/cli Verify that the installation was successful by running the version command again: ui5 --version","title":"Install the UI5 Command Line Interface"},{"location":"installation/#install-the-cloud-foundry-command-line-interface-cf-cli","text":"This is needed if you want to use the services and applications that you create in this tutorial on SAP BTP. In this case, you need the CF CLI to deploy the services and apps to the platform. If you don't intend to deploy the service and apps to SAP BTP, you can skip this installation. See section Installing the cf CLI in the Cloud Foundry Documentation for more details. macOS Check whether the package manager brew is installed on your machine: brew --version If there\u2019s an output of a version of brew , you got brew and it's best if you install the CF CLI: brew install cloudfoundry/tap/cf-cli (If you don't have brew , you might want to consider installing brew , because it lets you install many software packages easily even outside the context of this tutorial). If you don't have brew , you have to download a binary installer as described here . In either case, after the installation, check whether you get the output of a version indicating the installation succeeded: cf --version Follow this tutorial to configure your API endpoint. Windows Download a binary installer as described here . Follow this tutorial to configure your API endpoint. Linux Follow the steps described here . Follow this tutorial to configure your API endpoint.","title":"Install the Cloud Foundry Command Line Interface (CF CLI)"},{"location":"installation/#install-vs-code","text":"It\u2019s used to edit the code of the application project and it comes with a couple of so-called extensions from SAP (CAP and SAP Fiori Tools) that are also used here. In case you don't have it, go to the Visual Studio Code homepage and install the version appropriate for your operating system. If you work on macOS, you\u2019ve to additionally do the following as described here . To start it like any other application and to start it from the terminal, follow these steps: Move VS Code from your Download folder to the Applications folder. Use cmd + shift + P keys to open the command palette. Type Install 'code' command in PATH and choose Enter .","title":"Install VS Code"},{"location":"installation/#add-cap-tooling","text":"CAP provides you with all the tools to create your data model with entities and your services. It helps you tremendously to get these services running locally during development with an incredible speed. It also creates the connection to both local databases and databases in the cloud (SAP HANA). It comes with different tooling that is used in this tutorial. You can see the details in the CAP documentation . In short: Install CDS development kit globally in a terminal: npm i -g @sap/cds-dk This process takes some minutes installing the cds command that you'll use in the next steps. On macOS/Linux, you need to follow the steps as described here . If there\u2019s an older @sap/cds package already installed on your machine, you have to remove it first. You\u2019ll be instructed to do so. If you run into problems, see the Troubleshooting guide in the CAP documentation for more details. To verify that the installation was successful, run cds without arguments. This lists the available cds commands. For example, use cds version to check the version that you\u2019ve installed. To know what is the latest version, see the Release Notes for CAP. Check what versions of the CDS libraries have been installed: cds v","title":"Add CAP Tooling"},{"location":"installation/#install-vs-code-extensions","text":"Install the SAP Language Support extensions for VS Code: Open VS Code. Choose the Extensions icon in the left pane. Type SAP CDS in the search field and choose SAP Language Support from the search results. Choose Install . Restart VS Code after the installation. Now, the extension is installed in VS Code. If the extension is already installed and enabled in VS Code, it is updated automatically. The VS Code extension comes with a welcome page, which shows latest release notes of CAP. It starts automatically whenever an update arrives for the extension. Later, you can open the page through the command CDS: Show CAP Release Notes . Learn more about the features of the extension in this short demo and see the features and commands in the CAP documentation.","title":"Install VS Code Extensions"},{"location":"installation/#install-sap-fiori-tools-extension-pack","text":"SAP Fiori Tools are a number of extensions for VS Code. They mainly support you in developing SAP Fiori Elements apps. In this tutorial, we use the so-called SAP Fiori application generator to create an SAP Fiori Elements app, you need this for section Create an SAP Fiori elements-based Application of this tutorial. Additional Documentation SAP Fiori Tools (For macOS only) You need to install the code command in PATH. Open the Command Palette ( \u21e7\u2318P ) and type shell command to find the Shell Command: Install 'code' command in PATH . Restart the terminal for the new $PATH value to take effect. Install the SAP Fiori tools - Extension Pack including six extensions for VS Code. Open VS Code. Choose the Extensions icon in the left pane. Type SAP Fiori tools in the search field and choose SAP Fiori tools - Extension Pack from the search results. Choose Install . Restart VS Code after the installation. After a restart of VS Code, you can check for the tools by invoking View \u2192 Extensions and then scrolling through the list of Enabled extensions. They all start with SAP Fiori tools . If the extension is already installed and enabled in VS Code, it's updated automatically.","title":"Install SAP Fiori Tools Extension Pack"},{"location":"installation/#install-sapui5-freestyle-app-templates-using-yeoman","text":"SAPUI5 comes with templates that kick start your development for SAPUI5 freestyle app development. You need these if you want to carry out the Create a Freestyle UI5 application section. SAPUI5 templates are based on Yeoman , a tool for scaffolding web apps. You need to install it first. Check in a terminal whether you already have Yeoman installed: yo --version If you don't get a version number, install Yeoman: npm install -g yo Now, you can go ahead and install the SAPUI5 templates : npm install -g yo @sapui5/generator-sapui5-templates Test whether everything works: yo --generators If the @sapui5/sapui5-templates generator is listed in the terminal, you're ready to go.","title":"Install SAPUI5 Freestyle App Templates Using Yeoman"},{"location":"installation/#option-2-using-sap-business-application-studio","text":"As mentioned in the section Editors , using SAP BAS is optional and the tutorial uses VS Code as an editor. SAP Business Application Studio (SAP BAS) is the successor of the SAP Web IDE. Like the SAP Web IDE, it\u2019s mostly an online IDE but a local version is also available. Many of the so-called extensions (separate, optional software packages that add a certain functionality to the IDE) that are available for Microsoft's Visual Code are also available for SAP BAS and vice versa. If you decide to use SAP BAS, your benefits are: You don't have to install or update any of the packages below yourself. The all come with your BAS instance. In some cases, you have additional productivity features that are available only in SAP BAS but not VS Code. However, if you go for SAP BAS, you first have to get access to SAP BTP, it can only be used with a user there. At a later stage of the tutorial, this is required anyway, however, you can easily perform the steps to create a CAP service with its own persistency and access to a remote SAP S/4HANA system, as well as an SAP Fiori Elements and a SAPUI5 application on top of the service without any access the SAP BTP and only develop these parts locally. If you\u2019re looking for a deployment to SCO (obviously), using the SAP Fiori launchpad, develop a multi tenant app as well as using workflow, you need SAP BTP access later anyway.","title":"Option 2: Using SAP Business Application Studio"},{"location":"installation/#set-up-business-application-studio-in-an-sap-btp-trial-account","text":"If you don't have an SAP BTP account already, see here for the choices and how to set it up. Afterwards you either have a Trial account or a Canary or Live account. If you're using a Canary or Live account, you need to create an Entitlement for SAP BAS as well. Trial Go to SAP BTP Cockpit Trial . Choose Enter Your Trial Account . Choose the subaccount trial . Canary/Live Go to SAP BTP Cockpit and choose the Global Account that you\u2019ve created. Choose your subaccount. For all account types: In your subaccount, choose Service Marketplace in the left-hand navigation. Search for SAP Business Application Studio . Choose Create . Choose as Plan trial or standard depending on your landscape. Choose Create . Navigate back to your subaccount overview with the breadcrumbs. On the left-hand pane, expand Security and then choose Trust Configuration . Choose Default identity provider (Trial) or SAP ID Service (Canary/Live) in the list that comes up. Enter your E-Mail address with which you\u2019re registered for SAP BTP. Choose Assign Role Collection and then add the following role collections one by one, by choosing Assign Role Collection . Business_Application_Studio_Administrator Business_Application_Studio_Developer Business_Application_Studio_Extension_Deployer Navigate back to your subaccount overview with the breadcrumbs. On the left-hand pane, choose Instances and Subscriptions . Choose Go to Application in the Subscriptions category for SAP Business Application Studio application or choose the icon. Log in with your SAP BTP account user and password. Save the URL in your favorite link list, you'll need this URL again. On the Dev Spaces selection UI, choose Create Dev Space and enter cpapp as the Dev Space name. Choose SAP Cloud Business Application as the application kind. Choose Workflow Management as additional SAP Extensions you want to install. Choose Create Dev Space . Wait until the Dev Space has been created. This can take some time.","title":"Set Up Business Application Studio in an SAP BTP Trial Account"},{"location":"installation/#open-the-dev-space-in-sap-bas","text":"Open the Dev Space by choosing its name. In the opened editor, choose Open Workspace . Select the projects folder in the Open Workspace dialog. Choose Open . SAP BAS will refresh and select the projects folder as the workspace root.","title":"Open the Dev Space in SAP BAS"},{"location":"includes/BTP_Entitlements/","text":"Service Plan Amount Unit Tutorial Application Runtime MEMORY 4 GB MTA Deployment Application Logging standard 1 instances MTA Deployment SAP HANA Schemas & HDI Containers hdi-shared 1 instances MTA Deployment SAP HANA Cloud hana 1 instances SAP HANA Cloud Setup Launchpad Service standard 1 active users Launchpad Service * - The services mentioned below are Utility Services, no entitlement needed Service Plan Amount Unit Tutorial Launchpad Service standard 1 active users Launchpad Service Authorization & Trust Management application 1 * instances MTA Deployment * - The following mentioned applications are available as Subscriptions, no entitlement needed Application Plan Amount Unit Tutorial SAP Business Application Studio standard 1 ? numerous","title":"BTP Entitlements"},{"location":"includes/Prepare_SAP_CP_and_CF_Live_or_Canary/","text":"Option 2: Create Live Account","title":"Prepare SAP CP and CF Live or Canary"},{"location":"includes/Prepare_SAP_CP_and_CF_Live_or_Canary/#option-2-create-live-account","text":"","title":"Option 2: Create Live Account"}]}